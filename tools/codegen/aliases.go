package main

import (
	"fmt"
	"go/ast"
	"os"
	"text/template"

	"go.rgst.io/stencil/pkg/slogext"
	"golang.org/x/tools/go/packages"
)

var aliasesTpl = `// Code generated by ./tools/codegen; DO NOT EDIT.
package gitlab

import "github.com/xanzy/go-gitlab"

{{- range .Aliases }}

// {{ .Name }} is an alias to [gitlab.{{ .Name }}]
type {{ .Name }} gitlab.{{ .Name }}

{{- end }}
`

// Alias is a type alias to create.
type Alias struct {
	// Name is the name of an exported type to create an alias for.
	Name string
}

// generateAliases generates type aliases for all exported types in the
// go-gitlab package. This excludes any service types.
func generateAliases(log slogext.Logger, services []string, pkgs []*packages.Package) error {
	aliasesTpl, err := template.New("aliases").Parse(aliasesTpl)
	if err != nil {
		return fmt.Errorf("failed to parse template: %w", err)
	}

	// Convert the services to a map for faster lookups.
	serviceMap := make(map[string]struct{}, len(services))
	for _, service := range services {
		serviceMap[service] = struct{}{}
	}

	aliases := make([]Alias, 0)
	for _, pkg := range pkgs {
		for _, file := range pkg.Syntax {
			for _, decl := range file.Decls {
				decl, ok := decl.(*ast.GenDecl)
				if !ok {
					continue
				}

				for _, spec := range decl.Specs {
					spec, ok := spec.(*ast.TypeSpec)
					if !ok {
						continue
					}

					// Skip services.
					if _, ok := serviceMap[spec.Name.Name]; ok {
						continue
					}

					// Skip non-exported types.
					if !spec.Name.IsExported() {
						continue
					}

					aliases = append(aliases, Alias{
						Name: spec.Name.Name,
					})
				}
			}
		}
	}

	log.Infof("Created %d type aliases", len(aliases))
	f, err := os.Create("aliases.go")
	if err != nil {
		return fmt.Errorf("failed to create file: %w", err)
	}
	defer f.Close()

	if err := aliasesTpl.Execute(f, map[string]any{
		"Aliases": aliases,
	}); err != nil {
		return fmt.Errorf("failed to execute template: %w", err)
	}

	return nil
}
