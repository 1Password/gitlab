// Code generated by ifacemaker; DO NOT EDIT.

package gitlab

import (
	"io"
)

// UsersService is an interface for [gitlab.Client.Users]
type UsersService interface {
	// ListUserContributionEvents retrieves user contribution events
	// for the specified user, sorted from newest to oldest.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/events.html#get-user-contribution-events
	ListUserContributionEvents(uid interface{}, opt *ListContributionEventsOptions, options ...RequestOptionFunc) ([]*ContributionEvent, *Response, error)
	// ListUsers gets a list of users.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/users.html#list-users
	ListUsers(opt *ListUsersOptions, options ...RequestOptionFunc) ([]*User, *Response, error)
	// GetUser gets a single user.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/users.html#single-user
	GetUser(user int, opt GetUsersOptions, options ...RequestOptionFunc) (*User, *Response, error)
	// CreateUser creates a new user. Note only administrators can create new users.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/users.html#user-creation
	CreateUser(opt *CreateUserOptions, options ...RequestOptionFunc) (*User, *Response, error)
	// ModifyUser modifies an existing user. Only administrators can change attributes
	// of a user.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/users.html#user-modification
	ModifyUser(user int, opt *ModifyUserOptions, options ...RequestOptionFunc) (*User, *Response, error)
	// DeleteUser deletes a user. Available only for administrators. This is an
	// idempotent function, calling this function for a non-existent user id still
	// returns a status code 200 OK. The JSON response differs if the user was
	// actually deleted or not. In the former the user is returned and in the
	// latter not.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/users.html#user-deletion
	DeleteUser(user int, options ...RequestOptionFunc) (*Response, error)
	// CurrentUser gets currently authenticated user.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/users.html#list-current-user
	CurrentUser(options ...RequestOptionFunc) (*User, *Response, error)
	// CurrentUserStatus retrieves the user status
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/users.html#user-status
	CurrentUserStatus(options ...RequestOptionFunc) (*UserStatus, *Response, error)
	// GetUserStatus retrieves a user's status
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/users.html#get-the-status-of-a-user
	GetUserStatus(user int, options ...RequestOptionFunc) (*UserStatus, *Response, error)
	// SetUserStatus sets the user's status
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/users.html#set-user-status
	SetUserStatus(opt *UserStatusOptions, options ...RequestOptionFunc) (*UserStatus, *Response, error)
	// GetUserAssociationsCount gets a list of a specified user associations.
	//
	// Gitlab API docs: https://docs.gitlab.com/ee/api/users.html#list-associations-count-for-user
	GetUserAssociationsCount(user int, options ...RequestOptionFunc) (*UserAssociationsCount, *Response, error)
	// ListSSHKeys gets a list of currently authenticated user's SSH keys.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/users.html#list-ssh-keys
	ListSSHKeys(opt *ListSSHKeysOptions, options ...RequestOptionFunc) ([]*SSHKey, *Response, error)
	// ListSSHKeysForUser gets a list of a specified user's SSH keys.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/users.html#list-ssh-keys-for-user
	ListSSHKeysForUser(uid interface{}, opt *ListSSHKeysForUserOptions, options ...RequestOptionFunc) ([]*SSHKey, *Response, error)
	// GetSSHKey gets a single key.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/users.html#single-ssh-key
	GetSSHKey(key int, options ...RequestOptionFunc) (*SSHKey, *Response, error)
	// GetSSHKeyForUser gets a single key for a given user.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/users.html#single-ssh-key-for-given-user
	GetSSHKeyForUser(user int, key int, options ...RequestOptionFunc) (*SSHKey, *Response, error)
	// AddSSHKey creates a new key owned by the currently authenticated user.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/users.html#add-ssh-key
	AddSSHKey(opt *AddSSHKeyOptions, options ...RequestOptionFunc) (*SSHKey, *Response, error)
	// AddSSHKeyForUser creates new key owned by specified user. Available only for
	// admin.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/users.html#add-ssh-key-for-user
	AddSSHKeyForUser(user int, opt *AddSSHKeyOptions, options ...RequestOptionFunc) (*SSHKey, *Response, error)
	// DeleteSSHKey deletes key owned by currently authenticated user. This is an
	// idempotent function and calling it on a key that is already deleted or not
	// available results in 200 OK.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/users.html#delete-ssh-key-for-current-user
	DeleteSSHKey(key int, options ...RequestOptionFunc) (*Response, error)
	// DeleteSSHKeyForUser deletes key owned by a specified user. Available only
	// for admin.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/users.html#delete-ssh-key-for-given-user
	DeleteSSHKeyForUser(user, key int, options ...RequestOptionFunc) (*Response, error)
	// ListGPGKeys gets a list of currently authenticated user’s GPG keys.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/users.html#list-all-gpg-keys
	ListGPGKeys(options ...RequestOptionFunc) ([]*GPGKey, *Response, error)
	// GetGPGKey gets a specific GPG key of currently authenticated user.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/users.html#get-a-specific-gpg-key
	GetGPGKey(key int, options ...RequestOptionFunc) (*GPGKey, *Response, error)
	// AddGPGKey creates a new GPG key owned by the currently authenticated user.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/users.html#add-a-gpg-key
	AddGPGKey(opt *AddGPGKeyOptions, options ...RequestOptionFunc) (*GPGKey, *Response, error)
	// DeleteGPGKey deletes a GPG key owned by currently authenticated user.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/users.html#delete-a-gpg-key
	DeleteGPGKey(key int, options ...RequestOptionFunc) (*Response, error)
	// ListGPGKeysForUser gets a list of a specified user’s GPG keys.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/users.html#list-all-gpg-keys-for-given-user
	ListGPGKeysForUser(user int, options ...RequestOptionFunc) ([]*GPGKey, *Response, error)
	// GetGPGKeyForUser gets a specific GPG key for a given user.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/users.html#get-a-specific-gpg-key-for-a-given-user
	GetGPGKeyForUser(user, key int, options ...RequestOptionFunc) (*GPGKey, *Response, error)
	// AddGPGKeyForUser creates new GPG key owned by the specified user.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/users.html#add-a-gpg-key-for-a-given-user
	AddGPGKeyForUser(user int, opt *AddGPGKeyOptions, options ...RequestOptionFunc) (*GPGKey, *Response, error)
	// DeleteGPGKeyForUser deletes a GPG key owned by a specified user.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/users.html#delete-a-gpg-key-for-a-given-user
	DeleteGPGKeyForUser(user, key int, options ...RequestOptionFunc) (*Response, error)
	// ListEmails gets a list of currently authenticated user's Emails.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/users.html#list-emails
	ListEmails(options ...RequestOptionFunc) ([]*Email, *Response, error)
	// ListEmailsForUser gets a list of a specified user's Emails. Available
	// only for admin
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/users.html#list-emails-for-user
	ListEmailsForUser(user int, opt *ListEmailsForUserOptions, options ...RequestOptionFunc) ([]*Email, *Response, error)
	// GetEmail gets a single email.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/users.html#single-email
	GetEmail(email int, options ...RequestOptionFunc) (*Email, *Response, error)
	// AddEmail creates a new email owned by the currently authenticated user.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/users.html#add-email
	AddEmail(opt *AddEmailOptions, options ...RequestOptionFunc) (*Email, *Response, error)
	// AddEmailForUser creates new email owned by specified user. Available only for
	// admin.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/users.html#add-email-for-user
	AddEmailForUser(user int, opt *AddEmailOptions, options ...RequestOptionFunc) (*Email, *Response, error)
	// DeleteEmail deletes email owned by currently authenticated user. This is an
	// idempotent function and calling it on a key that is already deleted or not
	// available results in 200 OK.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/users.html#delete-email-for-current-user
	DeleteEmail(email int, options ...RequestOptionFunc) (*Response, error)
	// DeleteEmailForUser deletes email owned by a specified user. Available only
	// for admin.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/users.html#delete-email-for-given-user
	DeleteEmailForUser(user, email int, options ...RequestOptionFunc) (*Response, error)
	// BlockUser blocks the specified user. Available only for admin.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/users.html#block-user
	BlockUser(user int, options ...RequestOptionFunc) error
	// UnblockUser unblocks the specified user. Available only for admin.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/users.html#unblock-user
	UnblockUser(user int, options ...RequestOptionFunc) error
	// BanUser bans the specified user. Available only for admin.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/users.html#ban-user
	BanUser(user int, options ...RequestOptionFunc) error
	// UnbanUser unbans the specified user. Available only for admin.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/users.html#unban-user
	UnbanUser(user int, options ...RequestOptionFunc) error
	// DeactivateUser deactivate the specified user. Available only for admin.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/users.html#deactivate-user
	DeactivateUser(user int, options ...RequestOptionFunc) error
	// ActivateUser activate the specified user. Available only for admin.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/users.html#activate-user
	ActivateUser(user int, options ...RequestOptionFunc) error
	// ApproveUser approve the specified user. Available only for admin.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/users.html#approve-user
	ApproveUser(user int, options ...RequestOptionFunc) error
	// RejectUser reject the specified user. Available only for admin.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/users.html#reject-user
	RejectUser(user int, options ...RequestOptionFunc) error
	// GetAllImpersonationTokens retrieves all impersonation tokens of a user.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/users.html#get-all-impersonation-tokens-of-a-user
	GetAllImpersonationTokens(user int, opt *GetAllImpersonationTokensOptions, options ...RequestOptionFunc) ([]*ImpersonationToken, *Response, error)
	// GetImpersonationToken retrieves an impersonation token of a user.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/users.html#get-an-impersonation-token-of-a-user
	GetImpersonationToken(user, token int, options ...RequestOptionFunc) (*ImpersonationToken, *Response, error)
	// CreateImpersonationToken creates an impersonation token.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/users.html#create-an-impersonation-token
	CreateImpersonationToken(user int, opt *CreateImpersonationTokenOptions, options ...RequestOptionFunc) (*ImpersonationToken, *Response, error)
	// RevokeImpersonationToken revokes an impersonation token.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/users.html#revoke-an-impersonation-token
	RevokeImpersonationToken(user, token int, options ...RequestOptionFunc) (*Response, error)
	// CreatePersonalAccessToken creates a personal access token.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/users.html#create-a-personal-access-token
	CreatePersonalAccessToken(user int, opt *CreatePersonalAccessTokenOptions, options ...RequestOptionFunc) (*PersonalAccessToken, *Response, error)
	// CreatePersonalAccessTokenForCurrentUser creates a personal access token with limited scopes for the currently authenticated user.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/users.html#create-a-personal-access-token-with-limited-scopes-for-the-currently-authenticated-user
	CreatePersonalAccessTokenForCurrentUser(opt *CreatePersonalAccessTokenForCurrentUserOptions, options ...RequestOptionFunc) (*PersonalAccessToken, *Response, error)
	// GetUserActivities retrieves user activities (admin only)
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/users.html#get-user-activities
	GetUserActivities(opt *GetUserActivitiesOptions, options ...RequestOptionFunc) ([]*UserActivity, *Response, error)
	// GetUserMemberships retrieves a list of the user's memberships.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/users.html#user-memberships
	GetUserMemberships(user int, opt *GetUserMembershipOptions, options ...RequestOptionFunc) ([]*UserMembership, *Response, error)
	// DisableTwoFactor disables two factor authentication for the specified user.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/users.html#disable-two-factor-authentication
	DisableTwoFactor(user int, options ...RequestOptionFunc) error
	// CreateUserRunner creates a runner linked to the current user.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/users.html#create-a-runner
	CreateUserRunner(opts *CreateUserRunnerOptions, options ...RequestOptionFunc) (*UserRunner, *Response, error)
	// CreateServiceAccountUser creates a new service account user. Note only administrators can create new service account users.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/users.html#create-service-account-user
	CreateServiceAccountUser(options ...RequestOptionFunc) (*User, *Response, error)
	// UploadAvatar uploads an avatar to the current user.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/users.html#upload-a-current-user-avatar
	UploadAvatar(avatar io.Reader, filename string, options ...RequestOptionFunc) (*User, *Response, error)
}
