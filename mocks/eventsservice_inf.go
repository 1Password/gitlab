// Code generated by MockGen. DO NOT EDIT.
// Source: eventsservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=eventsservice_inf.go -destination=mocks/eventsservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockEventsService is a mock of EventsService interface.
type MockEventsService struct {
	ctrl     *gomock.Controller
	recorder *MockEventsServiceMockRecorder
	isgomock struct{}
}

// MockEventsServiceMockRecorder is the mock recorder for MockEventsService.
type MockEventsServiceMockRecorder struct {
	mock *MockEventsService
}

// NewMockEventsService creates a new mock instance.
func NewMockEventsService(ctrl *gomock.Controller) *MockEventsService {
	mock := &MockEventsService{ctrl: ctrl}
	mock.recorder = &MockEventsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventsService) EXPECT() *MockEventsServiceMockRecorder {
	return m.recorder
}

// ListCurrentUserContributionEvents mocks base method.
func (m *MockEventsService) ListCurrentUserContributionEvents(opt *gitlab.ListContributionEventsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ContributionEvent, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCurrentUserContributionEvents", varargs...)
	ret0, _ := ret[0].([]*gitlab.ContributionEvent)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCurrentUserContributionEvents indicates an expected call of ListCurrentUserContributionEvents.
func (mr *MockEventsServiceMockRecorder) ListCurrentUserContributionEvents(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCurrentUserContributionEvents", reflect.TypeOf((*MockEventsService)(nil).ListCurrentUserContributionEvents), varargs...)
}

// ListProjectVisibleEvents mocks base method.
func (m *MockEventsService) ListProjectVisibleEvents(pid any, opt *gitlab.ListProjectVisibleEventsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectEvent, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectVisibleEvents", varargs...)
	ret0, _ := ret[0].([]*gitlab.ProjectEvent)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectVisibleEvents indicates an expected call of ListProjectVisibleEvents.
func (mr *MockEventsServiceMockRecorder) ListProjectVisibleEvents(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectVisibleEvents", reflect.TypeOf((*MockEventsService)(nil).ListProjectVisibleEvents), varargs...)
}
