// Code generated by MockGen. DO NOT EDIT.
// Source: resourcemilestoneeventsservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=resourcemilestoneeventsservice_inf.go -destination=mocks/resourcemilestoneeventsservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockResourceMilestoneEventsService is a mock of ResourceMilestoneEventsService interface.
type MockResourceMilestoneEventsService struct {
	ctrl     *gomock.Controller
	recorder *MockResourceMilestoneEventsServiceMockRecorder
	isgomock struct{}
}

// MockResourceMilestoneEventsServiceMockRecorder is the mock recorder for MockResourceMilestoneEventsService.
type MockResourceMilestoneEventsServiceMockRecorder struct {
	mock *MockResourceMilestoneEventsService
}

// NewMockResourceMilestoneEventsService creates a new mock instance.
func NewMockResourceMilestoneEventsService(ctrl *gomock.Controller) *MockResourceMilestoneEventsService {
	mock := &MockResourceMilestoneEventsService{ctrl: ctrl}
	mock.recorder = &MockResourceMilestoneEventsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceMilestoneEventsService) EXPECT() *MockResourceMilestoneEventsServiceMockRecorder {
	return m.recorder
}

// GetIssueMilestoneEvent mocks base method.
func (m *MockResourceMilestoneEventsService) GetIssueMilestoneEvent(pid any, issue, event int, options ...gitlab.RequestOptionFunc) (*gitlab.MilestoneEvent, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, issue, event}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIssueMilestoneEvent", varargs...)
	ret0, _ := ret[0].(*gitlab.MilestoneEvent)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIssueMilestoneEvent indicates an expected call of GetIssueMilestoneEvent.
func (mr *MockResourceMilestoneEventsServiceMockRecorder) GetIssueMilestoneEvent(pid, issue, event any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, issue, event}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueMilestoneEvent", reflect.TypeOf((*MockResourceMilestoneEventsService)(nil).GetIssueMilestoneEvent), varargs...)
}

// GetMergeRequestMilestoneEvent mocks base method.
func (m *MockResourceMilestoneEventsService) GetMergeRequestMilestoneEvent(pid any, request, event int, options ...gitlab.RequestOptionFunc) (*gitlab.MilestoneEvent, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, request, event}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMergeRequestMilestoneEvent", varargs...)
	ret0, _ := ret[0].(*gitlab.MilestoneEvent)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMergeRequestMilestoneEvent indicates an expected call of GetMergeRequestMilestoneEvent.
func (mr *MockResourceMilestoneEventsServiceMockRecorder) GetMergeRequestMilestoneEvent(pid, request, event any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, request, event}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergeRequestMilestoneEvent", reflect.TypeOf((*MockResourceMilestoneEventsService)(nil).GetMergeRequestMilestoneEvent), varargs...)
}

// ListIssueMilestoneEvents mocks base method.
func (m *MockResourceMilestoneEventsService) ListIssueMilestoneEvents(pid any, issue int, opt *gitlab.ListMilestoneEventsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.MilestoneEvent, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, issue, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIssueMilestoneEvents", varargs...)
	ret0, _ := ret[0].([]*gitlab.MilestoneEvent)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListIssueMilestoneEvents indicates an expected call of ListIssueMilestoneEvents.
func (mr *MockResourceMilestoneEventsServiceMockRecorder) ListIssueMilestoneEvents(pid, issue, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, issue, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssueMilestoneEvents", reflect.TypeOf((*MockResourceMilestoneEventsService)(nil).ListIssueMilestoneEvents), varargs...)
}

// ListMergeMilestoneEvents mocks base method.
func (m *MockResourceMilestoneEventsService) ListMergeMilestoneEvents(pid any, request int, opt *gitlab.ListMilestoneEventsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.MilestoneEvent, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, request, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMergeMilestoneEvents", varargs...)
	ret0, _ := ret[0].([]*gitlab.MilestoneEvent)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMergeMilestoneEvents indicates an expected call of ListMergeMilestoneEvents.
func (mr *MockResourceMilestoneEventsServiceMockRecorder) ListMergeMilestoneEvents(pid, request, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, request, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMergeMilestoneEvents", reflect.TypeOf((*MockResourceMilestoneEventsService)(nil).ListMergeMilestoneEvents), varargs...)
}
