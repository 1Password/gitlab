// Code generated by MockGen. DO NOT EDIT.
// Source: groupscimservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=groupscimservice_inf.go -destination=mocks/groupscimservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupSCIMService is a mock of GroupSCIMService interface.
type MockGroupSCIMService struct {
	ctrl     *gomock.Controller
	recorder *MockGroupSCIMServiceMockRecorder
	isgomock struct{}
}

// MockGroupSCIMServiceMockRecorder is the mock recorder for MockGroupSCIMService.
type MockGroupSCIMServiceMockRecorder struct {
	mock *MockGroupSCIMService
}

// NewMockGroupSCIMService creates a new mock instance.
func NewMockGroupSCIMService(ctrl *gomock.Controller) *MockGroupSCIMService {
	mock := &MockGroupSCIMService{ctrl: ctrl}
	mock.recorder = &MockGroupSCIMServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupSCIMService) EXPECT() *MockGroupSCIMServiceMockRecorder {
	return m.recorder
}

// DeleteSCIMIdentity mocks base method.
func (m *MockGroupSCIMService) DeleteSCIMIdentity(gid any, uid string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, uid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSCIMIdentity", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSCIMIdentity indicates an expected call of DeleteSCIMIdentity.
func (mr *MockGroupSCIMServiceMockRecorder) DeleteSCIMIdentity(gid, uid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, uid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSCIMIdentity", reflect.TypeOf((*MockGroupSCIMService)(nil).DeleteSCIMIdentity), varargs...)
}

// GetSCIMIdentitiesForGroup mocks base method.
func (m *MockGroupSCIMService) GetSCIMIdentitiesForGroup(gid any, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupSCIMIdentity, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSCIMIdentitiesForGroup", varargs...)
	ret0, _ := ret[0].([]*gitlab.GroupSCIMIdentity)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSCIMIdentitiesForGroup indicates an expected call of GetSCIMIdentitiesForGroup.
func (mr *MockGroupSCIMServiceMockRecorder) GetSCIMIdentitiesForGroup(gid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSCIMIdentitiesForGroup", reflect.TypeOf((*MockGroupSCIMService)(nil).GetSCIMIdentitiesForGroup), varargs...)
}

// GetSCIMIdentity mocks base method.
func (m *MockGroupSCIMService) GetSCIMIdentity(gid any, uid string, options ...gitlab.RequestOptionFunc) (*gitlab.GroupSCIMIdentity, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, uid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSCIMIdentity", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupSCIMIdentity)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSCIMIdentity indicates an expected call of GetSCIMIdentity.
func (mr *MockGroupSCIMServiceMockRecorder) GetSCIMIdentity(gid, uid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, uid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSCIMIdentity", reflect.TypeOf((*MockGroupSCIMService)(nil).GetSCIMIdentity), varargs...)
}

// UpdateSCIMIdentity mocks base method.
func (m *MockGroupSCIMService) UpdateSCIMIdentity(gid any, uid string, opt *gitlab.UpdateSCIMIdentityOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, uid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSCIMIdentity", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSCIMIdentity indicates an expected call of UpdateSCIMIdentity.
func (mr *MockGroupSCIMServiceMockRecorder) UpdateSCIMIdentity(gid, uid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, uid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSCIMIdentity", reflect.TypeOf((*MockGroupSCIMService)(nil).UpdateSCIMIdentity), varargs...)
}
