// Code generated by MockGen. DO NOT EDIT.
// Source: licensetemplatesservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=licensetemplatesservice_inf.go -destination=mocks/licensetemplatesservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockLicenseTemplatesService is a mock of LicenseTemplatesService interface.
type MockLicenseTemplatesService struct {
	ctrl     *gomock.Controller
	recorder *MockLicenseTemplatesServiceMockRecorder
}

// MockLicenseTemplatesServiceMockRecorder is the mock recorder for MockLicenseTemplatesService.
type MockLicenseTemplatesServiceMockRecorder struct {
	mock *MockLicenseTemplatesService
}

// NewMockLicenseTemplatesService creates a new mock instance.
func NewMockLicenseTemplatesService(ctrl *gomock.Controller) *MockLicenseTemplatesService {
	mock := &MockLicenseTemplatesService{ctrl: ctrl}
	mock.recorder = &MockLicenseTemplatesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLicenseTemplatesService) EXPECT() *MockLicenseTemplatesServiceMockRecorder {
	return m.recorder
}

// GetLicenseTemplate mocks base method.
func (m *MockLicenseTemplatesService) GetLicenseTemplate(template string, opt *gitlab.GetLicenseTemplateOptions, options ...gitlab.RequestOptionFunc) (*gitlab.LicenseTemplate, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{template, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLicenseTemplate", varargs...)
	ret0, _ := ret[0].(*gitlab.LicenseTemplate)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLicenseTemplate indicates an expected call of GetLicenseTemplate.
func (mr *MockLicenseTemplatesServiceMockRecorder) GetLicenseTemplate(template, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{template, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLicenseTemplate", reflect.TypeOf((*MockLicenseTemplatesService)(nil).GetLicenseTemplate), varargs...)
}

// ListLicenseTemplates mocks base method.
func (m *MockLicenseTemplatesService) ListLicenseTemplates(opt *gitlab.ListLicenseTemplatesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.LicenseTemplate, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLicenseTemplates", varargs...)
	ret0, _ := ret[0].([]*gitlab.LicenseTemplate)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListLicenseTemplates indicates an expected call of ListLicenseTemplates.
func (mr *MockLicenseTemplatesServiceMockRecorder) ListLicenseTemplates(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLicenseTemplates", reflect.TypeOf((*MockLicenseTemplatesService)(nil).ListLicenseTemplates), varargs...)
}
