// Code generated by MockGen. DO NOT EDIT.
// Source: externalstatuschecksservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=externalstatuschecksservice_inf.go -destination=mocks/externalstatuschecksservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockExternalStatusChecksService is a mock of ExternalStatusChecksService interface.
type MockExternalStatusChecksService struct {
	ctrl     *gomock.Controller
	recorder *MockExternalStatusChecksServiceMockRecorder
	isgomock struct{}
}

// MockExternalStatusChecksServiceMockRecorder is the mock recorder for MockExternalStatusChecksService.
type MockExternalStatusChecksServiceMockRecorder struct {
	mock *MockExternalStatusChecksService
}

// NewMockExternalStatusChecksService creates a new mock instance.
func NewMockExternalStatusChecksService(ctrl *gomock.Controller) *MockExternalStatusChecksService {
	mock := &MockExternalStatusChecksService{ctrl: ctrl}
	mock.recorder = &MockExternalStatusChecksServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalStatusChecksService) EXPECT() *MockExternalStatusChecksServiceMockRecorder {
	return m.recorder
}

// CreateExternalStatusCheck mocks base method.
func (m *MockExternalStatusChecksService) CreateExternalStatusCheck(pid any, opt *gitlab.CreateExternalStatusCheckOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateExternalStatusCheck", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExternalStatusCheck indicates an expected call of CreateExternalStatusCheck.
func (mr *MockExternalStatusChecksServiceMockRecorder) CreateExternalStatusCheck(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExternalStatusCheck", reflect.TypeOf((*MockExternalStatusChecksService)(nil).CreateExternalStatusCheck), varargs...)
}

// DeleteExternalStatusCheck mocks base method.
func (m *MockExternalStatusChecksService) DeleteExternalStatusCheck(pid any, check int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, check}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteExternalStatusCheck", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExternalStatusCheck indicates an expected call of DeleteExternalStatusCheck.
func (mr *MockExternalStatusChecksServiceMockRecorder) DeleteExternalStatusCheck(pid, check any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, check}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExternalStatusCheck", reflect.TypeOf((*MockExternalStatusChecksService)(nil).DeleteExternalStatusCheck), varargs...)
}

// ListMergeStatusChecks mocks base method.
func (m *MockExternalStatusChecksService) ListMergeStatusChecks(pid any, mr int, opt *gitlab.ListOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.MergeStatusCheck, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mr, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMergeStatusChecks", varargs...)
	ret0, _ := ret[0].([]*gitlab.MergeStatusCheck)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMergeStatusChecks indicates an expected call of ListMergeStatusChecks.
func (mr_2 *MockExternalStatusChecksServiceMockRecorder) ListMergeStatusChecks(pid, mr, opt any, options ...any) *gomock.Call {
	mr_2.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mr, opt}, options...)
	return mr_2.mock.ctrl.RecordCallWithMethodType(mr_2.mock, "ListMergeStatusChecks", reflect.TypeOf((*MockExternalStatusChecksService)(nil).ListMergeStatusChecks), varargs...)
}

// ListProjectStatusChecks mocks base method.
func (m *MockExternalStatusChecksService) ListProjectStatusChecks(pid any, opt *gitlab.ListOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectStatusCheck, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectStatusChecks", varargs...)
	ret0, _ := ret[0].([]*gitlab.ProjectStatusCheck)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectStatusChecks indicates an expected call of ListProjectStatusChecks.
func (mr *MockExternalStatusChecksServiceMockRecorder) ListProjectStatusChecks(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectStatusChecks", reflect.TypeOf((*MockExternalStatusChecksService)(nil).ListProjectStatusChecks), varargs...)
}

// RetryFailedStatusCheckForAMergeRequest mocks base method.
func (m *MockExternalStatusChecksService) RetryFailedStatusCheckForAMergeRequest(pid any, mergeRequest, externalStatusCheck int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequest, externalStatusCheck}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetryFailedStatusCheckForAMergeRequest", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetryFailedStatusCheckForAMergeRequest indicates an expected call of RetryFailedStatusCheckForAMergeRequest.
func (mr *MockExternalStatusChecksServiceMockRecorder) RetryFailedStatusCheckForAMergeRequest(pid, mergeRequest, externalStatusCheck any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequest, externalStatusCheck}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryFailedStatusCheckForAMergeRequest", reflect.TypeOf((*MockExternalStatusChecksService)(nil).RetryFailedStatusCheckForAMergeRequest), varargs...)
}

// SetExternalStatusCheckStatus mocks base method.
func (m *MockExternalStatusChecksService) SetExternalStatusCheckStatus(pid any, mergeRequest int, opt *gitlab.SetExternalStatusCheckStatusOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequest, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetExternalStatusCheckStatus", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetExternalStatusCheckStatus indicates an expected call of SetExternalStatusCheckStatus.
func (mr *MockExternalStatusChecksServiceMockRecorder) SetExternalStatusCheckStatus(pid, mergeRequest, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequest, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExternalStatusCheckStatus", reflect.TypeOf((*MockExternalStatusChecksService)(nil).SetExternalStatusCheckStatus), varargs...)
}

// UpdateExternalStatusCheck mocks base method.
func (m *MockExternalStatusChecksService) UpdateExternalStatusCheck(pid any, check int, opt *gitlab.UpdateExternalStatusCheckOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, check, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExternalStatusCheck", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExternalStatusCheck indicates an expected call of UpdateExternalStatusCheck.
func (mr *MockExternalStatusChecksServiceMockRecorder) UpdateExternalStatusCheck(pid, check, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, check, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExternalStatusCheck", reflect.TypeOf((*MockExternalStatusChecksService)(nil).UpdateExternalStatusCheck), varargs...)
}
