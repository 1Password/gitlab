// Code generated by MockGen. DO NOT EDIT.
// Source: epicsservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=epicsservice_inf.go -destination=mocks/epicsservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockEpicsService is a mock of EpicsService interface.
type MockEpicsService struct {
	ctrl     *gomock.Controller
	recorder *MockEpicsServiceMockRecorder
}

// MockEpicsServiceMockRecorder is the mock recorder for MockEpicsService.
type MockEpicsServiceMockRecorder struct {
	mock *MockEpicsService
}

// NewMockEpicsService creates a new mock instance.
func NewMockEpicsService(ctrl *gomock.Controller) *MockEpicsService {
	mock := &MockEpicsService{ctrl: ctrl}
	mock.recorder = &MockEpicsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEpicsService) EXPECT() *MockEpicsServiceMockRecorder {
	return m.recorder
}

// CreateEpic mocks base method.
func (m *MockEpicsService) CreateEpic(gid any, opt *gitlab.CreateEpicOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Epic, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEpic", varargs...)
	ret0, _ := ret[0].(*gitlab.Epic)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateEpic indicates an expected call of CreateEpic.
func (mr *MockEpicsServiceMockRecorder) CreateEpic(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEpic", reflect.TypeOf((*MockEpicsService)(nil).CreateEpic), varargs...)
}

// DeleteEpic mocks base method.
func (m *MockEpicsService) DeleteEpic(gid any, epic int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, epic}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEpic", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEpic indicates an expected call of DeleteEpic.
func (mr *MockEpicsServiceMockRecorder) DeleteEpic(gid, epic any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, epic}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEpic", reflect.TypeOf((*MockEpicsService)(nil).DeleteEpic), varargs...)
}

// GetEpic mocks base method.
func (m *MockEpicsService) GetEpic(gid any, epic int, options ...gitlab.RequestOptionFunc) (*gitlab.Epic, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, epic}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEpic", varargs...)
	ret0, _ := ret[0].(*gitlab.Epic)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEpic indicates an expected call of GetEpic.
func (mr *MockEpicsServiceMockRecorder) GetEpic(gid, epic any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, epic}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpic", reflect.TypeOf((*MockEpicsService)(nil).GetEpic), varargs...)
}

// GetEpicLinks mocks base method.
func (m *MockEpicsService) GetEpicLinks(gid any, epic int, options ...gitlab.RequestOptionFunc) ([]*gitlab.Epic, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, epic}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEpicLinks", varargs...)
	ret0, _ := ret[0].([]*gitlab.Epic)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEpicLinks indicates an expected call of GetEpicLinks.
func (mr *MockEpicsServiceMockRecorder) GetEpicLinks(gid, epic any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, epic}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpicLinks", reflect.TypeOf((*MockEpicsService)(nil).GetEpicLinks), varargs...)
}

// ListGroupEpics mocks base method.
func (m *MockEpicsService) ListGroupEpics(gid any, opt *gitlab.ListGroupEpicsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Epic, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupEpics", varargs...)
	ret0, _ := ret[0].([]*gitlab.Epic)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupEpics indicates an expected call of ListGroupEpics.
func (mr *MockEpicsServiceMockRecorder) ListGroupEpics(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupEpics", reflect.TypeOf((*MockEpicsService)(nil).ListGroupEpics), varargs...)
}

// UpdateEpic mocks base method.
func (m *MockEpicsService) UpdateEpic(gid any, epic int, opt *gitlab.UpdateEpicOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Epic, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, epic, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEpic", varargs...)
	ret0, _ := ret[0].(*gitlab.Epic)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateEpic indicates an expected call of UpdateEpic.
func (mr *MockEpicsServiceMockRecorder) UpdateEpic(gid, epic, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, epic, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEpic", reflect.TypeOf((*MockEpicsService)(nil).UpdateEpic), varargs...)
}
