// Code generated by MockGen. DO NOT EDIT.
// Source: deploytokensservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=deploytokensservice_inf.go -destination=mocks/deploytokensservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockDeployTokensService is a mock of DeployTokensService interface.
type MockDeployTokensService struct {
	ctrl     *gomock.Controller
	recorder *MockDeployTokensServiceMockRecorder
	isgomock struct{}
}

// MockDeployTokensServiceMockRecorder is the mock recorder for MockDeployTokensService.
type MockDeployTokensServiceMockRecorder struct {
	mock *MockDeployTokensService
}

// NewMockDeployTokensService creates a new mock instance.
func NewMockDeployTokensService(ctrl *gomock.Controller) *MockDeployTokensService {
	mock := &MockDeployTokensService{ctrl: ctrl}
	mock.recorder = &MockDeployTokensServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeployTokensService) EXPECT() *MockDeployTokensServiceMockRecorder {
	return m.recorder
}

// CreateGroupDeployToken mocks base method.
func (m *MockDeployTokensService) CreateGroupDeployToken(gid any, opt *gitlab.CreateGroupDeployTokenOptions, options ...gitlab.RequestOptionFunc) (*gitlab.DeployToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGroupDeployToken", varargs...)
	ret0, _ := ret[0].(*gitlab.DeployToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateGroupDeployToken indicates an expected call of CreateGroupDeployToken.
func (mr *MockDeployTokensServiceMockRecorder) CreateGroupDeployToken(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupDeployToken", reflect.TypeOf((*MockDeployTokensService)(nil).CreateGroupDeployToken), varargs...)
}

// CreateProjectDeployToken mocks base method.
func (m *MockDeployTokensService) CreateProjectDeployToken(pid any, opt *gitlab.CreateProjectDeployTokenOptions, options ...gitlab.RequestOptionFunc) (*gitlab.DeployToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProjectDeployToken", varargs...)
	ret0, _ := ret[0].(*gitlab.DeployToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateProjectDeployToken indicates an expected call of CreateProjectDeployToken.
func (mr *MockDeployTokensServiceMockRecorder) CreateProjectDeployToken(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectDeployToken", reflect.TypeOf((*MockDeployTokensService)(nil).CreateProjectDeployToken), varargs...)
}

// DeleteGroupDeployToken mocks base method.
func (m *MockDeployTokensService) DeleteGroupDeployToken(gid any, deployToken int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, deployToken}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroupDeployToken", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupDeployToken indicates an expected call of DeleteGroupDeployToken.
func (mr *MockDeployTokensServiceMockRecorder) DeleteGroupDeployToken(gid, deployToken any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, deployToken}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupDeployToken", reflect.TypeOf((*MockDeployTokensService)(nil).DeleteGroupDeployToken), varargs...)
}

// DeleteProjectDeployToken mocks base method.
func (m *MockDeployTokensService) DeleteProjectDeployToken(pid any, deployToken int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, deployToken}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProjectDeployToken", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectDeployToken indicates an expected call of DeleteProjectDeployToken.
func (mr *MockDeployTokensServiceMockRecorder) DeleteProjectDeployToken(pid, deployToken any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, deployToken}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectDeployToken", reflect.TypeOf((*MockDeployTokensService)(nil).DeleteProjectDeployToken), varargs...)
}

// GetGroupDeployToken mocks base method.
func (m *MockDeployTokensService) GetGroupDeployToken(gid any, deployToken int, options ...gitlab.RequestOptionFunc) (*gitlab.DeployToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, deployToken}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupDeployToken", varargs...)
	ret0, _ := ret[0].(*gitlab.DeployToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroupDeployToken indicates an expected call of GetGroupDeployToken.
func (mr *MockDeployTokensServiceMockRecorder) GetGroupDeployToken(gid, deployToken any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, deployToken}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupDeployToken", reflect.TypeOf((*MockDeployTokensService)(nil).GetGroupDeployToken), varargs...)
}

// GetProjectDeployToken mocks base method.
func (m *MockDeployTokensService) GetProjectDeployToken(pid any, deployToken int, options ...gitlab.RequestOptionFunc) (*gitlab.DeployToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, deployToken}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectDeployToken", varargs...)
	ret0, _ := ret[0].(*gitlab.DeployToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProjectDeployToken indicates an expected call of GetProjectDeployToken.
func (mr *MockDeployTokensServiceMockRecorder) GetProjectDeployToken(pid, deployToken any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, deployToken}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectDeployToken", reflect.TypeOf((*MockDeployTokensService)(nil).GetProjectDeployToken), varargs...)
}

// ListAllDeployTokens mocks base method.
func (m *MockDeployTokensService) ListAllDeployTokens(options ...gitlab.RequestOptionFunc) ([]*gitlab.DeployToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAllDeployTokens", varargs...)
	ret0, _ := ret[0].([]*gitlab.DeployToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAllDeployTokens indicates an expected call of ListAllDeployTokens.
func (mr *MockDeployTokensServiceMockRecorder) ListAllDeployTokens(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllDeployTokens", reflect.TypeOf((*MockDeployTokensService)(nil).ListAllDeployTokens), options...)
}

// ListGroupDeployTokens mocks base method.
func (m *MockDeployTokensService) ListGroupDeployTokens(gid any, opt *gitlab.ListGroupDeployTokensOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.DeployToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupDeployTokens", varargs...)
	ret0, _ := ret[0].([]*gitlab.DeployToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupDeployTokens indicates an expected call of ListGroupDeployTokens.
func (mr *MockDeployTokensServiceMockRecorder) ListGroupDeployTokens(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupDeployTokens", reflect.TypeOf((*MockDeployTokensService)(nil).ListGroupDeployTokens), varargs...)
}

// ListProjectDeployTokens mocks base method.
func (m *MockDeployTokensService) ListProjectDeployTokens(pid any, opt *gitlab.ListProjectDeployTokensOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.DeployToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectDeployTokens", varargs...)
	ret0, _ := ret[0].([]*gitlab.DeployToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectDeployTokens indicates an expected call of ListProjectDeployTokens.
func (mr *MockDeployTokensServiceMockRecorder) ListProjectDeployTokens(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectDeployTokens", reflect.TypeOf((*MockDeployTokensService)(nil).ListProjectDeployTokens), varargs...)
}
