// Code generated by MockGen. DO NOT EDIT.
// Source: protectedtagsservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=protectedtagsservice_inf.go -destination=mocks/protectedtagsservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockProtectedTagsService is a mock of ProtectedTagsService interface.
type MockProtectedTagsService struct {
	ctrl     *gomock.Controller
	recorder *MockProtectedTagsServiceMockRecorder
	isgomock struct{}
}

// MockProtectedTagsServiceMockRecorder is the mock recorder for MockProtectedTagsService.
type MockProtectedTagsServiceMockRecorder struct {
	mock *MockProtectedTagsService
}

// NewMockProtectedTagsService creates a new mock instance.
func NewMockProtectedTagsService(ctrl *gomock.Controller) *MockProtectedTagsService {
	mock := &MockProtectedTagsService{ctrl: ctrl}
	mock.recorder = &MockProtectedTagsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProtectedTagsService) EXPECT() *MockProtectedTagsServiceMockRecorder {
	return m.recorder
}

// GetProtectedTag mocks base method.
func (m *MockProtectedTagsService) GetProtectedTag(pid any, tag string, options ...gitlab.RequestOptionFunc) (*gitlab.ProtectedTag, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, tag}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProtectedTag", varargs...)
	ret0, _ := ret[0].(*gitlab.ProtectedTag)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProtectedTag indicates an expected call of GetProtectedTag.
func (mr *MockProtectedTagsServiceMockRecorder) GetProtectedTag(pid, tag any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, tag}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProtectedTag", reflect.TypeOf((*MockProtectedTagsService)(nil).GetProtectedTag), varargs...)
}

// ListProtectedTags mocks base method.
func (m *MockProtectedTagsService) ListProtectedTags(pid any, opt *gitlab.ListProtectedTagsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProtectedTag, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProtectedTags", varargs...)
	ret0, _ := ret[0].([]*gitlab.ProtectedTag)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProtectedTags indicates an expected call of ListProtectedTags.
func (mr *MockProtectedTagsServiceMockRecorder) ListProtectedTags(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProtectedTags", reflect.TypeOf((*MockProtectedTagsService)(nil).ListProtectedTags), varargs...)
}

// ProtectRepositoryTags mocks base method.
func (m *MockProtectedTagsService) ProtectRepositoryTags(pid any, opt *gitlab.ProtectRepositoryTagsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProtectedTag, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProtectRepositoryTags", varargs...)
	ret0, _ := ret[0].(*gitlab.ProtectedTag)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProtectRepositoryTags indicates an expected call of ProtectRepositoryTags.
func (mr *MockProtectedTagsServiceMockRecorder) ProtectRepositoryTags(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtectRepositoryTags", reflect.TypeOf((*MockProtectedTagsService)(nil).ProtectRepositoryTags), varargs...)
}

// UnprotectRepositoryTags mocks base method.
func (m *MockProtectedTagsService) UnprotectRepositoryTags(pid any, tag string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, tag}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnprotectRepositoryTags", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnprotectRepositoryTags indicates an expected call of UnprotectRepositoryTags.
func (mr *MockProtectedTagsServiceMockRecorder) UnprotectRepositoryTags(pid, tag any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, tag}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnprotectRepositoryTags", reflect.TypeOf((*MockProtectedTagsService)(nil).UnprotectRepositoryTags), varargs...)
}
