// Code generated by MockGen. DO NOT EDIT.
// Source: customattributesservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=customattributesservice_inf.go -destination=mocks/customattributesservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockCustomAttributesService is a mock of CustomAttributesService interface.
type MockCustomAttributesService struct {
	ctrl     *gomock.Controller
	recorder *MockCustomAttributesServiceMockRecorder
	isgomock struct{}
}

// MockCustomAttributesServiceMockRecorder is the mock recorder for MockCustomAttributesService.
type MockCustomAttributesServiceMockRecorder struct {
	mock *MockCustomAttributesService
}

// NewMockCustomAttributesService creates a new mock instance.
func NewMockCustomAttributesService(ctrl *gomock.Controller) *MockCustomAttributesService {
	mock := &MockCustomAttributesService{ctrl: ctrl}
	mock.recorder = &MockCustomAttributesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomAttributesService) EXPECT() *MockCustomAttributesServiceMockRecorder {
	return m.recorder
}

// DeleteCustomGroupAttribute mocks base method.
func (m *MockCustomAttributesService) DeleteCustomGroupAttribute(group int, key string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{group, key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCustomGroupAttribute", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomGroupAttribute indicates an expected call of DeleteCustomGroupAttribute.
func (mr *MockCustomAttributesServiceMockRecorder) DeleteCustomGroupAttribute(group, key any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{group, key}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomGroupAttribute", reflect.TypeOf((*MockCustomAttributesService)(nil).DeleteCustomGroupAttribute), varargs...)
}

// DeleteCustomProjectAttribute mocks base method.
func (m *MockCustomAttributesService) DeleteCustomProjectAttribute(project int, key string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{project, key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCustomProjectAttribute", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomProjectAttribute indicates an expected call of DeleteCustomProjectAttribute.
func (mr *MockCustomAttributesServiceMockRecorder) DeleteCustomProjectAttribute(project, key any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{project, key}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomProjectAttribute", reflect.TypeOf((*MockCustomAttributesService)(nil).DeleteCustomProjectAttribute), varargs...)
}

// DeleteCustomUserAttribute mocks base method.
func (m *MockCustomAttributesService) DeleteCustomUserAttribute(user int, key string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{user, key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCustomUserAttribute", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomUserAttribute indicates an expected call of DeleteCustomUserAttribute.
func (mr *MockCustomAttributesServiceMockRecorder) DeleteCustomUserAttribute(user, key any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user, key}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomUserAttribute", reflect.TypeOf((*MockCustomAttributesService)(nil).DeleteCustomUserAttribute), varargs...)
}

// GetCustomGroupAttribute mocks base method.
func (m *MockCustomAttributesService) GetCustomGroupAttribute(group int, key string, options ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{group, key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCustomGroupAttribute", varargs...)
	ret0, _ := ret[0].(*gitlab.CustomAttribute)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCustomGroupAttribute indicates an expected call of GetCustomGroupAttribute.
func (mr *MockCustomAttributesServiceMockRecorder) GetCustomGroupAttribute(group, key any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{group, key}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomGroupAttribute", reflect.TypeOf((*MockCustomAttributesService)(nil).GetCustomGroupAttribute), varargs...)
}

// GetCustomProjectAttribute mocks base method.
func (m *MockCustomAttributesService) GetCustomProjectAttribute(project int, key string, options ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{project, key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCustomProjectAttribute", varargs...)
	ret0, _ := ret[0].(*gitlab.CustomAttribute)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCustomProjectAttribute indicates an expected call of GetCustomProjectAttribute.
func (mr *MockCustomAttributesServiceMockRecorder) GetCustomProjectAttribute(project, key any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{project, key}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomProjectAttribute", reflect.TypeOf((*MockCustomAttributesService)(nil).GetCustomProjectAttribute), varargs...)
}

// GetCustomUserAttribute mocks base method.
func (m *MockCustomAttributesService) GetCustomUserAttribute(user int, key string, options ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{user, key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCustomUserAttribute", varargs...)
	ret0, _ := ret[0].(*gitlab.CustomAttribute)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCustomUserAttribute indicates an expected call of GetCustomUserAttribute.
func (mr *MockCustomAttributesServiceMockRecorder) GetCustomUserAttribute(user, key any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user, key}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomUserAttribute", reflect.TypeOf((*MockCustomAttributesService)(nil).GetCustomUserAttribute), varargs...)
}

// ListCustomGroupAttributes mocks base method.
func (m *MockCustomAttributesService) ListCustomGroupAttributes(group int, options ...gitlab.RequestOptionFunc) ([]*gitlab.CustomAttribute, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{group}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomGroupAttributes", varargs...)
	ret0, _ := ret[0].([]*gitlab.CustomAttribute)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCustomGroupAttributes indicates an expected call of ListCustomGroupAttributes.
func (mr *MockCustomAttributesServiceMockRecorder) ListCustomGroupAttributes(group any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{group}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomGroupAttributes", reflect.TypeOf((*MockCustomAttributesService)(nil).ListCustomGroupAttributes), varargs...)
}

// ListCustomProjectAttributes mocks base method.
func (m *MockCustomAttributesService) ListCustomProjectAttributes(project int, options ...gitlab.RequestOptionFunc) ([]*gitlab.CustomAttribute, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{project}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomProjectAttributes", varargs...)
	ret0, _ := ret[0].([]*gitlab.CustomAttribute)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCustomProjectAttributes indicates an expected call of ListCustomProjectAttributes.
func (mr *MockCustomAttributesServiceMockRecorder) ListCustomProjectAttributes(project any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{project}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomProjectAttributes", reflect.TypeOf((*MockCustomAttributesService)(nil).ListCustomProjectAttributes), varargs...)
}

// ListCustomUserAttributes mocks base method.
func (m *MockCustomAttributesService) ListCustomUserAttributes(user int, options ...gitlab.RequestOptionFunc) ([]*gitlab.CustomAttribute, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{user}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomUserAttributes", varargs...)
	ret0, _ := ret[0].([]*gitlab.CustomAttribute)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCustomUserAttributes indicates an expected call of ListCustomUserAttributes.
func (mr *MockCustomAttributesServiceMockRecorder) ListCustomUserAttributes(user any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomUserAttributes", reflect.TypeOf((*MockCustomAttributesService)(nil).ListCustomUserAttributes), varargs...)
}

// SetCustomGroupAttribute mocks base method.
func (m *MockCustomAttributesService) SetCustomGroupAttribute(group int, c gitlab.CustomAttribute, options ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{group, c}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetCustomGroupAttribute", varargs...)
	ret0, _ := ret[0].(*gitlab.CustomAttribute)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetCustomGroupAttribute indicates an expected call of SetCustomGroupAttribute.
func (mr *MockCustomAttributesServiceMockRecorder) SetCustomGroupAttribute(group, c any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{group, c}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCustomGroupAttribute", reflect.TypeOf((*MockCustomAttributesService)(nil).SetCustomGroupAttribute), varargs...)
}

// SetCustomProjectAttribute mocks base method.
func (m *MockCustomAttributesService) SetCustomProjectAttribute(project int, c gitlab.CustomAttribute, options ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{project, c}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetCustomProjectAttribute", varargs...)
	ret0, _ := ret[0].(*gitlab.CustomAttribute)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetCustomProjectAttribute indicates an expected call of SetCustomProjectAttribute.
func (mr *MockCustomAttributesServiceMockRecorder) SetCustomProjectAttribute(project, c any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{project, c}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCustomProjectAttribute", reflect.TypeOf((*MockCustomAttributesService)(nil).SetCustomProjectAttribute), varargs...)
}

// SetCustomUserAttribute mocks base method.
func (m *MockCustomAttributesService) SetCustomUserAttribute(user int, c gitlab.CustomAttribute, options ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{user, c}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetCustomUserAttribute", varargs...)
	ret0, _ := ret[0].(*gitlab.CustomAttribute)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetCustomUserAttribute indicates an expected call of SetCustomUserAttribute.
func (mr *MockCustomAttributesServiceMockRecorder) SetCustomUserAttribute(user, c any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user, c}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCustomUserAttribute", reflect.TypeOf((*MockCustomAttributesService)(nil).SetCustomUserAttribute), varargs...)
}
