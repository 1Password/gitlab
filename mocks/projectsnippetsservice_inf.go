// Code generated by MockGen. DO NOT EDIT.
// Source: projectsnippetsservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=projectsnippetsservice_inf.go -destination=mocks/projectsnippetsservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectSnippetsService is a mock of ProjectSnippetsService interface.
type MockProjectSnippetsService struct {
	ctrl     *gomock.Controller
	recorder *MockProjectSnippetsServiceMockRecorder
	isgomock struct{}
}

// MockProjectSnippetsServiceMockRecorder is the mock recorder for MockProjectSnippetsService.
type MockProjectSnippetsServiceMockRecorder struct {
	mock *MockProjectSnippetsService
}

// NewMockProjectSnippetsService creates a new mock instance.
func NewMockProjectSnippetsService(ctrl *gomock.Controller) *MockProjectSnippetsService {
	mock := &MockProjectSnippetsService{ctrl: ctrl}
	mock.recorder = &MockProjectSnippetsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectSnippetsService) EXPECT() *MockProjectSnippetsServiceMockRecorder {
	return m.recorder
}

// CreateSnippet mocks base method.
func (m *MockProjectSnippetsService) CreateSnippet(pid any, opt *gitlab.CreateProjectSnippetOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Snippet, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSnippet", varargs...)
	ret0, _ := ret[0].(*gitlab.Snippet)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSnippet indicates an expected call of CreateSnippet.
func (mr *MockProjectSnippetsServiceMockRecorder) CreateSnippet(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnippet", reflect.TypeOf((*MockProjectSnippetsService)(nil).CreateSnippet), varargs...)
}

// DeleteSnippet mocks base method.
func (m *MockProjectSnippetsService) DeleteSnippet(pid any, snippet int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, snippet}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSnippet", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSnippet indicates an expected call of DeleteSnippet.
func (mr *MockProjectSnippetsServiceMockRecorder) DeleteSnippet(pid, snippet any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, snippet}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnippet", reflect.TypeOf((*MockProjectSnippetsService)(nil).DeleteSnippet), varargs...)
}

// GetSnippet mocks base method.
func (m *MockProjectSnippetsService) GetSnippet(pid any, snippet int, options ...gitlab.RequestOptionFunc) (*gitlab.Snippet, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, snippet}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSnippet", varargs...)
	ret0, _ := ret[0].(*gitlab.Snippet)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSnippet indicates an expected call of GetSnippet.
func (mr *MockProjectSnippetsServiceMockRecorder) GetSnippet(pid, snippet any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, snippet}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnippet", reflect.TypeOf((*MockProjectSnippetsService)(nil).GetSnippet), varargs...)
}

// ListSnippets mocks base method.
func (m *MockProjectSnippetsService) ListSnippets(pid any, opt *gitlab.ListProjectSnippetsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Snippet, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSnippets", varargs...)
	ret0, _ := ret[0].([]*gitlab.Snippet)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSnippets indicates an expected call of ListSnippets.
func (mr *MockProjectSnippetsServiceMockRecorder) ListSnippets(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnippets", reflect.TypeOf((*MockProjectSnippetsService)(nil).ListSnippets), varargs...)
}

// SnippetContent mocks base method.
func (m *MockProjectSnippetsService) SnippetContent(pid any, snippet int, options ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, snippet}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SnippetContent", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SnippetContent indicates an expected call of SnippetContent.
func (mr *MockProjectSnippetsServiceMockRecorder) SnippetContent(pid, snippet any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, snippet}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnippetContent", reflect.TypeOf((*MockProjectSnippetsService)(nil).SnippetContent), varargs...)
}

// UpdateSnippet mocks base method.
func (m *MockProjectSnippetsService) UpdateSnippet(pid any, snippet int, opt *gitlab.UpdateProjectSnippetOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Snippet, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, snippet, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSnippet", varargs...)
	ret0, _ := ret[0].(*gitlab.Snippet)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateSnippet indicates an expected call of UpdateSnippet.
func (mr *MockProjectSnippetsServiceMockRecorder) UpdateSnippet(pid, snippet, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, snippet, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnippet", reflect.TypeOf((*MockProjectSnippetsService)(nil).UpdateSnippet), varargs...)
}
