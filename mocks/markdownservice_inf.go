// Code generated by MockGen. DO NOT EDIT.
// Source: markdownservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=markdownservice_inf.go -destination=mocks/markdownservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockMarkdownService is a mock of MarkdownService interface.
type MockMarkdownService struct {
	ctrl     *gomock.Controller
	recorder *MockMarkdownServiceMockRecorder
	isgomock struct{}
}

// MockMarkdownServiceMockRecorder is the mock recorder for MockMarkdownService.
type MockMarkdownServiceMockRecorder struct {
	mock *MockMarkdownService
}

// NewMockMarkdownService creates a new mock instance.
func NewMockMarkdownService(ctrl *gomock.Controller) *MockMarkdownService {
	mock := &MockMarkdownService{ctrl: ctrl}
	mock.recorder = &MockMarkdownServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarkdownService) EXPECT() *MockMarkdownServiceMockRecorder {
	return m.recorder
}

// Render mocks base method.
func (m *MockMarkdownService) Render(opt *gitlab.RenderOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Markdown, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Render", varargs...)
	ret0, _ := ret[0].(*gitlab.Markdown)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Render indicates an expected call of Render.
func (mr *MockMarkdownServiceMockRecorder) Render(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockMarkdownService)(nil).Render), varargs...)
}
