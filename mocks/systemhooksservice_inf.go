// Code generated by MockGen. DO NOT EDIT.
// Source: systemhooksservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=systemhooksservice_inf.go -destination=mocks/systemhooksservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockSystemHooksService is a mock of SystemHooksService interface.
type MockSystemHooksService struct {
	ctrl     *gomock.Controller
	recorder *MockSystemHooksServiceMockRecorder
	isgomock struct{}
}

// MockSystemHooksServiceMockRecorder is the mock recorder for MockSystemHooksService.
type MockSystemHooksServiceMockRecorder struct {
	mock *MockSystemHooksService
}

// NewMockSystemHooksService creates a new mock instance.
func NewMockSystemHooksService(ctrl *gomock.Controller) *MockSystemHooksService {
	mock := &MockSystemHooksService{ctrl: ctrl}
	mock.recorder = &MockSystemHooksServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSystemHooksService) EXPECT() *MockSystemHooksServiceMockRecorder {
	return m.recorder
}

// AddHook mocks base method.
func (m *MockSystemHooksService) AddHook(opt *gitlab.AddHookOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Hook, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddHook", varargs...)
	ret0, _ := ret[0].(*gitlab.Hook)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddHook indicates an expected call of AddHook.
func (mr *MockSystemHooksServiceMockRecorder) AddHook(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHook", reflect.TypeOf((*MockSystemHooksService)(nil).AddHook), varargs...)
}

// DeleteHook mocks base method.
func (m *MockSystemHooksService) DeleteHook(hook int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{hook}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteHook", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHook indicates an expected call of DeleteHook.
func (mr *MockSystemHooksServiceMockRecorder) DeleteHook(hook any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{hook}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHook", reflect.TypeOf((*MockSystemHooksService)(nil).DeleteHook), varargs...)
}

// GetHook mocks base method.
func (m *MockSystemHooksService) GetHook(hook int, options ...gitlab.RequestOptionFunc) (*gitlab.Hook, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{hook}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHook", varargs...)
	ret0, _ := ret[0].(*gitlab.Hook)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetHook indicates an expected call of GetHook.
func (mr *MockSystemHooksServiceMockRecorder) GetHook(hook any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{hook}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHook", reflect.TypeOf((*MockSystemHooksService)(nil).GetHook), varargs...)
}

// ListHooks mocks base method.
func (m *MockSystemHooksService) ListHooks(options ...gitlab.RequestOptionFunc) ([]*gitlab.Hook, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHooks", varargs...)
	ret0, _ := ret[0].([]*gitlab.Hook)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListHooks indicates an expected call of ListHooks.
func (mr *MockSystemHooksServiceMockRecorder) ListHooks(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHooks", reflect.TypeOf((*MockSystemHooksService)(nil).ListHooks), options...)
}

// TestHook mocks base method.
func (m *MockSystemHooksService) TestHook(hook int, options ...gitlab.RequestOptionFunc) (*gitlab.HookEvent, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{hook}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TestHook", varargs...)
	ret0, _ := ret[0].(*gitlab.HookEvent)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TestHook indicates an expected call of TestHook.
func (mr *MockSystemHooksServiceMockRecorder) TestHook(hook any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{hook}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestHook", reflect.TypeOf((*MockSystemHooksService)(nil).TestHook), varargs...)
}
