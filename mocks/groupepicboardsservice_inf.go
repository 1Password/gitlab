// Code generated by MockGen. DO NOT EDIT.
// Source: groupepicboardsservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=groupepicboardsservice_inf.go -destination=mocks/groupepicboardsservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupEpicBoardsService is a mock of GroupEpicBoardsService interface.
type MockGroupEpicBoardsService struct {
	ctrl     *gomock.Controller
	recorder *MockGroupEpicBoardsServiceMockRecorder
}

// MockGroupEpicBoardsServiceMockRecorder is the mock recorder for MockGroupEpicBoardsService.
type MockGroupEpicBoardsServiceMockRecorder struct {
	mock *MockGroupEpicBoardsService
}

// NewMockGroupEpicBoardsService creates a new mock instance.
func NewMockGroupEpicBoardsService(ctrl *gomock.Controller) *MockGroupEpicBoardsService {
	mock := &MockGroupEpicBoardsService{ctrl: ctrl}
	mock.recorder = &MockGroupEpicBoardsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupEpicBoardsService) EXPECT() *MockGroupEpicBoardsServiceMockRecorder {
	return m.recorder
}

// GetGroupEpicBoard mocks base method.
func (m *MockGroupEpicBoardsService) GetGroupEpicBoard(gid any, board int, options ...gitlab.RequestOptionFunc) (*gitlab.GroupEpicBoard, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, board}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupEpicBoard", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupEpicBoard)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroupEpicBoard indicates an expected call of GetGroupEpicBoard.
func (mr *MockGroupEpicBoardsServiceMockRecorder) GetGroupEpicBoard(gid, board any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, board}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupEpicBoard", reflect.TypeOf((*MockGroupEpicBoardsService)(nil).GetGroupEpicBoard), varargs...)
}

// ListGroupEpicBoards mocks base method.
func (m *MockGroupEpicBoardsService) ListGroupEpicBoards(gid any, opt *gitlab.ListGroupEpicBoardsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupEpicBoard, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupEpicBoards", varargs...)
	ret0, _ := ret[0].([]*gitlab.GroupEpicBoard)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupEpicBoards indicates an expected call of ListGroupEpicBoards.
func (mr *MockGroupEpicBoardsServiceMockRecorder) ListGroupEpicBoards(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupEpicBoards", reflect.TypeOf((*MockGroupEpicBoardsService)(nil).ListGroupEpicBoards), varargs...)
}
