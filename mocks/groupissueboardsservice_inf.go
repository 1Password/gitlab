// Code generated by MockGen. DO NOT EDIT.
// Source: groupissueboardsservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=groupissueboardsservice_inf.go -destination=mocks/groupissueboardsservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupIssueBoardsService is a mock of GroupIssueBoardsService interface.
type MockGroupIssueBoardsService struct {
	ctrl     *gomock.Controller
	recorder *MockGroupIssueBoardsServiceMockRecorder
}

// MockGroupIssueBoardsServiceMockRecorder is the mock recorder for MockGroupIssueBoardsService.
type MockGroupIssueBoardsServiceMockRecorder struct {
	mock *MockGroupIssueBoardsService
}

// NewMockGroupIssueBoardsService creates a new mock instance.
func NewMockGroupIssueBoardsService(ctrl *gomock.Controller) *MockGroupIssueBoardsService {
	mock := &MockGroupIssueBoardsService{ctrl: ctrl}
	mock.recorder = &MockGroupIssueBoardsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupIssueBoardsService) EXPECT() *MockGroupIssueBoardsServiceMockRecorder {
	return m.recorder
}

// CreateGroupIssueBoard mocks base method.
func (m *MockGroupIssueBoardsService) CreateGroupIssueBoard(gid any, opt *gitlab.CreateGroupIssueBoardOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupIssueBoard, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGroupIssueBoard", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupIssueBoard)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateGroupIssueBoard indicates an expected call of CreateGroupIssueBoard.
func (mr *MockGroupIssueBoardsServiceMockRecorder) CreateGroupIssueBoard(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupIssueBoard", reflect.TypeOf((*MockGroupIssueBoardsService)(nil).CreateGroupIssueBoard), varargs...)
}

// CreateGroupIssueBoardList mocks base method.
func (m *MockGroupIssueBoardsService) CreateGroupIssueBoardList(gid any, board int, opt *gitlab.CreateGroupIssueBoardListOptions, options ...gitlab.RequestOptionFunc) (*gitlab.BoardList, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, board, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGroupIssueBoardList", varargs...)
	ret0, _ := ret[0].(*gitlab.BoardList)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateGroupIssueBoardList indicates an expected call of CreateGroupIssueBoardList.
func (mr *MockGroupIssueBoardsServiceMockRecorder) CreateGroupIssueBoardList(gid, board, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, board, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupIssueBoardList", reflect.TypeOf((*MockGroupIssueBoardsService)(nil).CreateGroupIssueBoardList), varargs...)
}

// DeleteGroupIssueBoardList mocks base method.
func (m *MockGroupIssueBoardsService) DeleteGroupIssueBoardList(gid any, board, list int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, board, list}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroupIssueBoardList", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupIssueBoardList indicates an expected call of DeleteGroupIssueBoardList.
func (mr *MockGroupIssueBoardsServiceMockRecorder) DeleteGroupIssueBoardList(gid, board, list any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, board, list}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupIssueBoardList", reflect.TypeOf((*MockGroupIssueBoardsService)(nil).DeleteGroupIssueBoardList), varargs...)
}

// DeleteIssueBoard mocks base method.
func (m *MockGroupIssueBoardsService) DeleteIssueBoard(gid any, board int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, board}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIssueBoard", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIssueBoard indicates an expected call of DeleteIssueBoard.
func (mr *MockGroupIssueBoardsServiceMockRecorder) DeleteIssueBoard(gid, board any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, board}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIssueBoard", reflect.TypeOf((*MockGroupIssueBoardsService)(nil).DeleteIssueBoard), varargs...)
}

// GetGroupIssueBoard mocks base method.
func (m *MockGroupIssueBoardsService) GetGroupIssueBoard(gid any, board int, options ...gitlab.RequestOptionFunc) (*gitlab.GroupIssueBoard, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, board}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupIssueBoard", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupIssueBoard)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroupIssueBoard indicates an expected call of GetGroupIssueBoard.
func (mr *MockGroupIssueBoardsServiceMockRecorder) GetGroupIssueBoard(gid, board any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, board}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupIssueBoard", reflect.TypeOf((*MockGroupIssueBoardsService)(nil).GetGroupIssueBoard), varargs...)
}

// GetGroupIssueBoardList mocks base method.
func (m *MockGroupIssueBoardsService) GetGroupIssueBoardList(gid any, board, list int, options ...gitlab.RequestOptionFunc) (*gitlab.BoardList, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, board, list}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupIssueBoardList", varargs...)
	ret0, _ := ret[0].(*gitlab.BoardList)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroupIssueBoardList indicates an expected call of GetGroupIssueBoardList.
func (mr *MockGroupIssueBoardsServiceMockRecorder) GetGroupIssueBoardList(gid, board, list any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, board, list}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupIssueBoardList", reflect.TypeOf((*MockGroupIssueBoardsService)(nil).GetGroupIssueBoardList), varargs...)
}

// ListGroupIssueBoardLists mocks base method.
func (m *MockGroupIssueBoardsService) ListGroupIssueBoardLists(gid any, board int, opt *gitlab.ListGroupIssueBoardListsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.BoardList, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, board, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupIssueBoardLists", varargs...)
	ret0, _ := ret[0].([]*gitlab.BoardList)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupIssueBoardLists indicates an expected call of ListGroupIssueBoardLists.
func (mr *MockGroupIssueBoardsServiceMockRecorder) ListGroupIssueBoardLists(gid, board, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, board, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupIssueBoardLists", reflect.TypeOf((*MockGroupIssueBoardsService)(nil).ListGroupIssueBoardLists), varargs...)
}

// ListGroupIssueBoards mocks base method.
func (m *MockGroupIssueBoardsService) ListGroupIssueBoards(gid any, opt *gitlab.ListGroupIssueBoardsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupIssueBoard, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupIssueBoards", varargs...)
	ret0, _ := ret[0].([]*gitlab.GroupIssueBoard)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupIssueBoards indicates an expected call of ListGroupIssueBoards.
func (mr *MockGroupIssueBoardsServiceMockRecorder) ListGroupIssueBoards(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupIssueBoards", reflect.TypeOf((*MockGroupIssueBoardsService)(nil).ListGroupIssueBoards), varargs...)
}

// UpdateIssueBoard mocks base method.
func (m *MockGroupIssueBoardsService) UpdateIssueBoard(gid any, board int, opt *gitlab.UpdateGroupIssueBoardOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupIssueBoard, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, board, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIssueBoard", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupIssueBoard)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateIssueBoard indicates an expected call of UpdateIssueBoard.
func (mr *MockGroupIssueBoardsServiceMockRecorder) UpdateIssueBoard(gid, board, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, board, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIssueBoard", reflect.TypeOf((*MockGroupIssueBoardsService)(nil).UpdateIssueBoard), varargs...)
}

// UpdateIssueBoardList mocks base method.
func (m *MockGroupIssueBoardsService) UpdateIssueBoardList(gid any, board, list int, opt *gitlab.UpdateGroupIssueBoardListOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.BoardList, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, board, list, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIssueBoardList", varargs...)
	ret0, _ := ret[0].([]*gitlab.BoardList)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateIssueBoardList indicates an expected call of UpdateIssueBoardList.
func (mr *MockGroupIssueBoardsServiceMockRecorder) UpdateIssueBoardList(gid, board, list, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, board, list, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIssueBoardList", reflect.TypeOf((*MockGroupIssueBoardsService)(nil).UpdateIssueBoardList), varargs...)
}
