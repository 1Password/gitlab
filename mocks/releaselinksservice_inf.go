// Code generated by MockGen. DO NOT EDIT.
// Source: releaselinksservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=releaselinksservice_inf.go -destination=mocks/releaselinksservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockReleaseLinksService is a mock of ReleaseLinksService interface.
type MockReleaseLinksService struct {
	ctrl     *gomock.Controller
	recorder *MockReleaseLinksServiceMockRecorder
	isgomock struct{}
}

// MockReleaseLinksServiceMockRecorder is the mock recorder for MockReleaseLinksService.
type MockReleaseLinksServiceMockRecorder struct {
	mock *MockReleaseLinksService
}

// NewMockReleaseLinksService creates a new mock instance.
func NewMockReleaseLinksService(ctrl *gomock.Controller) *MockReleaseLinksService {
	mock := &MockReleaseLinksService{ctrl: ctrl}
	mock.recorder = &MockReleaseLinksServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReleaseLinksService) EXPECT() *MockReleaseLinksServiceMockRecorder {
	return m.recorder
}

// CreateReleaseLink mocks base method.
func (m *MockReleaseLinksService) CreateReleaseLink(pid any, tagName string, opt *gitlab.CreateReleaseLinkOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ReleaseLink, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, tagName, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateReleaseLink", varargs...)
	ret0, _ := ret[0].(*gitlab.ReleaseLink)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateReleaseLink indicates an expected call of CreateReleaseLink.
func (mr *MockReleaseLinksServiceMockRecorder) CreateReleaseLink(pid, tagName, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, tagName, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReleaseLink", reflect.TypeOf((*MockReleaseLinksService)(nil).CreateReleaseLink), varargs...)
}

// DeleteReleaseLink mocks base method.
func (m *MockReleaseLinksService) DeleteReleaseLink(pid any, tagName string, link int, options ...gitlab.RequestOptionFunc) (*gitlab.ReleaseLink, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, tagName, link}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteReleaseLink", varargs...)
	ret0, _ := ret[0].(*gitlab.ReleaseLink)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteReleaseLink indicates an expected call of DeleteReleaseLink.
func (mr *MockReleaseLinksServiceMockRecorder) DeleteReleaseLink(pid, tagName, link any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, tagName, link}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReleaseLink", reflect.TypeOf((*MockReleaseLinksService)(nil).DeleteReleaseLink), varargs...)
}

// GetReleaseLink mocks base method.
func (m *MockReleaseLinksService) GetReleaseLink(pid any, tagName string, link int, options ...gitlab.RequestOptionFunc) (*gitlab.ReleaseLink, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, tagName, link}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReleaseLink", varargs...)
	ret0, _ := ret[0].(*gitlab.ReleaseLink)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetReleaseLink indicates an expected call of GetReleaseLink.
func (mr *MockReleaseLinksServiceMockRecorder) GetReleaseLink(pid, tagName, link any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, tagName, link}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleaseLink", reflect.TypeOf((*MockReleaseLinksService)(nil).GetReleaseLink), varargs...)
}

// ListReleaseLinks mocks base method.
func (m *MockReleaseLinksService) ListReleaseLinks(pid any, tagName string, opt *gitlab.ListReleaseLinksOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ReleaseLink, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, tagName, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReleaseLinks", varargs...)
	ret0, _ := ret[0].([]*gitlab.ReleaseLink)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListReleaseLinks indicates an expected call of ListReleaseLinks.
func (mr *MockReleaseLinksServiceMockRecorder) ListReleaseLinks(pid, tagName, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, tagName, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReleaseLinks", reflect.TypeOf((*MockReleaseLinksService)(nil).ListReleaseLinks), varargs...)
}

// UpdateReleaseLink mocks base method.
func (m *MockReleaseLinksService) UpdateReleaseLink(pid any, tagName string, link int, opt *gitlab.UpdateReleaseLinkOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ReleaseLink, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, tagName, link, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateReleaseLink", varargs...)
	ret0, _ := ret[0].(*gitlab.ReleaseLink)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateReleaseLink indicates an expected call of UpdateReleaseLink.
func (mr *MockReleaseLinksServiceMockRecorder) UpdateReleaseLink(pid, tagName, link, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, tagName, link, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReleaseLink", reflect.TypeOf((*MockReleaseLinksService)(nil).UpdateReleaseLink), varargs...)
}
