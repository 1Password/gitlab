// Code generated by MockGen. DO NOT EDIT.
// Source: applicationsservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=applicationsservice_inf.go -destination=mocks/applicationsservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockApplicationsService is a mock of ApplicationsService interface.
type MockApplicationsService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationsServiceMockRecorder
}

// MockApplicationsServiceMockRecorder is the mock recorder for MockApplicationsService.
type MockApplicationsServiceMockRecorder struct {
	mock *MockApplicationsService
}

// NewMockApplicationsService creates a new mock instance.
func NewMockApplicationsService(ctrl *gomock.Controller) *MockApplicationsService {
	mock := &MockApplicationsService{ctrl: ctrl}
	mock.recorder = &MockApplicationsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationsService) EXPECT() *MockApplicationsServiceMockRecorder {
	return m.recorder
}

// CreateApplication mocks base method.
func (m *MockApplicationsService) CreateApplication(opt *gitlab.CreateApplicationOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Application, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApplication", varargs...)
	ret0, _ := ret[0].(*gitlab.Application)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateApplication indicates an expected call of CreateApplication.
func (mr *MockApplicationsServiceMockRecorder) CreateApplication(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockApplicationsService)(nil).CreateApplication), varargs...)
}

// DeleteApplication mocks base method.
func (m *MockApplicationsService) DeleteApplication(application int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{application}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplication", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplication indicates an expected call of DeleteApplication.
func (mr *MockApplicationsServiceMockRecorder) DeleteApplication(application any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{application}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockApplicationsService)(nil).DeleteApplication), varargs...)
}

// ListApplications mocks base method.
func (m *MockApplicationsService) ListApplications(opt *gitlab.ListApplicationsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Application, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplications", varargs...)
	ret0, _ := ret[0].([]*gitlab.Application)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListApplications indicates an expected call of ListApplications.
func (mr *MockApplicationsServiceMockRecorder) ListApplications(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockApplicationsService)(nil).ListApplications), varargs...)
}
