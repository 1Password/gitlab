// Code generated by MockGen. DO NOT EDIT.
// Source: planlimitsservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=planlimitsservice_inf.go -destination=mocks/planlimitsservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockPlanLimitsService is a mock of PlanLimitsService interface.
type MockPlanLimitsService struct {
	ctrl     *gomock.Controller
	recorder *MockPlanLimitsServiceMockRecorder
	isgomock struct{}
}

// MockPlanLimitsServiceMockRecorder is the mock recorder for MockPlanLimitsService.
type MockPlanLimitsServiceMockRecorder struct {
	mock *MockPlanLimitsService
}

// NewMockPlanLimitsService creates a new mock instance.
func NewMockPlanLimitsService(ctrl *gomock.Controller) *MockPlanLimitsService {
	mock := &MockPlanLimitsService{ctrl: ctrl}
	mock.recorder = &MockPlanLimitsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlanLimitsService) EXPECT() *MockPlanLimitsServiceMockRecorder {
	return m.recorder
}

// ChangePlanLimits mocks base method.
func (m *MockPlanLimitsService) ChangePlanLimits(opt *gitlab.ChangePlanLimitOptions, options ...gitlab.RequestOptionFunc) (*gitlab.PlanLimit, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangePlanLimits", varargs...)
	ret0, _ := ret[0].(*gitlab.PlanLimit)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ChangePlanLimits indicates an expected call of ChangePlanLimits.
func (mr *MockPlanLimitsServiceMockRecorder) ChangePlanLimits(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePlanLimits", reflect.TypeOf((*MockPlanLimitsService)(nil).ChangePlanLimits), varargs...)
}

// GetCurrentPlanLimits mocks base method.
func (m *MockPlanLimitsService) GetCurrentPlanLimits(opt *gitlab.GetCurrentPlanLimitsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.PlanLimit, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCurrentPlanLimits", varargs...)
	ret0, _ := ret[0].(*gitlab.PlanLimit)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCurrentPlanLimits indicates an expected call of GetCurrentPlanLimits.
func (mr *MockPlanLimitsServiceMockRecorder) GetCurrentPlanLimits(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentPlanLimits", reflect.TypeOf((*MockPlanLimitsService)(nil).GetCurrentPlanLimits), varargs...)
}
