// Code generated by MockGen. DO NOT EDIT.
// Source: grouprepositorystoragemoveservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=grouprepositorystoragemoveservice_inf.go -destination=mocks/grouprepositorystoragemoveservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupRepositoryStorageMoveService is a mock of GroupRepositoryStorageMoveService interface.
type MockGroupRepositoryStorageMoveService struct {
	ctrl     *gomock.Controller
	recorder *MockGroupRepositoryStorageMoveServiceMockRecorder
	isgomock struct{}
}

// MockGroupRepositoryStorageMoveServiceMockRecorder is the mock recorder for MockGroupRepositoryStorageMoveService.
type MockGroupRepositoryStorageMoveServiceMockRecorder struct {
	mock *MockGroupRepositoryStorageMoveService
}

// NewMockGroupRepositoryStorageMoveService creates a new mock instance.
func NewMockGroupRepositoryStorageMoveService(ctrl *gomock.Controller) *MockGroupRepositoryStorageMoveService {
	mock := &MockGroupRepositoryStorageMoveService{ctrl: ctrl}
	mock.recorder = &MockGroupRepositoryStorageMoveServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupRepositoryStorageMoveService) EXPECT() *MockGroupRepositoryStorageMoveServiceMockRecorder {
	return m.recorder
}

// GetStorageMove mocks base method.
func (m *MockGroupRepositoryStorageMoveService) GetStorageMove(repositoryStorage int, options ...gitlab.RequestOptionFunc) (*gitlab.GroupRepositoryStorageMove, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{repositoryStorage}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStorageMove", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupRepositoryStorageMove)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStorageMove indicates an expected call of GetStorageMove.
func (mr *MockGroupRepositoryStorageMoveServiceMockRecorder) GetStorageMove(repositoryStorage any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{repositoryStorage}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageMove", reflect.TypeOf((*MockGroupRepositoryStorageMoveService)(nil).GetStorageMove), varargs...)
}

// GetStorageMoveForGroup mocks base method.
func (m *MockGroupRepositoryStorageMoveService) GetStorageMoveForGroup(group, repositoryStorage int, options ...gitlab.RequestOptionFunc) (*gitlab.GroupRepositoryStorageMove, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{group, repositoryStorage}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStorageMoveForGroup", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupRepositoryStorageMove)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStorageMoveForGroup indicates an expected call of GetStorageMoveForGroup.
func (mr *MockGroupRepositoryStorageMoveServiceMockRecorder) GetStorageMoveForGroup(group, repositoryStorage any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{group, repositoryStorage}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageMoveForGroup", reflect.TypeOf((*MockGroupRepositoryStorageMoveService)(nil).GetStorageMoveForGroup), varargs...)
}

// RetrieveAllStorageMoves mocks base method.
func (m *MockGroupRepositoryStorageMoveService) RetrieveAllStorageMoves(opts gitlab.RetrieveAllGroupStorageMovesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupRepositoryStorageMove, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opts}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveAllStorageMoves", varargs...)
	ret0, _ := ret[0].([]*gitlab.GroupRepositoryStorageMove)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RetrieveAllStorageMoves indicates an expected call of RetrieveAllStorageMoves.
func (mr *MockGroupRepositoryStorageMoveServiceMockRecorder) RetrieveAllStorageMoves(opts any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opts}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAllStorageMoves", reflect.TypeOf((*MockGroupRepositoryStorageMoveService)(nil).RetrieveAllStorageMoves), varargs...)
}

// RetrieveAllStorageMovesForGroup mocks base method.
func (m *MockGroupRepositoryStorageMoveService) RetrieveAllStorageMovesForGroup(group int, opts gitlab.RetrieveAllGroupStorageMovesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupRepositoryStorageMove, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{group, opts}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveAllStorageMovesForGroup", varargs...)
	ret0, _ := ret[0].([]*gitlab.GroupRepositoryStorageMove)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RetrieveAllStorageMovesForGroup indicates an expected call of RetrieveAllStorageMovesForGroup.
func (mr *MockGroupRepositoryStorageMoveServiceMockRecorder) RetrieveAllStorageMovesForGroup(group, opts any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{group, opts}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAllStorageMovesForGroup", reflect.TypeOf((*MockGroupRepositoryStorageMoveService)(nil).RetrieveAllStorageMovesForGroup), varargs...)
}

// ScheduleAllStorageMoves mocks base method.
func (m *MockGroupRepositoryStorageMoveService) ScheduleAllStorageMoves(opts gitlab.ScheduleAllGroupStorageMovesOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opts}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleAllStorageMoves", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleAllStorageMoves indicates an expected call of ScheduleAllStorageMoves.
func (mr *MockGroupRepositoryStorageMoveServiceMockRecorder) ScheduleAllStorageMoves(opts any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opts}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleAllStorageMoves", reflect.TypeOf((*MockGroupRepositoryStorageMoveService)(nil).ScheduleAllStorageMoves), varargs...)
}

// ScheduleStorageMoveForGroup mocks base method.
func (m *MockGroupRepositoryStorageMoveService) ScheduleStorageMoveForGroup(group int, opts gitlab.ScheduleStorageMoveForGroupOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupRepositoryStorageMove, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{group, opts}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleStorageMoveForGroup", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupRepositoryStorageMove)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ScheduleStorageMoveForGroup indicates an expected call of ScheduleStorageMoveForGroup.
func (mr *MockGroupRepositoryStorageMoveServiceMockRecorder) ScheduleStorageMoveForGroup(group, opts any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{group, opts}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleStorageMoveForGroup", reflect.TypeOf((*MockGroupRepositoryStorageMoveService)(nil).ScheduleStorageMoveForGroup), varargs...)
}
