// Code generated by MockGen. DO NOT EDIT.
// Source: projectsecuritysettingsservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=projectsecuritysettingsservice_inf.go -destination=mocks/projectsecuritysettingsservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectSecuritySettingsService is a mock of ProjectSecuritySettingsService interface.
type MockProjectSecuritySettingsService struct {
	ctrl     *gomock.Controller
	recorder *MockProjectSecuritySettingsServiceMockRecorder
	isgomock struct{}
}

// MockProjectSecuritySettingsServiceMockRecorder is the mock recorder for MockProjectSecuritySettingsService.
type MockProjectSecuritySettingsServiceMockRecorder struct {
	mock *MockProjectSecuritySettingsService
}

// NewMockProjectSecuritySettingsService creates a new mock instance.
func NewMockProjectSecuritySettingsService(ctrl *gomock.Controller) *MockProjectSecuritySettingsService {
	mock := &MockProjectSecuritySettingsService{ctrl: ctrl}
	mock.recorder = &MockProjectSecuritySettingsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectSecuritySettingsService) EXPECT() *MockProjectSecuritySettingsServiceMockRecorder {
	return m.recorder
}

// ListProjectSecuritySettings mocks base method.
func (m *MockProjectSecuritySettingsService) ListProjectSecuritySettings(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectSecuritySettings, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectSecuritySettings", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectSecuritySettings)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectSecuritySettings indicates an expected call of ListProjectSecuritySettings.
func (mr *MockProjectSecuritySettingsServiceMockRecorder) ListProjectSecuritySettings(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectSecuritySettings", reflect.TypeOf((*MockProjectSecuritySettingsService)(nil).ListProjectSecuritySettings), varargs...)
}

// UpdateSecretPushProtectionEnabledSetting mocks base method.
func (m *MockProjectSecuritySettingsService) UpdateSecretPushProtectionEnabledSetting(pid any, opt gitlab.UpdateProjectSecuritySettingsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectSecuritySettings, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSecretPushProtectionEnabledSetting", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectSecuritySettings)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateSecretPushProtectionEnabledSetting indicates an expected call of UpdateSecretPushProtectionEnabledSetting.
func (mr *MockProjectSecuritySettingsServiceMockRecorder) UpdateSecretPushProtectionEnabledSetting(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecretPushProtectionEnabledSetting", reflect.TypeOf((*MockProjectSecuritySettingsService)(nil).UpdateSecretPushProtectionEnabledSetting), varargs...)
}
