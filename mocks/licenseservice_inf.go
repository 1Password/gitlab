// Code generated by MockGen. DO NOT EDIT.
// Source: licenseservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=licenseservice_inf.go -destination=mocks/licenseservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockLicenseService is a mock of LicenseService interface.
type MockLicenseService struct {
	ctrl     *gomock.Controller
	recorder *MockLicenseServiceMockRecorder
	isgomock struct{}
}

// MockLicenseServiceMockRecorder is the mock recorder for MockLicenseService.
type MockLicenseServiceMockRecorder struct {
	mock *MockLicenseService
}

// NewMockLicenseService creates a new mock instance.
func NewMockLicenseService(ctrl *gomock.Controller) *MockLicenseService {
	mock := &MockLicenseService{ctrl: ctrl}
	mock.recorder = &MockLicenseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLicenseService) EXPECT() *MockLicenseServiceMockRecorder {
	return m.recorder
}

// AddLicense mocks base method.
func (m *MockLicenseService) AddLicense(opt *gitlab.AddLicenseOptions, options ...gitlab.RequestOptionFunc) (*gitlab.License, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddLicense", varargs...)
	ret0, _ := ret[0].(*gitlab.License)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddLicense indicates an expected call of AddLicense.
func (mr *MockLicenseServiceMockRecorder) AddLicense(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLicense", reflect.TypeOf((*MockLicenseService)(nil).AddLicense), varargs...)
}

// DeleteLicense mocks base method.
func (m *MockLicenseService) DeleteLicense(licenseID int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{licenseID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLicense", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLicense indicates an expected call of DeleteLicense.
func (mr *MockLicenseServiceMockRecorder) DeleteLicense(licenseID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{licenseID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLicense", reflect.TypeOf((*MockLicenseService)(nil).DeleteLicense), varargs...)
}

// GetLicense mocks base method.
func (m *MockLicenseService) GetLicense(options ...gitlab.RequestOptionFunc) (*gitlab.License, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLicense", varargs...)
	ret0, _ := ret[0].(*gitlab.License)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLicense indicates an expected call of GetLicense.
func (mr *MockLicenseServiceMockRecorder) GetLicense(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLicense", reflect.TypeOf((*MockLicenseService)(nil).GetLicense), options...)
}
