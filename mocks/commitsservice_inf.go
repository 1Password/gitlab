// Code generated by MockGen. DO NOT EDIT.
// Source: commitsservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=commitsservice_inf.go -destination=mocks/commitsservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockCommitsService is a mock of CommitsService interface.
type MockCommitsService struct {
	ctrl     *gomock.Controller
	recorder *MockCommitsServiceMockRecorder
	isgomock struct{}
}

// MockCommitsServiceMockRecorder is the mock recorder for MockCommitsService.
type MockCommitsServiceMockRecorder struct {
	mock *MockCommitsService
}

// NewMockCommitsService creates a new mock instance.
func NewMockCommitsService(ctrl *gomock.Controller) *MockCommitsService {
	mock := &MockCommitsService{ctrl: ctrl}
	mock.recorder = &MockCommitsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommitsService) EXPECT() *MockCommitsServiceMockRecorder {
	return m.recorder
}

// CherryPickCommit mocks base method.
func (m *MockCommitsService) CherryPickCommit(pid any, sha string, opt *gitlab.CherryPickCommitOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Commit, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, sha, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CherryPickCommit", varargs...)
	ret0, _ := ret[0].(*gitlab.Commit)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CherryPickCommit indicates an expected call of CherryPickCommit.
func (mr *MockCommitsServiceMockRecorder) CherryPickCommit(pid, sha, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, sha, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CherryPickCommit", reflect.TypeOf((*MockCommitsService)(nil).CherryPickCommit), varargs...)
}

// CreateCommit mocks base method.
func (m *MockCommitsService) CreateCommit(pid any, opt *gitlab.CreateCommitOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Commit, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCommit", varargs...)
	ret0, _ := ret[0].(*gitlab.Commit)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCommit indicates an expected call of CreateCommit.
func (mr *MockCommitsServiceMockRecorder) CreateCommit(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommit", reflect.TypeOf((*MockCommitsService)(nil).CreateCommit), varargs...)
}

// GetCommit mocks base method.
func (m *MockCommitsService) GetCommit(pid any, sha string, opt *gitlab.GetCommitOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Commit, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, sha, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommit", varargs...)
	ret0, _ := ret[0].(*gitlab.Commit)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommit indicates an expected call of GetCommit.
func (mr *MockCommitsServiceMockRecorder) GetCommit(pid, sha, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, sha, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommit", reflect.TypeOf((*MockCommitsService)(nil).GetCommit), varargs...)
}

// GetCommitComments mocks base method.
func (m *MockCommitsService) GetCommitComments(pid any, sha string, opt *gitlab.GetCommitCommentsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.CommitComment, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, sha, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommitComments", varargs...)
	ret0, _ := ret[0].([]*gitlab.CommitComment)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommitComments indicates an expected call of GetCommitComments.
func (mr *MockCommitsServiceMockRecorder) GetCommitComments(pid, sha, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, sha, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitComments", reflect.TypeOf((*MockCommitsService)(nil).GetCommitComments), varargs...)
}

// GetCommitDiff mocks base method.
func (m *MockCommitsService) GetCommitDiff(pid any, sha string, opt *gitlab.GetCommitDiffOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Diff, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, sha, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommitDiff", varargs...)
	ret0, _ := ret[0].([]*gitlab.Diff)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommitDiff indicates an expected call of GetCommitDiff.
func (mr *MockCommitsServiceMockRecorder) GetCommitDiff(pid, sha, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, sha, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitDiff", reflect.TypeOf((*MockCommitsService)(nil).GetCommitDiff), varargs...)
}

// GetCommitRefs mocks base method.
func (m *MockCommitsService) GetCommitRefs(pid any, sha string, opt *gitlab.GetCommitRefsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.CommitRef, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, sha, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommitRefs", varargs...)
	ret0, _ := ret[0].([]*gitlab.CommitRef)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommitRefs indicates an expected call of GetCommitRefs.
func (mr *MockCommitsServiceMockRecorder) GetCommitRefs(pid, sha, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, sha, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitRefs", reflect.TypeOf((*MockCommitsService)(nil).GetCommitRefs), varargs...)
}

// GetCommitStatuses mocks base method.
func (m *MockCommitsService) GetCommitStatuses(pid any, sha string, opt *gitlab.GetCommitStatusesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.CommitStatus, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, sha, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommitStatuses", varargs...)
	ret0, _ := ret[0].([]*gitlab.CommitStatus)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommitStatuses indicates an expected call of GetCommitStatuses.
func (mr *MockCommitsServiceMockRecorder) GetCommitStatuses(pid, sha, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, sha, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitStatuses", reflect.TypeOf((*MockCommitsService)(nil).GetCommitStatuses), varargs...)
}

// GetGPGSignature mocks base method.
func (m *MockCommitsService) GetGPGSignature(pid any, sha string, options ...gitlab.RequestOptionFunc) (*gitlab.GPGSignature, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, sha}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGPGSignature", varargs...)
	ret0, _ := ret[0].(*gitlab.GPGSignature)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGPGSignature indicates an expected call of GetGPGSignature.
func (mr *MockCommitsServiceMockRecorder) GetGPGSignature(pid, sha any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, sha}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGPGSignature", reflect.TypeOf((*MockCommitsService)(nil).GetGPGSignature), varargs...)
}

// ListCommits mocks base method.
func (m *MockCommitsService) ListCommits(pid any, opt *gitlab.ListCommitsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Commit, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCommits", varargs...)
	ret0, _ := ret[0].([]*gitlab.Commit)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCommits indicates an expected call of ListCommits.
func (mr *MockCommitsServiceMockRecorder) ListCommits(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommits", reflect.TypeOf((*MockCommitsService)(nil).ListCommits), varargs...)
}

// ListMergeRequestsByCommit mocks base method.
func (m *MockCommitsService) ListMergeRequestsByCommit(pid any, sha string, options ...gitlab.RequestOptionFunc) ([]*gitlab.MergeRequest, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, sha}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMergeRequestsByCommit", varargs...)
	ret0, _ := ret[0].([]*gitlab.MergeRequest)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMergeRequestsByCommit indicates an expected call of ListMergeRequestsByCommit.
func (mr *MockCommitsServiceMockRecorder) ListMergeRequestsByCommit(pid, sha any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, sha}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMergeRequestsByCommit", reflect.TypeOf((*MockCommitsService)(nil).ListMergeRequestsByCommit), varargs...)
}

// PostCommitComment mocks base method.
func (m *MockCommitsService) PostCommitComment(pid any, sha string, opt *gitlab.PostCommitCommentOptions, options ...gitlab.RequestOptionFunc) (*gitlab.CommitComment, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, sha, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostCommitComment", varargs...)
	ret0, _ := ret[0].(*gitlab.CommitComment)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PostCommitComment indicates an expected call of PostCommitComment.
func (mr *MockCommitsServiceMockRecorder) PostCommitComment(pid, sha, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, sha, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCommitComment", reflect.TypeOf((*MockCommitsService)(nil).PostCommitComment), varargs...)
}

// RevertCommit mocks base method.
func (m *MockCommitsService) RevertCommit(pid any, sha string, opt *gitlab.RevertCommitOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Commit, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, sha, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevertCommit", varargs...)
	ret0, _ := ret[0].(*gitlab.Commit)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RevertCommit indicates an expected call of RevertCommit.
func (mr *MockCommitsServiceMockRecorder) RevertCommit(pid, sha, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, sha, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevertCommit", reflect.TypeOf((*MockCommitsService)(nil).RevertCommit), varargs...)
}

// SetCommitStatus mocks base method.
func (m *MockCommitsService) SetCommitStatus(pid any, sha string, opt *gitlab.SetCommitStatusOptions, options ...gitlab.RequestOptionFunc) (*gitlab.CommitStatus, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, sha, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetCommitStatus", varargs...)
	ret0, _ := ret[0].(*gitlab.CommitStatus)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetCommitStatus indicates an expected call of SetCommitStatus.
func (mr *MockCommitsServiceMockRecorder) SetCommitStatus(pid, sha, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, sha, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCommitStatus", reflect.TypeOf((*MockCommitsService)(nil).SetCommitStatus), varargs...)
}
