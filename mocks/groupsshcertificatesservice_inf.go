// Code generated by MockGen. DO NOT EDIT.
// Source: groupsshcertificatesservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=groupsshcertificatesservice_inf.go -destination=mocks/groupsshcertificatesservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupSSHCertificatesService is a mock of GroupSSHCertificatesService interface.
type MockGroupSSHCertificatesService struct {
	ctrl     *gomock.Controller
	recorder *MockGroupSSHCertificatesServiceMockRecorder
	isgomock struct{}
}

// MockGroupSSHCertificatesServiceMockRecorder is the mock recorder for MockGroupSSHCertificatesService.
type MockGroupSSHCertificatesServiceMockRecorder struct {
	mock *MockGroupSSHCertificatesService
}

// NewMockGroupSSHCertificatesService creates a new mock instance.
func NewMockGroupSSHCertificatesService(ctrl *gomock.Controller) *MockGroupSSHCertificatesService {
	mock := &MockGroupSSHCertificatesService{ctrl: ctrl}
	mock.recorder = &MockGroupSSHCertificatesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupSSHCertificatesService) EXPECT() *MockGroupSSHCertificatesServiceMockRecorder {
	return m.recorder
}

// CreateGroupSSHCertificate mocks base method.
func (m *MockGroupSSHCertificatesService) CreateGroupSSHCertificate(gid any, opt *gitlab.CreateGroupSSHCertificateOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupSSHCertificate, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGroupSSHCertificate", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupSSHCertificate)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateGroupSSHCertificate indicates an expected call of CreateGroupSSHCertificate.
func (mr *MockGroupSSHCertificatesServiceMockRecorder) CreateGroupSSHCertificate(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupSSHCertificate", reflect.TypeOf((*MockGroupSSHCertificatesService)(nil).CreateGroupSSHCertificate), varargs...)
}

// DeleteGroupSSHCertificate mocks base method.
func (m *MockGroupSSHCertificatesService) DeleteGroupSSHCertificate(gid any, cert int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, cert}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroupSSHCertificate", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupSSHCertificate indicates an expected call of DeleteGroupSSHCertificate.
func (mr *MockGroupSSHCertificatesServiceMockRecorder) DeleteGroupSSHCertificate(gid, cert any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, cert}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupSSHCertificate", reflect.TypeOf((*MockGroupSSHCertificatesService)(nil).DeleteGroupSSHCertificate), varargs...)
}

// ListGroupSSHCertificates mocks base method.
func (m *MockGroupSSHCertificatesService) ListGroupSSHCertificates(gid any, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupSSHCertificate, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupSSHCertificates", varargs...)
	ret0, _ := ret[0].([]*gitlab.GroupSSHCertificate)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupSSHCertificates indicates an expected call of ListGroupSSHCertificates.
func (mr *MockGroupSSHCertificatesServiceMockRecorder) ListGroupSSHCertificates(gid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupSSHCertificates", reflect.TypeOf((*MockGroupSSHCertificatesService)(nil).ListGroupSSHCertificates), varargs...)
}
