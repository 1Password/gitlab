// Code generated by MockGen. DO NOT EDIT.
// Source: groupsservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=groupsservice_inf.go -destination=mocks/groupsservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	bytes "bytes"
	io "io"
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupsService is a mock of GroupsService interface.
type MockGroupsService struct {
	ctrl     *gomock.Controller
	recorder *MockGroupsServiceMockRecorder
}

// MockGroupsServiceMockRecorder is the mock recorder for MockGroupsService.
type MockGroupsServiceMockRecorder struct {
	mock *MockGroupsService
}

// NewMockGroupsService creates a new mock instance.
func NewMockGroupsService(ctrl *gomock.Controller) *MockGroupsService {
	mock := &MockGroupsService{ctrl: ctrl}
	mock.recorder = &MockGroupsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupsService) EXPECT() *MockGroupsServiceMockRecorder {
	return m.recorder
}

// AddGroupHook mocks base method.
func (m *MockGroupsService) AddGroupHook(gid any, opt *gitlab.AddGroupHookOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupHook, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddGroupHook", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupHook)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddGroupHook indicates an expected call of AddGroupHook.
func (mr *MockGroupsServiceMockRecorder) AddGroupHook(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGroupHook", reflect.TypeOf((*MockGroupsService)(nil).AddGroupHook), varargs...)
}

// AddGroupLDAPLink mocks base method.
func (m *MockGroupsService) AddGroupLDAPLink(gid any, opt *gitlab.AddGroupLDAPLinkOptions, options ...gitlab.RequestOptionFunc) (*gitlab.LDAPGroupLink, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddGroupLDAPLink", varargs...)
	ret0, _ := ret[0].(*gitlab.LDAPGroupLink)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddGroupLDAPLink indicates an expected call of AddGroupLDAPLink.
func (mr *MockGroupsServiceMockRecorder) AddGroupLDAPLink(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGroupLDAPLink", reflect.TypeOf((*MockGroupsService)(nil).AddGroupLDAPLink), varargs...)
}

// AddGroupPushRule mocks base method.
func (m *MockGroupsService) AddGroupPushRule(gid any, opt *gitlab.AddGroupPushRuleOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupPushRules, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddGroupPushRule", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupPushRules)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddGroupPushRule indicates an expected call of AddGroupPushRule.
func (mr *MockGroupsServiceMockRecorder) AddGroupPushRule(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGroupPushRule", reflect.TypeOf((*MockGroupsService)(nil).AddGroupPushRule), varargs...)
}

// AddGroupSAMLLink mocks base method.
func (m *MockGroupsService) AddGroupSAMLLink(gid any, opt *gitlab.AddGroupSAMLLinkOptions, options ...gitlab.RequestOptionFunc) (*gitlab.SAMLGroupLink, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddGroupSAMLLink", varargs...)
	ret0, _ := ret[0].(*gitlab.SAMLGroupLink)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddGroupSAMLLink indicates an expected call of AddGroupSAMLLink.
func (mr *MockGroupsServiceMockRecorder) AddGroupSAMLLink(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGroupSAMLLink", reflect.TypeOf((*MockGroupsService)(nil).AddGroupSAMLLink), varargs...)
}

// CreateGroup mocks base method.
func (m *MockGroupsService) CreateGroup(opt *gitlab.CreateGroupOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Group, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGroup", varargs...)
	ret0, _ := ret[0].(*gitlab.Group)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockGroupsServiceMockRecorder) CreateGroup(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockGroupsService)(nil).CreateGroup), varargs...)
}

// CreateServiceAccount mocks base method.
func (m *MockGroupsService) CreateServiceAccount(gid any, opt *gitlab.CreateServiceAccountOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupServiceAccount, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServiceAccount", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupServiceAccount)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateServiceAccount indicates an expected call of CreateServiceAccount.
func (mr *MockGroupsServiceMockRecorder) CreateServiceAccount(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceAccount", reflect.TypeOf((*MockGroupsService)(nil).CreateServiceAccount), varargs...)
}

// CreateServiceAccountPersonalAccessToken mocks base method.
func (m *MockGroupsService) CreateServiceAccountPersonalAccessToken(gid any, serviceAccount int, opt *gitlab.CreateServiceAccountPersonalAccessTokenOptions, options ...gitlab.RequestOptionFunc) (*gitlab.PersonalAccessToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, serviceAccount, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServiceAccountPersonalAccessToken", varargs...)
	ret0, _ := ret[0].(*gitlab.PersonalAccessToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateServiceAccountPersonalAccessToken indicates an expected call of CreateServiceAccountPersonalAccessToken.
func (mr *MockGroupsServiceMockRecorder) CreateServiceAccountPersonalAccessToken(gid, serviceAccount, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, serviceAccount, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceAccountPersonalAccessToken", reflect.TypeOf((*MockGroupsService)(nil).CreateServiceAccountPersonalAccessToken), varargs...)
}

// DeleteGroup mocks base method.
func (m *MockGroupsService) DeleteGroup(gid any, opt *gitlab.DeleteGroupOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroup", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockGroupsServiceMockRecorder) DeleteGroup(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockGroupsService)(nil).DeleteGroup), varargs...)
}

// DeleteGroupCustomHeader mocks base method.
func (m *MockGroupsService) DeleteGroupCustomHeader(gid any, hook int, key string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, hook, key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroupCustomHeader", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupCustomHeader indicates an expected call of DeleteGroupCustomHeader.
func (mr *MockGroupsServiceMockRecorder) DeleteGroupCustomHeader(gid, hook, key any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, hook, key}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupCustomHeader", reflect.TypeOf((*MockGroupsService)(nil).DeleteGroupCustomHeader), varargs...)
}

// DeleteGroupHook mocks base method.
func (m *MockGroupsService) DeleteGroupHook(pid any, hook int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, hook}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroupHook", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupHook indicates an expected call of DeleteGroupHook.
func (mr *MockGroupsServiceMockRecorder) DeleteGroupHook(pid, hook any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, hook}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupHook", reflect.TypeOf((*MockGroupsService)(nil).DeleteGroupHook), varargs...)
}

// DeleteGroupLDAPLink mocks base method.
func (m *MockGroupsService) DeleteGroupLDAPLink(gid any, cn string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, cn}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroupLDAPLink", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupLDAPLink indicates an expected call of DeleteGroupLDAPLink.
func (mr *MockGroupsServiceMockRecorder) DeleteGroupLDAPLink(gid, cn any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, cn}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupLDAPLink", reflect.TypeOf((*MockGroupsService)(nil).DeleteGroupLDAPLink), varargs...)
}

// DeleteGroupLDAPLinkForProvider mocks base method.
func (m *MockGroupsService) DeleteGroupLDAPLinkForProvider(gid any, provider, cn string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, provider, cn}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroupLDAPLinkForProvider", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupLDAPLinkForProvider indicates an expected call of DeleteGroupLDAPLinkForProvider.
func (mr *MockGroupsServiceMockRecorder) DeleteGroupLDAPLinkForProvider(gid, provider, cn any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, provider, cn}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupLDAPLinkForProvider", reflect.TypeOf((*MockGroupsService)(nil).DeleteGroupLDAPLinkForProvider), varargs...)
}

// DeleteGroupLDAPLinkWithCNOrFilter mocks base method.
func (m *MockGroupsService) DeleteGroupLDAPLinkWithCNOrFilter(gid any, opts *gitlab.DeleteGroupLDAPLinkWithCNOrFilterOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opts}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroupLDAPLinkWithCNOrFilter", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupLDAPLinkWithCNOrFilter indicates an expected call of DeleteGroupLDAPLinkWithCNOrFilter.
func (mr *MockGroupsServiceMockRecorder) DeleteGroupLDAPLinkWithCNOrFilter(gid, opts any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opts}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupLDAPLinkWithCNOrFilter", reflect.TypeOf((*MockGroupsService)(nil).DeleteGroupLDAPLinkWithCNOrFilter), varargs...)
}

// DeleteGroupPushRule mocks base method.
func (m *MockGroupsService) DeleteGroupPushRule(gid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroupPushRule", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupPushRule indicates an expected call of DeleteGroupPushRule.
func (mr *MockGroupsServiceMockRecorder) DeleteGroupPushRule(gid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupPushRule", reflect.TypeOf((*MockGroupsService)(nil).DeleteGroupPushRule), varargs...)
}

// DeleteGroupSAMLLink mocks base method.
func (m *MockGroupsService) DeleteGroupSAMLLink(gid any, samlGroupName string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, samlGroupName}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroupSAMLLink", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupSAMLLink indicates an expected call of DeleteGroupSAMLLink.
func (mr *MockGroupsServiceMockRecorder) DeleteGroupSAMLLink(gid, samlGroupName any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, samlGroupName}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupSAMLLink", reflect.TypeOf((*MockGroupsService)(nil).DeleteGroupSAMLLink), varargs...)
}

// DeleteServiceAccount mocks base method.
func (m *MockGroupsService) DeleteServiceAccount(gid any, serviceAccount int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, serviceAccount}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteServiceAccount", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServiceAccount indicates an expected call of DeleteServiceAccount.
func (mr *MockGroupsServiceMockRecorder) DeleteServiceAccount(gid, serviceAccount any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, serviceAccount}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceAccount", reflect.TypeOf((*MockGroupsService)(nil).DeleteServiceAccount), varargs...)
}

// DownloadAvatar mocks base method.
func (m *MockGroupsService) DownloadAvatar(gid any, options ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadAvatar", varargs...)
	ret0, _ := ret[0].(*bytes.Reader)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadAvatar indicates an expected call of DownloadAvatar.
func (mr *MockGroupsServiceMockRecorder) DownloadAvatar(gid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadAvatar", reflect.TypeOf((*MockGroupsService)(nil).DownloadAvatar), varargs...)
}

// EditGroupHook mocks base method.
func (m *MockGroupsService) EditGroupHook(pid any, hook int, opt *gitlab.EditGroupHookOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupHook, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, hook, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditGroupHook", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupHook)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditGroupHook indicates an expected call of EditGroupHook.
func (mr *MockGroupsServiceMockRecorder) EditGroupHook(pid, hook, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, hook, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditGroupHook", reflect.TypeOf((*MockGroupsService)(nil).EditGroupHook), varargs...)
}

// EditGroupPushRule mocks base method.
func (m *MockGroupsService) EditGroupPushRule(gid any, opt *gitlab.EditGroupPushRuleOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupPushRules, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditGroupPushRule", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupPushRules)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditGroupPushRule indicates an expected call of EditGroupPushRule.
func (mr *MockGroupsServiceMockRecorder) EditGroupPushRule(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditGroupPushRule", reflect.TypeOf((*MockGroupsService)(nil).EditGroupPushRule), varargs...)
}

// GetGroup mocks base method.
func (m *MockGroupsService) GetGroup(gid any, opt *gitlab.GetGroupOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Group, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroup", varargs...)
	ret0, _ := ret[0].(*gitlab.Group)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroup indicates an expected call of GetGroup.
func (mr *MockGroupsServiceMockRecorder) GetGroup(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockGroupsService)(nil).GetGroup), varargs...)
}

// GetGroupHook mocks base method.
func (m *MockGroupsService) GetGroupHook(pid any, hook int, options ...gitlab.RequestOptionFunc) (*gitlab.GroupHook, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, hook}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupHook", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupHook)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroupHook indicates an expected call of GetGroupHook.
func (mr *MockGroupsServiceMockRecorder) GetGroupHook(pid, hook any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, hook}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupHook", reflect.TypeOf((*MockGroupsService)(nil).GetGroupHook), varargs...)
}

// GetGroupPushRules mocks base method.
func (m *MockGroupsService) GetGroupPushRules(gid any, options ...gitlab.RequestOptionFunc) (*gitlab.GroupPushRules, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupPushRules", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupPushRules)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroupPushRules indicates an expected call of GetGroupPushRules.
func (mr *MockGroupsServiceMockRecorder) GetGroupPushRules(gid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupPushRules", reflect.TypeOf((*MockGroupsService)(nil).GetGroupPushRules), varargs...)
}

// GetGroupSAMLLink mocks base method.
func (m *MockGroupsService) GetGroupSAMLLink(gid any, samlGroupName string, options ...gitlab.RequestOptionFunc) (*gitlab.SAMLGroupLink, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, samlGroupName}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupSAMLLink", varargs...)
	ret0, _ := ret[0].(*gitlab.SAMLGroupLink)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroupSAMLLink indicates an expected call of GetGroupSAMLLink.
func (mr *MockGroupsServiceMockRecorder) GetGroupSAMLLink(gid, samlGroupName any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, samlGroupName}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupSAMLLink", reflect.TypeOf((*MockGroupsService)(nil).GetGroupSAMLLink), varargs...)
}

// ListAllGroupMembers mocks base method.
func (m *MockGroupsService) ListAllGroupMembers(gid any, opt *gitlab.ListGroupMembersOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupMember, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAllGroupMembers", varargs...)
	ret0, _ := ret[0].([]*gitlab.GroupMember)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAllGroupMembers indicates an expected call of ListAllGroupMembers.
func (mr *MockGroupsServiceMockRecorder) ListAllGroupMembers(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllGroupMembers", reflect.TypeOf((*MockGroupsService)(nil).ListAllGroupMembers), varargs...)
}

// ListBillableGroupMembers mocks base method.
func (m *MockGroupsService) ListBillableGroupMembers(gid any, opt *gitlab.ListBillableGroupMembersOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.BillableGroupMember, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBillableGroupMembers", varargs...)
	ret0, _ := ret[0].([]*gitlab.BillableGroupMember)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBillableGroupMembers indicates an expected call of ListBillableGroupMembers.
func (mr *MockGroupsServiceMockRecorder) ListBillableGroupMembers(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBillableGroupMembers", reflect.TypeOf((*MockGroupsService)(nil).ListBillableGroupMembers), varargs...)
}

// ListDescendantGroups mocks base method.
func (m *MockGroupsService) ListDescendantGroups(gid any, opt *gitlab.ListDescendantGroupsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Group, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDescendantGroups", varargs...)
	ret0, _ := ret[0].([]*gitlab.Group)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDescendantGroups indicates an expected call of ListDescendantGroups.
func (mr *MockGroupsServiceMockRecorder) ListDescendantGroups(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDescendantGroups", reflect.TypeOf((*MockGroupsService)(nil).ListDescendantGroups), varargs...)
}

// ListGroupHooks mocks base method.
func (m *MockGroupsService) ListGroupHooks(gid any, opt *gitlab.ListGroupHooksOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupHook, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupHooks", varargs...)
	ret0, _ := ret[0].([]*gitlab.GroupHook)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupHooks indicates an expected call of ListGroupHooks.
func (mr *MockGroupsServiceMockRecorder) ListGroupHooks(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupHooks", reflect.TypeOf((*MockGroupsService)(nil).ListGroupHooks), varargs...)
}

// ListGroupLDAPLinks mocks base method.
func (m *MockGroupsService) ListGroupLDAPLinks(gid any, options ...gitlab.RequestOptionFunc) ([]*gitlab.LDAPGroupLink, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupLDAPLinks", varargs...)
	ret0, _ := ret[0].([]*gitlab.LDAPGroupLink)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupLDAPLinks indicates an expected call of ListGroupLDAPLinks.
func (mr *MockGroupsServiceMockRecorder) ListGroupLDAPLinks(gid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupLDAPLinks", reflect.TypeOf((*MockGroupsService)(nil).ListGroupLDAPLinks), varargs...)
}

// ListGroupMembers mocks base method.
func (m *MockGroupsService) ListGroupMembers(gid any, opt *gitlab.ListGroupMembersOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupMember, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupMembers", varargs...)
	ret0, _ := ret[0].([]*gitlab.GroupMember)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupMembers indicates an expected call of ListGroupMembers.
func (mr *MockGroupsServiceMockRecorder) ListGroupMembers(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupMembers", reflect.TypeOf((*MockGroupsService)(nil).ListGroupMembers), varargs...)
}

// ListGroupProjects mocks base method.
func (m *MockGroupsService) ListGroupProjects(gid any, opt *gitlab.ListGroupProjectsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Project, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupProjects", varargs...)
	ret0, _ := ret[0].([]*gitlab.Project)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupProjects indicates an expected call of ListGroupProjects.
func (mr *MockGroupsServiceMockRecorder) ListGroupProjects(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupProjects", reflect.TypeOf((*MockGroupsService)(nil).ListGroupProjects), varargs...)
}

// ListGroupSAMLLinks mocks base method.
func (m *MockGroupsService) ListGroupSAMLLinks(gid any, options ...gitlab.RequestOptionFunc) ([]*gitlab.SAMLGroupLink, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupSAMLLinks", varargs...)
	ret0, _ := ret[0].([]*gitlab.SAMLGroupLink)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupSAMLLinks indicates an expected call of ListGroupSAMLLinks.
func (mr *MockGroupsServiceMockRecorder) ListGroupSAMLLinks(gid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupSAMLLinks", reflect.TypeOf((*MockGroupsService)(nil).ListGroupSAMLLinks), varargs...)
}

// ListGroups mocks base method.
func (m *MockGroupsService) ListGroups(opt *gitlab.ListGroupsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Group, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroups", varargs...)
	ret0, _ := ret[0].([]*gitlab.Group)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroups indicates an expected call of ListGroups.
func (mr *MockGroupsServiceMockRecorder) ListGroups(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroups", reflect.TypeOf((*MockGroupsService)(nil).ListGroups), varargs...)
}

// ListMembershipsForBillableGroupMember mocks base method.
func (m *MockGroupsService) ListMembershipsForBillableGroupMember(gid any, user int, options ...gitlab.RequestOptionFunc) ([]*gitlab.BillableUserMembership, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, user}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMembershipsForBillableGroupMember", varargs...)
	ret0, _ := ret[0].([]*gitlab.BillableUserMembership)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMembershipsForBillableGroupMember indicates an expected call of ListMembershipsForBillableGroupMember.
func (mr *MockGroupsServiceMockRecorder) ListMembershipsForBillableGroupMember(gid, user any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, user}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembershipsForBillableGroupMember", reflect.TypeOf((*MockGroupsService)(nil).ListMembershipsForBillableGroupMember), varargs...)
}

// ListProvisionedUsers mocks base method.
func (m *MockGroupsService) ListProvisionedUsers(gid any, opt *gitlab.ListProvisionedUsersOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.User, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProvisionedUsers", varargs...)
	ret0, _ := ret[0].([]*gitlab.User)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProvisionedUsers indicates an expected call of ListProvisionedUsers.
func (mr *MockGroupsServiceMockRecorder) ListProvisionedUsers(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProvisionedUsers", reflect.TypeOf((*MockGroupsService)(nil).ListProvisionedUsers), varargs...)
}

// ListServiceAccounts mocks base method.
func (m *MockGroupsService) ListServiceAccounts(gid any, opt *gitlab.ListServiceAccountsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupServiceAccount, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceAccounts", varargs...)
	ret0, _ := ret[0].([]*gitlab.GroupServiceAccount)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListServiceAccounts indicates an expected call of ListServiceAccounts.
func (mr *MockGroupsServiceMockRecorder) ListServiceAccounts(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceAccounts", reflect.TypeOf((*MockGroupsService)(nil).ListServiceAccounts), varargs...)
}

// ListSubGroups mocks base method.
func (m *MockGroupsService) ListSubGroups(gid any, opt *gitlab.ListSubGroupsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Group, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubGroups", varargs...)
	ret0, _ := ret[0].([]*gitlab.Group)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSubGroups indicates an expected call of ListSubGroups.
func (mr *MockGroupsServiceMockRecorder) ListSubGroups(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubGroups", reflect.TypeOf((*MockGroupsService)(nil).ListSubGroups), varargs...)
}

// RemoveBillableGroupMember mocks base method.
func (m *MockGroupsService) RemoveBillableGroupMember(gid any, user int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, user}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveBillableGroupMember", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBillableGroupMember indicates an expected call of RemoveBillableGroupMember.
func (mr *MockGroupsServiceMockRecorder) RemoveBillableGroupMember(gid, user any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, user}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBillableGroupMember", reflect.TypeOf((*MockGroupsService)(nil).RemoveBillableGroupMember), varargs...)
}

// RestoreGroup mocks base method.
func (m *MockGroupsService) RestoreGroup(gid any, options ...gitlab.RequestOptionFunc) (*gitlab.Group, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreGroup", varargs...)
	ret0, _ := ret[0].(*gitlab.Group)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RestoreGroup indicates an expected call of RestoreGroup.
func (mr *MockGroupsServiceMockRecorder) RestoreGroup(gid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreGroup", reflect.TypeOf((*MockGroupsService)(nil).RestoreGroup), varargs...)
}

// RotateServiceAccountPersonalAccessToken mocks base method.
func (m *MockGroupsService) RotateServiceAccountPersonalAccessToken(gid any, serviceAccount, token int, options ...gitlab.RequestOptionFunc) (*gitlab.PersonalAccessToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, serviceAccount, token}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RotateServiceAccountPersonalAccessToken", varargs...)
	ret0, _ := ret[0].(*gitlab.PersonalAccessToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RotateServiceAccountPersonalAccessToken indicates an expected call of RotateServiceAccountPersonalAccessToken.
func (mr *MockGroupsServiceMockRecorder) RotateServiceAccountPersonalAccessToken(gid, serviceAccount, token any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, serviceAccount, token}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotateServiceAccountPersonalAccessToken", reflect.TypeOf((*MockGroupsService)(nil).RotateServiceAccountPersonalAccessToken), varargs...)
}

// SearchGroup mocks base method.
func (m *MockGroupsService) SearchGroup(query string, options ...gitlab.RequestOptionFunc) ([]*gitlab.Group, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchGroup", varargs...)
	ret0, _ := ret[0].([]*gitlab.Group)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchGroup indicates an expected call of SearchGroup.
func (mr *MockGroupsServiceMockRecorder) SearchGroup(query any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchGroup", reflect.TypeOf((*MockGroupsService)(nil).SearchGroup), varargs...)
}

// SetGroupCustomHeader mocks base method.
func (m *MockGroupsService) SetGroupCustomHeader(gid any, hook int, key string, opt *gitlab.SetHookCustomHeaderOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, hook, key, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetGroupCustomHeader", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetGroupCustomHeader indicates an expected call of SetGroupCustomHeader.
func (mr *MockGroupsServiceMockRecorder) SetGroupCustomHeader(gid, hook, key, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, hook, key, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGroupCustomHeader", reflect.TypeOf((*MockGroupsService)(nil).SetGroupCustomHeader), varargs...)
}

// ShareGroupWithGroup mocks base method.
func (m *MockGroupsService) ShareGroupWithGroup(gid any, opt *gitlab.ShareGroupWithGroupOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Group, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ShareGroupWithGroup", varargs...)
	ret0, _ := ret[0].(*gitlab.Group)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ShareGroupWithGroup indicates an expected call of ShareGroupWithGroup.
func (mr *MockGroupsServiceMockRecorder) ShareGroupWithGroup(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareGroupWithGroup", reflect.TypeOf((*MockGroupsService)(nil).ShareGroupWithGroup), varargs...)
}

// TransferGroup mocks base method.
func (m *MockGroupsService) TransferGroup(gid, pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Group, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TransferGroup", varargs...)
	ret0, _ := ret[0].(*gitlab.Group)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TransferGroup indicates an expected call of TransferGroup.
func (mr *MockGroupsServiceMockRecorder) TransferGroup(gid, pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferGroup", reflect.TypeOf((*MockGroupsService)(nil).TransferGroup), varargs...)
}

// TransferSubGroup mocks base method.
func (m *MockGroupsService) TransferSubGroup(gid any, opt *gitlab.TransferSubGroupOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Group, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TransferSubGroup", varargs...)
	ret0, _ := ret[0].(*gitlab.Group)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TransferSubGroup indicates an expected call of TransferSubGroup.
func (mr *MockGroupsServiceMockRecorder) TransferSubGroup(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferSubGroup", reflect.TypeOf((*MockGroupsService)(nil).TransferSubGroup), varargs...)
}

// UnshareGroupFromGroup mocks base method.
func (m *MockGroupsService) UnshareGroupFromGroup(gid any, groupID int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, groupID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnshareGroupFromGroup", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnshareGroupFromGroup indicates an expected call of UnshareGroupFromGroup.
func (mr *MockGroupsServiceMockRecorder) UnshareGroupFromGroup(gid, groupID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, groupID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnshareGroupFromGroup", reflect.TypeOf((*MockGroupsService)(nil).UnshareGroupFromGroup), varargs...)
}

// UpdateGroup mocks base method.
func (m *MockGroupsService) UpdateGroup(gid any, opt *gitlab.UpdateGroupOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Group, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGroup", varargs...)
	ret0, _ := ret[0].(*gitlab.Group)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateGroup indicates an expected call of UpdateGroup.
func (mr *MockGroupsServiceMockRecorder) UpdateGroup(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockGroupsService)(nil).UpdateGroup), varargs...)
}

// UploadAvatar mocks base method.
func (m *MockGroupsService) UploadAvatar(gid any, avatar io.Reader, filename string, options ...gitlab.RequestOptionFunc) (*gitlab.Group, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, avatar, filename}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadAvatar", varargs...)
	ret0, _ := ret[0].(*gitlab.Group)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UploadAvatar indicates an expected call of UploadAvatar.
func (mr *MockGroupsServiceMockRecorder) UploadAvatar(gid, avatar, filename any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, avatar, filename}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAvatar", reflect.TypeOf((*MockGroupsService)(nil).UploadAvatar), varargs...)
}
