// Code generated by MockGen. DO NOT EDIT.
// Source: groupaccesstokensservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=groupaccesstokensservice_inf.go -destination=mocks/groupaccesstokensservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupAccessTokensService is a mock of GroupAccessTokensService interface.
type MockGroupAccessTokensService struct {
	ctrl     *gomock.Controller
	recorder *MockGroupAccessTokensServiceMockRecorder
	isgomock struct{}
}

// MockGroupAccessTokensServiceMockRecorder is the mock recorder for MockGroupAccessTokensService.
type MockGroupAccessTokensServiceMockRecorder struct {
	mock *MockGroupAccessTokensService
}

// NewMockGroupAccessTokensService creates a new mock instance.
func NewMockGroupAccessTokensService(ctrl *gomock.Controller) *MockGroupAccessTokensService {
	mock := &MockGroupAccessTokensService{ctrl: ctrl}
	mock.recorder = &MockGroupAccessTokensServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupAccessTokensService) EXPECT() *MockGroupAccessTokensServiceMockRecorder {
	return m.recorder
}

// CreateGroupAccessToken mocks base method.
func (m *MockGroupAccessTokensService) CreateGroupAccessToken(gid any, opt *gitlab.CreateGroupAccessTokenOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupAccessToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGroupAccessToken", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupAccessToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateGroupAccessToken indicates an expected call of CreateGroupAccessToken.
func (mr *MockGroupAccessTokensServiceMockRecorder) CreateGroupAccessToken(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupAccessToken", reflect.TypeOf((*MockGroupAccessTokensService)(nil).CreateGroupAccessToken), varargs...)
}

// GetGroupAccessToken mocks base method.
func (m *MockGroupAccessTokensService) GetGroupAccessToken(gid any, id int, options ...gitlab.RequestOptionFunc) (*gitlab.GroupAccessToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, id}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupAccessToken", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupAccessToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroupAccessToken indicates an expected call of GetGroupAccessToken.
func (mr *MockGroupAccessTokensServiceMockRecorder) GetGroupAccessToken(gid, id any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, id}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupAccessToken", reflect.TypeOf((*MockGroupAccessTokensService)(nil).GetGroupAccessToken), varargs...)
}

// ListGroupAccessTokens mocks base method.
func (m *MockGroupAccessTokensService) ListGroupAccessTokens(gid any, opt *gitlab.ListGroupAccessTokensOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupAccessToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupAccessTokens", varargs...)
	ret0, _ := ret[0].([]*gitlab.GroupAccessToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupAccessTokens indicates an expected call of ListGroupAccessTokens.
func (mr *MockGroupAccessTokensServiceMockRecorder) ListGroupAccessTokens(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupAccessTokens", reflect.TypeOf((*MockGroupAccessTokensService)(nil).ListGroupAccessTokens), varargs...)
}

// RevokeGroupAccessToken mocks base method.
func (m *MockGroupAccessTokensService) RevokeGroupAccessToken(gid any, id int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, id}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokeGroupAccessToken", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeGroupAccessToken indicates an expected call of RevokeGroupAccessToken.
func (mr *MockGroupAccessTokensServiceMockRecorder) RevokeGroupAccessToken(gid, id any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, id}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeGroupAccessToken", reflect.TypeOf((*MockGroupAccessTokensService)(nil).RevokeGroupAccessToken), varargs...)
}

// RotateGroupAccessToken mocks base method.
func (m *MockGroupAccessTokensService) RotateGroupAccessToken(gid any, id int, opt *gitlab.RotateGroupAccessTokenOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupAccessToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, id, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RotateGroupAccessToken", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupAccessToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RotateGroupAccessToken indicates an expected call of RotateGroupAccessToken.
func (mr *MockGroupAccessTokensServiceMockRecorder) RotateGroupAccessToken(gid, id, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, id, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotateGroupAccessToken", reflect.TypeOf((*MockGroupAccessTokensService)(nil).RotateGroupAccessToken), varargs...)
}
