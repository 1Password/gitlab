// Code generated by MockGen. DO NOT EDIT.
// Source: projectiterationsservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=projectiterationsservice_inf.go -destination=mocks/projectiterationsservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectIterationsService is a mock of ProjectIterationsService interface.
type MockProjectIterationsService struct {
	ctrl     *gomock.Controller
	recorder *MockProjectIterationsServiceMockRecorder
}

// MockProjectIterationsServiceMockRecorder is the mock recorder for MockProjectIterationsService.
type MockProjectIterationsServiceMockRecorder struct {
	mock *MockProjectIterationsService
}

// NewMockProjectIterationsService creates a new mock instance.
func NewMockProjectIterationsService(ctrl *gomock.Controller) *MockProjectIterationsService {
	mock := &MockProjectIterationsService{ctrl: ctrl}
	mock.recorder = &MockProjectIterationsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectIterationsService) EXPECT() *MockProjectIterationsServiceMockRecorder {
	return m.recorder
}

// ListProjectIterations mocks base method.
func (m *MockProjectIterationsService) ListProjectIterations(pid any, opt *gitlab.ListProjectIterationsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectIteration, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectIterations", varargs...)
	ret0, _ := ret[0].([]*gitlab.ProjectIteration)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectIterations indicates an expected call of ListProjectIterations.
func (mr *MockProjectIterationsServiceMockRecorder) ListProjectIterations(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectIterations", reflect.TypeOf((*MockProjectIterationsService)(nil).ListProjectIterations), varargs...)
}
