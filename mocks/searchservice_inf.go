// Code generated by MockGen. DO NOT EDIT.
// Source: searchservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=searchservice_inf.go -destination=mocks/searchservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockSearchService is a mock of SearchService interface.
type MockSearchService struct {
	ctrl     *gomock.Controller
	recorder *MockSearchServiceMockRecorder
	isgomock struct{}
}

// MockSearchServiceMockRecorder is the mock recorder for MockSearchService.
type MockSearchServiceMockRecorder struct {
	mock *MockSearchService
}

// NewMockSearchService creates a new mock instance.
func NewMockSearchService(ctrl *gomock.Controller) *MockSearchService {
	mock := &MockSearchService{ctrl: ctrl}
	mock.recorder = &MockSearchServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchService) EXPECT() *MockSearchServiceMockRecorder {
	return m.recorder
}

// Blobs mocks base method.
func (m *MockSearchService) Blobs(query string, opt *gitlab.SearchOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Blob, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{query, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Blobs", varargs...)
	ret0, _ := ret[0].([]*gitlab.Blob)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Blobs indicates an expected call of Blobs.
func (mr *MockSearchServiceMockRecorder) Blobs(query, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Blobs", reflect.TypeOf((*MockSearchService)(nil).Blobs), varargs...)
}

// BlobsByGroup mocks base method.
func (m *MockSearchService) BlobsByGroup(gid any, query string, opt *gitlab.SearchOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Blob, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, query, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BlobsByGroup", varargs...)
	ret0, _ := ret[0].([]*gitlab.Blob)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BlobsByGroup indicates an expected call of BlobsByGroup.
func (mr *MockSearchServiceMockRecorder) BlobsByGroup(gid, query, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, query, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlobsByGroup", reflect.TypeOf((*MockSearchService)(nil).BlobsByGroup), varargs...)
}

// BlobsByProject mocks base method.
func (m *MockSearchService) BlobsByProject(pid any, query string, opt *gitlab.SearchOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Blob, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, query, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BlobsByProject", varargs...)
	ret0, _ := ret[0].([]*gitlab.Blob)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BlobsByProject indicates an expected call of BlobsByProject.
func (mr *MockSearchServiceMockRecorder) BlobsByProject(pid, query, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, query, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlobsByProject", reflect.TypeOf((*MockSearchService)(nil).BlobsByProject), varargs...)
}

// Commits mocks base method.
func (m *MockSearchService) Commits(query string, opt *gitlab.SearchOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Commit, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{query, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Commits", varargs...)
	ret0, _ := ret[0].([]*gitlab.Commit)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Commits indicates an expected call of Commits.
func (mr *MockSearchServiceMockRecorder) Commits(query, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commits", reflect.TypeOf((*MockSearchService)(nil).Commits), varargs...)
}

// CommitsByGroup mocks base method.
func (m *MockSearchService) CommitsByGroup(gid any, query string, opt *gitlab.SearchOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Commit, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, query, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommitsByGroup", varargs...)
	ret0, _ := ret[0].([]*gitlab.Commit)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CommitsByGroup indicates an expected call of CommitsByGroup.
func (mr *MockSearchServiceMockRecorder) CommitsByGroup(gid, query, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, query, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitsByGroup", reflect.TypeOf((*MockSearchService)(nil).CommitsByGroup), varargs...)
}

// CommitsByProject mocks base method.
func (m *MockSearchService) CommitsByProject(pid any, query string, opt *gitlab.SearchOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Commit, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, query, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommitsByProject", varargs...)
	ret0, _ := ret[0].([]*gitlab.Commit)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CommitsByProject indicates an expected call of CommitsByProject.
func (mr *MockSearchServiceMockRecorder) CommitsByProject(pid, query, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, query, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitsByProject", reflect.TypeOf((*MockSearchService)(nil).CommitsByProject), varargs...)
}

// Issues mocks base method.
func (m *MockSearchService) Issues(query string, opt *gitlab.SearchOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Issue, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{query, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Issues", varargs...)
	ret0, _ := ret[0].([]*gitlab.Issue)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Issues indicates an expected call of Issues.
func (mr *MockSearchServiceMockRecorder) Issues(query, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Issues", reflect.TypeOf((*MockSearchService)(nil).Issues), varargs...)
}

// IssuesByGroup mocks base method.
func (m *MockSearchService) IssuesByGroup(gid any, query string, opt *gitlab.SearchOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Issue, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, query, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IssuesByGroup", varargs...)
	ret0, _ := ret[0].([]*gitlab.Issue)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IssuesByGroup indicates an expected call of IssuesByGroup.
func (mr *MockSearchServiceMockRecorder) IssuesByGroup(gid, query, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, query, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssuesByGroup", reflect.TypeOf((*MockSearchService)(nil).IssuesByGroup), varargs...)
}

// IssuesByProject mocks base method.
func (m *MockSearchService) IssuesByProject(pid any, query string, opt *gitlab.SearchOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Issue, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, query, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IssuesByProject", varargs...)
	ret0, _ := ret[0].([]*gitlab.Issue)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IssuesByProject indicates an expected call of IssuesByProject.
func (mr *MockSearchServiceMockRecorder) IssuesByProject(pid, query, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, query, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssuesByProject", reflect.TypeOf((*MockSearchService)(nil).IssuesByProject), varargs...)
}

// MergeRequests mocks base method.
func (m *MockSearchService) MergeRequests(query string, opt *gitlab.SearchOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.MergeRequest, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{query, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MergeRequests", varargs...)
	ret0, _ := ret[0].([]*gitlab.MergeRequest)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MergeRequests indicates an expected call of MergeRequests.
func (mr *MockSearchServiceMockRecorder) MergeRequests(query, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeRequests", reflect.TypeOf((*MockSearchService)(nil).MergeRequests), varargs...)
}

// MergeRequestsByGroup mocks base method.
func (m *MockSearchService) MergeRequestsByGroup(gid any, query string, opt *gitlab.SearchOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.MergeRequest, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, query, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MergeRequestsByGroup", varargs...)
	ret0, _ := ret[0].([]*gitlab.MergeRequest)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MergeRequestsByGroup indicates an expected call of MergeRequestsByGroup.
func (mr *MockSearchServiceMockRecorder) MergeRequestsByGroup(gid, query, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, query, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeRequestsByGroup", reflect.TypeOf((*MockSearchService)(nil).MergeRequestsByGroup), varargs...)
}

// MergeRequestsByProject mocks base method.
func (m *MockSearchService) MergeRequestsByProject(pid any, query string, opt *gitlab.SearchOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.MergeRequest, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, query, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MergeRequestsByProject", varargs...)
	ret0, _ := ret[0].([]*gitlab.MergeRequest)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MergeRequestsByProject indicates an expected call of MergeRequestsByProject.
func (mr *MockSearchServiceMockRecorder) MergeRequestsByProject(pid, query, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, query, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeRequestsByProject", reflect.TypeOf((*MockSearchService)(nil).MergeRequestsByProject), varargs...)
}

// Milestones mocks base method.
func (m *MockSearchService) Milestones(query string, opt *gitlab.SearchOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Milestone, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{query, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Milestones", varargs...)
	ret0, _ := ret[0].([]*gitlab.Milestone)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Milestones indicates an expected call of Milestones.
func (mr *MockSearchServiceMockRecorder) Milestones(query, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Milestones", reflect.TypeOf((*MockSearchService)(nil).Milestones), varargs...)
}

// MilestonesByGroup mocks base method.
func (m *MockSearchService) MilestonesByGroup(gid any, query string, opt *gitlab.SearchOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Milestone, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, query, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MilestonesByGroup", varargs...)
	ret0, _ := ret[0].([]*gitlab.Milestone)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MilestonesByGroup indicates an expected call of MilestonesByGroup.
func (mr *MockSearchServiceMockRecorder) MilestonesByGroup(gid, query, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, query, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MilestonesByGroup", reflect.TypeOf((*MockSearchService)(nil).MilestonesByGroup), varargs...)
}

// MilestonesByProject mocks base method.
func (m *MockSearchService) MilestonesByProject(pid any, query string, opt *gitlab.SearchOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Milestone, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, query, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MilestonesByProject", varargs...)
	ret0, _ := ret[0].([]*gitlab.Milestone)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MilestonesByProject indicates an expected call of MilestonesByProject.
func (mr *MockSearchServiceMockRecorder) MilestonesByProject(pid, query, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, query, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MilestonesByProject", reflect.TypeOf((*MockSearchService)(nil).MilestonesByProject), varargs...)
}

// NotesByProject mocks base method.
func (m *MockSearchService) NotesByProject(pid any, query string, opt *gitlab.SearchOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Note, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, query, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NotesByProject", varargs...)
	ret0, _ := ret[0].([]*gitlab.Note)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NotesByProject indicates an expected call of NotesByProject.
func (mr *MockSearchServiceMockRecorder) NotesByProject(pid, query, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, query, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotesByProject", reflect.TypeOf((*MockSearchService)(nil).NotesByProject), varargs...)
}

// Projects mocks base method.
func (m *MockSearchService) Projects(query string, opt *gitlab.SearchOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Project, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{query, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Projects", varargs...)
	ret0, _ := ret[0].([]*gitlab.Project)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Projects indicates an expected call of Projects.
func (mr *MockSearchServiceMockRecorder) Projects(query, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Projects", reflect.TypeOf((*MockSearchService)(nil).Projects), varargs...)
}

// ProjectsByGroup mocks base method.
func (m *MockSearchService) ProjectsByGroup(gid any, query string, opt *gitlab.SearchOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Project, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, query, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProjectsByGroup", varargs...)
	ret0, _ := ret[0].([]*gitlab.Project)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProjectsByGroup indicates an expected call of ProjectsByGroup.
func (mr *MockSearchServiceMockRecorder) ProjectsByGroup(gid, query, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, query, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectsByGroup", reflect.TypeOf((*MockSearchService)(nil).ProjectsByGroup), varargs...)
}

// SnippetBlobs mocks base method.
func (m *MockSearchService) SnippetBlobs(query string, opt *gitlab.SearchOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Snippet, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{query, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SnippetBlobs", varargs...)
	ret0, _ := ret[0].([]*gitlab.Snippet)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SnippetBlobs indicates an expected call of SnippetBlobs.
func (mr *MockSearchServiceMockRecorder) SnippetBlobs(query, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnippetBlobs", reflect.TypeOf((*MockSearchService)(nil).SnippetBlobs), varargs...)
}

// SnippetTitles mocks base method.
func (m *MockSearchService) SnippetTitles(query string, opt *gitlab.SearchOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Snippet, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{query, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SnippetTitles", varargs...)
	ret0, _ := ret[0].([]*gitlab.Snippet)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SnippetTitles indicates an expected call of SnippetTitles.
func (mr *MockSearchServiceMockRecorder) SnippetTitles(query, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnippetTitles", reflect.TypeOf((*MockSearchService)(nil).SnippetTitles), varargs...)
}

// Users mocks base method.
func (m *MockSearchService) Users(query string, opt *gitlab.SearchOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.User, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{query, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Users", varargs...)
	ret0, _ := ret[0].([]*gitlab.User)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Users indicates an expected call of Users.
func (mr *MockSearchServiceMockRecorder) Users(query, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockSearchService)(nil).Users), varargs...)
}

// UsersByGroup mocks base method.
func (m *MockSearchService) UsersByGroup(gid any, query string, opt *gitlab.SearchOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.User, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, query, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UsersByGroup", varargs...)
	ret0, _ := ret[0].([]*gitlab.User)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UsersByGroup indicates an expected call of UsersByGroup.
func (mr *MockSearchServiceMockRecorder) UsersByGroup(gid, query, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, query, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersByGroup", reflect.TypeOf((*MockSearchService)(nil).UsersByGroup), varargs...)
}

// UsersByProject mocks base method.
func (m *MockSearchService) UsersByProject(pid any, query string, opt *gitlab.SearchOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.User, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, query, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UsersByProject", varargs...)
	ret0, _ := ret[0].([]*gitlab.User)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UsersByProject indicates an expected call of UsersByProject.
func (mr *MockSearchServiceMockRecorder) UsersByProject(pid, query, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, query, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersByProject", reflect.TypeOf((*MockSearchService)(nil).UsersByProject), varargs...)
}

// WikiBlobs mocks base method.
func (m *MockSearchService) WikiBlobs(query string, opt *gitlab.SearchOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Wiki, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{query, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WikiBlobs", varargs...)
	ret0, _ := ret[0].([]*gitlab.Wiki)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WikiBlobs indicates an expected call of WikiBlobs.
func (mr *MockSearchServiceMockRecorder) WikiBlobs(query, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WikiBlobs", reflect.TypeOf((*MockSearchService)(nil).WikiBlobs), varargs...)
}

// WikiBlobsByGroup mocks base method.
func (m *MockSearchService) WikiBlobsByGroup(gid any, query string, opt *gitlab.SearchOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Wiki, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, query, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WikiBlobsByGroup", varargs...)
	ret0, _ := ret[0].([]*gitlab.Wiki)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WikiBlobsByGroup indicates an expected call of WikiBlobsByGroup.
func (mr *MockSearchServiceMockRecorder) WikiBlobsByGroup(gid, query, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, query, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WikiBlobsByGroup", reflect.TypeOf((*MockSearchService)(nil).WikiBlobsByGroup), varargs...)
}

// WikiBlobsByProject mocks base method.
func (m *MockSearchService) WikiBlobsByProject(pid any, query string, opt *gitlab.SearchOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Wiki, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, query, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WikiBlobsByProject", varargs...)
	ret0, _ := ret[0].([]*gitlab.Wiki)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WikiBlobsByProject indicates an expected call of WikiBlobsByProject.
func (mr *MockSearchServiceMockRecorder) WikiBlobsByProject(pid, query, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, query, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WikiBlobsByProject", reflect.TypeOf((*MockSearchService)(nil).WikiBlobsByProject), varargs...)
}
