// Code generated by MockGen. DO NOT EDIT.
// Source: accessrequestsservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=accessrequestsservice_inf.go -destination=mocks/accessrequestsservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockAccessRequestsService is a mock of AccessRequestsService interface.
type MockAccessRequestsService struct {
	ctrl     *gomock.Controller
	recorder *MockAccessRequestsServiceMockRecorder
	isgomock struct{}
}

// MockAccessRequestsServiceMockRecorder is the mock recorder for MockAccessRequestsService.
type MockAccessRequestsServiceMockRecorder struct {
	mock *MockAccessRequestsService
}

// NewMockAccessRequestsService creates a new mock instance.
func NewMockAccessRequestsService(ctrl *gomock.Controller) *MockAccessRequestsService {
	mock := &MockAccessRequestsService{ctrl: ctrl}
	mock.recorder = &MockAccessRequestsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessRequestsService) EXPECT() *MockAccessRequestsServiceMockRecorder {
	return m.recorder
}

// ApproveGroupAccessRequest mocks base method.
func (m *MockAccessRequestsService) ApproveGroupAccessRequest(gid any, user int, opt *gitlab.ApproveAccessRequestOptions, options ...gitlab.RequestOptionFunc) (*gitlab.AccessRequest, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, user, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApproveGroupAccessRequest", varargs...)
	ret0, _ := ret[0].(*gitlab.AccessRequest)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ApproveGroupAccessRequest indicates an expected call of ApproveGroupAccessRequest.
func (mr *MockAccessRequestsServiceMockRecorder) ApproveGroupAccessRequest(gid, user, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, user, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveGroupAccessRequest", reflect.TypeOf((*MockAccessRequestsService)(nil).ApproveGroupAccessRequest), varargs...)
}

// ApproveProjectAccessRequest mocks base method.
func (m *MockAccessRequestsService) ApproveProjectAccessRequest(pid any, user int, opt *gitlab.ApproveAccessRequestOptions, options ...gitlab.RequestOptionFunc) (*gitlab.AccessRequest, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, user, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApproveProjectAccessRequest", varargs...)
	ret0, _ := ret[0].(*gitlab.AccessRequest)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ApproveProjectAccessRequest indicates an expected call of ApproveProjectAccessRequest.
func (mr *MockAccessRequestsServiceMockRecorder) ApproveProjectAccessRequest(pid, user, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, user, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveProjectAccessRequest", reflect.TypeOf((*MockAccessRequestsService)(nil).ApproveProjectAccessRequest), varargs...)
}

// DenyGroupAccessRequest mocks base method.
func (m *MockAccessRequestsService) DenyGroupAccessRequest(gid any, user int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, user}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DenyGroupAccessRequest", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DenyGroupAccessRequest indicates an expected call of DenyGroupAccessRequest.
func (mr *MockAccessRequestsServiceMockRecorder) DenyGroupAccessRequest(gid, user any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, user}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DenyGroupAccessRequest", reflect.TypeOf((*MockAccessRequestsService)(nil).DenyGroupAccessRequest), varargs...)
}

// DenyProjectAccessRequest mocks base method.
func (m *MockAccessRequestsService) DenyProjectAccessRequest(pid any, user int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, user}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DenyProjectAccessRequest", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DenyProjectAccessRequest indicates an expected call of DenyProjectAccessRequest.
func (mr *MockAccessRequestsServiceMockRecorder) DenyProjectAccessRequest(pid, user any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, user}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DenyProjectAccessRequest", reflect.TypeOf((*MockAccessRequestsService)(nil).DenyProjectAccessRequest), varargs...)
}

// ListGroupAccessRequests mocks base method.
func (m *MockAccessRequestsService) ListGroupAccessRequests(gid any, opt *gitlab.ListAccessRequestsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.AccessRequest, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupAccessRequests", varargs...)
	ret0, _ := ret[0].([]*gitlab.AccessRequest)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupAccessRequests indicates an expected call of ListGroupAccessRequests.
func (mr *MockAccessRequestsServiceMockRecorder) ListGroupAccessRequests(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupAccessRequests", reflect.TypeOf((*MockAccessRequestsService)(nil).ListGroupAccessRequests), varargs...)
}

// ListProjectAccessRequests mocks base method.
func (m *MockAccessRequestsService) ListProjectAccessRequests(pid any, opt *gitlab.ListAccessRequestsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.AccessRequest, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectAccessRequests", varargs...)
	ret0, _ := ret[0].([]*gitlab.AccessRequest)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectAccessRequests indicates an expected call of ListProjectAccessRequests.
func (mr *MockAccessRequestsServiceMockRecorder) ListProjectAccessRequests(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectAccessRequests", reflect.TypeOf((*MockAccessRequestsService)(nil).ListProjectAccessRequests), varargs...)
}

// RequestGroupAccess mocks base method.
func (m *MockAccessRequestsService) RequestGroupAccess(gid any, options ...gitlab.RequestOptionFunc) (*gitlab.AccessRequest, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestGroupAccess", varargs...)
	ret0, _ := ret[0].(*gitlab.AccessRequest)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RequestGroupAccess indicates an expected call of RequestGroupAccess.
func (mr *MockAccessRequestsServiceMockRecorder) RequestGroupAccess(gid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestGroupAccess", reflect.TypeOf((*MockAccessRequestsService)(nil).RequestGroupAccess), varargs...)
}

// RequestProjectAccess mocks base method.
func (m *MockAccessRequestsService) RequestProjectAccess(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.AccessRequest, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestProjectAccess", varargs...)
	ret0, _ := ret[0].(*gitlab.AccessRequest)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RequestProjectAccess indicates an expected call of RequestProjectAccess.
func (mr *MockAccessRequestsServiceMockRecorder) RequestProjectAccess(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestProjectAccess", reflect.TypeOf((*MockAccessRequestsService)(nil).RequestProjectAccess), varargs...)
}
