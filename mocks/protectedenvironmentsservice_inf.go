// Code generated by MockGen. DO NOT EDIT.
// Source: protectedenvironmentsservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=protectedenvironmentsservice_inf.go -destination=mocks/protectedenvironmentsservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockProtectedEnvironmentsService is a mock of ProtectedEnvironmentsService interface.
type MockProtectedEnvironmentsService struct {
	ctrl     *gomock.Controller
	recorder *MockProtectedEnvironmentsServiceMockRecorder
	isgomock struct{}
}

// MockProtectedEnvironmentsServiceMockRecorder is the mock recorder for MockProtectedEnvironmentsService.
type MockProtectedEnvironmentsServiceMockRecorder struct {
	mock *MockProtectedEnvironmentsService
}

// NewMockProtectedEnvironmentsService creates a new mock instance.
func NewMockProtectedEnvironmentsService(ctrl *gomock.Controller) *MockProtectedEnvironmentsService {
	mock := &MockProtectedEnvironmentsService{ctrl: ctrl}
	mock.recorder = &MockProtectedEnvironmentsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProtectedEnvironmentsService) EXPECT() *MockProtectedEnvironmentsServiceMockRecorder {
	return m.recorder
}

// GetProtectedEnvironment mocks base method.
func (m *MockProtectedEnvironmentsService) GetProtectedEnvironment(pid any, environment string, options ...gitlab.RequestOptionFunc) (*gitlab.ProtectedEnvironment, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, environment}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProtectedEnvironment", varargs...)
	ret0, _ := ret[0].(*gitlab.ProtectedEnvironment)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProtectedEnvironment indicates an expected call of GetProtectedEnvironment.
func (mr *MockProtectedEnvironmentsServiceMockRecorder) GetProtectedEnvironment(pid, environment any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, environment}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProtectedEnvironment", reflect.TypeOf((*MockProtectedEnvironmentsService)(nil).GetProtectedEnvironment), varargs...)
}

// ListProtectedEnvironments mocks base method.
func (m *MockProtectedEnvironmentsService) ListProtectedEnvironments(pid any, opt *gitlab.ListProtectedEnvironmentsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProtectedEnvironment, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProtectedEnvironments", varargs...)
	ret0, _ := ret[0].([]*gitlab.ProtectedEnvironment)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProtectedEnvironments indicates an expected call of ListProtectedEnvironments.
func (mr *MockProtectedEnvironmentsServiceMockRecorder) ListProtectedEnvironments(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProtectedEnvironments", reflect.TypeOf((*MockProtectedEnvironmentsService)(nil).ListProtectedEnvironments), varargs...)
}

// ProtectRepositoryEnvironments mocks base method.
func (m *MockProtectedEnvironmentsService) ProtectRepositoryEnvironments(pid any, opt *gitlab.ProtectRepositoryEnvironmentsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProtectedEnvironment, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProtectRepositoryEnvironments", varargs...)
	ret0, _ := ret[0].(*gitlab.ProtectedEnvironment)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProtectRepositoryEnvironments indicates an expected call of ProtectRepositoryEnvironments.
func (mr *MockProtectedEnvironmentsServiceMockRecorder) ProtectRepositoryEnvironments(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtectRepositoryEnvironments", reflect.TypeOf((*MockProtectedEnvironmentsService)(nil).ProtectRepositoryEnvironments), varargs...)
}

// UnprotectEnvironment mocks base method.
func (m *MockProtectedEnvironmentsService) UnprotectEnvironment(pid any, environment string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, environment}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnprotectEnvironment", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnprotectEnvironment indicates an expected call of UnprotectEnvironment.
func (mr *MockProtectedEnvironmentsServiceMockRecorder) UnprotectEnvironment(pid, environment any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, environment}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnprotectEnvironment", reflect.TypeOf((*MockProtectedEnvironmentsService)(nil).UnprotectEnvironment), varargs...)
}

// UpdateProtectedEnvironments mocks base method.
func (m *MockProtectedEnvironmentsService) UpdateProtectedEnvironments(pid any, environment string, opt *gitlab.UpdateProtectedEnvironmentsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProtectedEnvironment, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, environment, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProtectedEnvironments", varargs...)
	ret0, _ := ret[0].(*gitlab.ProtectedEnvironment)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateProtectedEnvironments indicates an expected call of UpdateProtectedEnvironments.
func (mr *MockProtectedEnvironmentsServiceMockRecorder) UpdateProtectedEnvironments(pid, environment, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, environment, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProtectedEnvironments", reflect.TypeOf((*MockProtectedEnvironmentsService)(nil).UpdateProtectedEnvironments), varargs...)
}
