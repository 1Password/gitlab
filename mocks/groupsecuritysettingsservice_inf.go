// Code generated by MockGen. DO NOT EDIT.
// Source: groupsecuritysettingsservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=groupsecuritysettingsservice_inf.go -destination=mocks/groupsecuritysettingsservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupSecuritySettingsService is a mock of GroupSecuritySettingsService interface.
type MockGroupSecuritySettingsService struct {
	ctrl     *gomock.Controller
	recorder *MockGroupSecuritySettingsServiceMockRecorder
	isgomock struct{}
}

// MockGroupSecuritySettingsServiceMockRecorder is the mock recorder for MockGroupSecuritySettingsService.
type MockGroupSecuritySettingsServiceMockRecorder struct {
	mock *MockGroupSecuritySettingsService
}

// NewMockGroupSecuritySettingsService creates a new mock instance.
func NewMockGroupSecuritySettingsService(ctrl *gomock.Controller) *MockGroupSecuritySettingsService {
	mock := &MockGroupSecuritySettingsService{ctrl: ctrl}
	mock.recorder = &MockGroupSecuritySettingsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupSecuritySettingsService) EXPECT() *MockGroupSecuritySettingsServiceMockRecorder {
	return m.recorder
}

// UpdateSecretPushProtectionEnabledSetting mocks base method.
func (m *MockGroupSecuritySettingsService) UpdateSecretPushProtectionEnabledSetting(gid any, opt gitlab.UpdateGroupSecuritySettingsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupSecuritySettings, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSecretPushProtectionEnabledSetting", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupSecuritySettings)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateSecretPushProtectionEnabledSetting indicates an expected call of UpdateSecretPushProtectionEnabledSetting.
func (mr *MockGroupSecuritySettingsServiceMockRecorder) UpdateSecretPushProtectionEnabledSetting(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecretPushProtectionEnabledSetting", reflect.TypeOf((*MockGroupSecuritySettingsService)(nil).UpdateSecretPushProtectionEnabledSetting), varargs...)
}
