// Code generated by MockGen. DO NOT EDIT.
// Source: notesservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=notesservice_inf.go -destination=mocks/notesservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockNotesService is a mock of NotesService interface.
type MockNotesService struct {
	ctrl     *gomock.Controller
	recorder *MockNotesServiceMockRecorder
}

// MockNotesServiceMockRecorder is the mock recorder for MockNotesService.
type MockNotesServiceMockRecorder struct {
	mock *MockNotesService
}

// NewMockNotesService creates a new mock instance.
func NewMockNotesService(ctrl *gomock.Controller) *MockNotesService {
	mock := &MockNotesService{ctrl: ctrl}
	mock.recorder = &MockNotesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotesService) EXPECT() *MockNotesServiceMockRecorder {
	return m.recorder
}

// CreateEpicNote mocks base method.
func (m *MockNotesService) CreateEpicNote(gid any, epic int, opt *gitlab.CreateEpicNoteOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, epic, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEpicNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Note)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateEpicNote indicates an expected call of CreateEpicNote.
func (mr *MockNotesServiceMockRecorder) CreateEpicNote(gid, epic, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, epic, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEpicNote", reflect.TypeOf((*MockNotesService)(nil).CreateEpicNote), varargs...)
}

// CreateIssueNote mocks base method.
func (m *MockNotesService) CreateIssueNote(pid any, issue int, opt *gitlab.CreateIssueNoteOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, issue, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIssueNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Note)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateIssueNote indicates an expected call of CreateIssueNote.
func (mr *MockNotesServiceMockRecorder) CreateIssueNote(pid, issue, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, issue, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssueNote", reflect.TypeOf((*MockNotesService)(nil).CreateIssueNote), varargs...)
}

// CreateMergeRequestNote mocks base method.
func (m *MockNotesService) CreateMergeRequestNote(pid any, mergeRequest int, opt *gitlab.CreateMergeRequestNoteOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequest, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMergeRequestNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Note)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateMergeRequestNote indicates an expected call of CreateMergeRequestNote.
func (mr *MockNotesServiceMockRecorder) CreateMergeRequestNote(pid, mergeRequest, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequest, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMergeRequestNote", reflect.TypeOf((*MockNotesService)(nil).CreateMergeRequestNote), varargs...)
}

// CreateSnippetNote mocks base method.
func (m *MockNotesService) CreateSnippetNote(pid any, snippet int, opt *gitlab.CreateSnippetNoteOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, snippet, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSnippetNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Note)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSnippetNote indicates an expected call of CreateSnippetNote.
func (mr *MockNotesServiceMockRecorder) CreateSnippetNote(pid, snippet, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, snippet, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnippetNote", reflect.TypeOf((*MockNotesService)(nil).CreateSnippetNote), varargs...)
}

// DeleteEpicNote mocks base method.
func (m *MockNotesService) DeleteEpicNote(gid any, epic, note int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, epic, note}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEpicNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEpicNote indicates an expected call of DeleteEpicNote.
func (mr *MockNotesServiceMockRecorder) DeleteEpicNote(gid, epic, note any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, epic, note}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEpicNote", reflect.TypeOf((*MockNotesService)(nil).DeleteEpicNote), varargs...)
}

// DeleteIssueNote mocks base method.
func (m *MockNotesService) DeleteIssueNote(pid any, issue, note int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, issue, note}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIssueNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIssueNote indicates an expected call of DeleteIssueNote.
func (mr *MockNotesServiceMockRecorder) DeleteIssueNote(pid, issue, note any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, issue, note}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIssueNote", reflect.TypeOf((*MockNotesService)(nil).DeleteIssueNote), varargs...)
}

// DeleteMergeRequestNote mocks base method.
func (m *MockNotesService) DeleteMergeRequestNote(pid any, mergeRequest, note int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequest, note}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMergeRequestNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMergeRequestNote indicates an expected call of DeleteMergeRequestNote.
func (mr *MockNotesServiceMockRecorder) DeleteMergeRequestNote(pid, mergeRequest, note any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequest, note}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMergeRequestNote", reflect.TypeOf((*MockNotesService)(nil).DeleteMergeRequestNote), varargs...)
}

// DeleteSnippetNote mocks base method.
func (m *MockNotesService) DeleteSnippetNote(pid any, snippet, note int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, snippet, note}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSnippetNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSnippetNote indicates an expected call of DeleteSnippetNote.
func (mr *MockNotesServiceMockRecorder) DeleteSnippetNote(pid, snippet, note any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, snippet, note}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnippetNote", reflect.TypeOf((*MockNotesService)(nil).DeleteSnippetNote), varargs...)
}

// GetEpicNote mocks base method.
func (m *MockNotesService) GetEpicNote(gid any, epic, note int, options ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, epic, note}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEpicNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Note)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEpicNote indicates an expected call of GetEpicNote.
func (mr *MockNotesServiceMockRecorder) GetEpicNote(gid, epic, note any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, epic, note}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpicNote", reflect.TypeOf((*MockNotesService)(nil).GetEpicNote), varargs...)
}

// GetIssueNote mocks base method.
func (m *MockNotesService) GetIssueNote(pid any, issue, note int, options ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, issue, note}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIssueNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Note)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIssueNote indicates an expected call of GetIssueNote.
func (mr *MockNotesServiceMockRecorder) GetIssueNote(pid, issue, note any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, issue, note}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueNote", reflect.TypeOf((*MockNotesService)(nil).GetIssueNote), varargs...)
}

// GetMergeRequestNote mocks base method.
func (m *MockNotesService) GetMergeRequestNote(pid any, mergeRequest, note int, options ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequest, note}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMergeRequestNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Note)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMergeRequestNote indicates an expected call of GetMergeRequestNote.
func (mr *MockNotesServiceMockRecorder) GetMergeRequestNote(pid, mergeRequest, note any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequest, note}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergeRequestNote", reflect.TypeOf((*MockNotesService)(nil).GetMergeRequestNote), varargs...)
}

// GetSnippetNote mocks base method.
func (m *MockNotesService) GetSnippetNote(pid any, snippet, note int, options ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, snippet, note}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSnippetNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Note)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSnippetNote indicates an expected call of GetSnippetNote.
func (mr *MockNotesServiceMockRecorder) GetSnippetNote(pid, snippet, note any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, snippet, note}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnippetNote", reflect.TypeOf((*MockNotesService)(nil).GetSnippetNote), varargs...)
}

// ListEpicNotes mocks base method.
func (m *MockNotesService) ListEpicNotes(gid any, epic int, opt *gitlab.ListEpicNotesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Note, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, epic, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEpicNotes", varargs...)
	ret0, _ := ret[0].([]*gitlab.Note)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEpicNotes indicates an expected call of ListEpicNotes.
func (mr *MockNotesServiceMockRecorder) ListEpicNotes(gid, epic, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, epic, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEpicNotes", reflect.TypeOf((*MockNotesService)(nil).ListEpicNotes), varargs...)
}

// ListIssueNotes mocks base method.
func (m *MockNotesService) ListIssueNotes(pid any, issue int, opt *gitlab.ListIssueNotesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Note, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, issue, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIssueNotes", varargs...)
	ret0, _ := ret[0].([]*gitlab.Note)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListIssueNotes indicates an expected call of ListIssueNotes.
func (mr *MockNotesServiceMockRecorder) ListIssueNotes(pid, issue, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, issue, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssueNotes", reflect.TypeOf((*MockNotesService)(nil).ListIssueNotes), varargs...)
}

// ListMergeRequestNotes mocks base method.
func (m *MockNotesService) ListMergeRequestNotes(pid any, mergeRequest int, opt *gitlab.ListMergeRequestNotesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Note, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequest, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMergeRequestNotes", varargs...)
	ret0, _ := ret[0].([]*gitlab.Note)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMergeRequestNotes indicates an expected call of ListMergeRequestNotes.
func (mr *MockNotesServiceMockRecorder) ListMergeRequestNotes(pid, mergeRequest, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequest, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMergeRequestNotes", reflect.TypeOf((*MockNotesService)(nil).ListMergeRequestNotes), varargs...)
}

// ListSnippetNotes mocks base method.
func (m *MockNotesService) ListSnippetNotes(pid any, snippet int, opt *gitlab.ListSnippetNotesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Note, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, snippet, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSnippetNotes", varargs...)
	ret0, _ := ret[0].([]*gitlab.Note)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSnippetNotes indicates an expected call of ListSnippetNotes.
func (mr *MockNotesServiceMockRecorder) ListSnippetNotes(pid, snippet, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, snippet, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnippetNotes", reflect.TypeOf((*MockNotesService)(nil).ListSnippetNotes), varargs...)
}

// UpdateEpicNote mocks base method.
func (m *MockNotesService) UpdateEpicNote(gid any, epic, note int, opt *gitlab.UpdateEpicNoteOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, epic, note, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEpicNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Note)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateEpicNote indicates an expected call of UpdateEpicNote.
func (mr *MockNotesServiceMockRecorder) UpdateEpicNote(gid, epic, note, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, epic, note, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEpicNote", reflect.TypeOf((*MockNotesService)(nil).UpdateEpicNote), varargs...)
}

// UpdateIssueNote mocks base method.
func (m *MockNotesService) UpdateIssueNote(pid any, issue, note int, opt *gitlab.UpdateIssueNoteOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, issue, note, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIssueNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Note)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateIssueNote indicates an expected call of UpdateIssueNote.
func (mr *MockNotesServiceMockRecorder) UpdateIssueNote(pid, issue, note, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, issue, note, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIssueNote", reflect.TypeOf((*MockNotesService)(nil).UpdateIssueNote), varargs...)
}

// UpdateMergeRequestNote mocks base method.
func (m *MockNotesService) UpdateMergeRequestNote(pid any, mergeRequest, note int, opt *gitlab.UpdateMergeRequestNoteOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequest, note, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMergeRequestNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Note)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateMergeRequestNote indicates an expected call of UpdateMergeRequestNote.
func (mr *MockNotesServiceMockRecorder) UpdateMergeRequestNote(pid, mergeRequest, note, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequest, note, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMergeRequestNote", reflect.TypeOf((*MockNotesService)(nil).UpdateMergeRequestNote), varargs...)
}

// UpdateSnippetNote mocks base method.
func (m *MockNotesService) UpdateSnippetNote(pid any, snippet, note int, opt *gitlab.UpdateSnippetNoteOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, snippet, note, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSnippetNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Note)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateSnippetNote indicates an expected call of UpdateSnippetNote.
func (mr *MockNotesServiceMockRecorder) UpdateSnippetNote(pid, snippet, note, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, snippet, note, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnippetNote", reflect.TypeOf((*MockNotesService)(nil).UpdateSnippetNote), varargs...)
}
