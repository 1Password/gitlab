// Code generated by MockGen. DO NOT EDIT.
// Source: broadcastmessagesservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=broadcastmessagesservice_inf.go -destination=mocks/broadcastmessagesservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockBroadcastMessagesService is a mock of BroadcastMessagesService interface.
type MockBroadcastMessagesService struct {
	ctrl     *gomock.Controller
	recorder *MockBroadcastMessagesServiceMockRecorder
	isgomock struct{}
}

// MockBroadcastMessagesServiceMockRecorder is the mock recorder for MockBroadcastMessagesService.
type MockBroadcastMessagesServiceMockRecorder struct {
	mock *MockBroadcastMessagesService
}

// NewMockBroadcastMessagesService creates a new mock instance.
func NewMockBroadcastMessagesService(ctrl *gomock.Controller) *MockBroadcastMessagesService {
	mock := &MockBroadcastMessagesService{ctrl: ctrl}
	mock.recorder = &MockBroadcastMessagesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBroadcastMessagesService) EXPECT() *MockBroadcastMessagesServiceMockRecorder {
	return m.recorder
}

// CreateBroadcastMessage mocks base method.
func (m *MockBroadcastMessagesService) CreateBroadcastMessage(opt *gitlab.CreateBroadcastMessageOptions, options ...gitlab.RequestOptionFunc) (*gitlab.BroadcastMessage, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBroadcastMessage", varargs...)
	ret0, _ := ret[0].(*gitlab.BroadcastMessage)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateBroadcastMessage indicates an expected call of CreateBroadcastMessage.
func (mr *MockBroadcastMessagesServiceMockRecorder) CreateBroadcastMessage(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBroadcastMessage", reflect.TypeOf((*MockBroadcastMessagesService)(nil).CreateBroadcastMessage), varargs...)
}

// DeleteBroadcastMessage mocks base method.
func (m *MockBroadcastMessagesService) DeleteBroadcastMessage(broadcast int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{broadcast}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBroadcastMessage", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBroadcastMessage indicates an expected call of DeleteBroadcastMessage.
func (mr *MockBroadcastMessagesServiceMockRecorder) DeleteBroadcastMessage(broadcast any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{broadcast}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBroadcastMessage", reflect.TypeOf((*MockBroadcastMessagesService)(nil).DeleteBroadcastMessage), varargs...)
}

// GetBroadcastMessage mocks base method.
func (m *MockBroadcastMessagesService) GetBroadcastMessage(broadcast int, options ...gitlab.RequestOptionFunc) (*gitlab.BroadcastMessage, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{broadcast}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBroadcastMessage", varargs...)
	ret0, _ := ret[0].(*gitlab.BroadcastMessage)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBroadcastMessage indicates an expected call of GetBroadcastMessage.
func (mr *MockBroadcastMessagesServiceMockRecorder) GetBroadcastMessage(broadcast any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{broadcast}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBroadcastMessage", reflect.TypeOf((*MockBroadcastMessagesService)(nil).GetBroadcastMessage), varargs...)
}

// ListBroadcastMessages mocks base method.
func (m *MockBroadcastMessagesService) ListBroadcastMessages(opt *gitlab.ListBroadcastMessagesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.BroadcastMessage, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBroadcastMessages", varargs...)
	ret0, _ := ret[0].([]*gitlab.BroadcastMessage)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBroadcastMessages indicates an expected call of ListBroadcastMessages.
func (mr *MockBroadcastMessagesServiceMockRecorder) ListBroadcastMessages(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBroadcastMessages", reflect.TypeOf((*MockBroadcastMessagesService)(nil).ListBroadcastMessages), varargs...)
}

// UpdateBroadcastMessage mocks base method.
func (m *MockBroadcastMessagesService) UpdateBroadcastMessage(broadcast int, opt *gitlab.UpdateBroadcastMessageOptions, options ...gitlab.RequestOptionFunc) (*gitlab.BroadcastMessage, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{broadcast, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBroadcastMessage", varargs...)
	ret0, _ := ret[0].(*gitlab.BroadcastMessage)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateBroadcastMessage indicates an expected call of UpdateBroadcastMessage.
func (mr *MockBroadcastMessagesServiceMockRecorder) UpdateBroadcastMessage(broadcast, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{broadcast, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBroadcastMessage", reflect.TypeOf((*MockBroadcastMessagesService)(nil).UpdateBroadcastMessage), varargs...)
}
