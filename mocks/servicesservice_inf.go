// Code generated by MockGen. DO NOT EDIT.
// Source: servicesservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=servicesservice_inf.go -destination=mocks/servicesservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockServicesService is a mock of ServicesService interface.
type MockServicesService struct {
	ctrl     *gomock.Controller
	recorder *MockServicesServiceMockRecorder
}

// MockServicesServiceMockRecorder is the mock recorder for MockServicesService.
type MockServicesServiceMockRecorder struct {
	mock *MockServicesService
}

// NewMockServicesService creates a new mock instance.
func NewMockServicesService(ctrl *gomock.Controller) *MockServicesService {
	mock := &MockServicesService{ctrl: ctrl}
	mock.recorder = &MockServicesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicesService) EXPECT() *MockServicesServiceMockRecorder {
	return m.recorder
}

// DeleteCustomIssueTrackerService mocks base method.
func (m *MockServicesService) DeleteCustomIssueTrackerService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCustomIssueTrackerService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomIssueTrackerService indicates an expected call of DeleteCustomIssueTrackerService.
func (mr *MockServicesServiceMockRecorder) DeleteCustomIssueTrackerService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomIssueTrackerService", reflect.TypeOf((*MockServicesService)(nil).DeleteCustomIssueTrackerService), varargs...)
}

// DeleteDataDogService mocks base method.
func (m *MockServicesService) DeleteDataDogService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDataDogService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataDogService indicates an expected call of DeleteDataDogService.
func (mr *MockServicesServiceMockRecorder) DeleteDataDogService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataDogService", reflect.TypeOf((*MockServicesService)(nil).DeleteDataDogService), varargs...)
}

// DeleteDiscordService mocks base method.
func (m *MockServicesService) DeleteDiscordService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDiscordService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDiscordService indicates an expected call of DeleteDiscordService.
func (mr *MockServicesServiceMockRecorder) DeleteDiscordService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDiscordService", reflect.TypeOf((*MockServicesService)(nil).DeleteDiscordService), varargs...)
}

// DeleteDroneCIService mocks base method.
func (m *MockServicesService) DeleteDroneCIService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDroneCIService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDroneCIService indicates an expected call of DeleteDroneCIService.
func (mr *MockServicesServiceMockRecorder) DeleteDroneCIService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDroneCIService", reflect.TypeOf((*MockServicesService)(nil).DeleteDroneCIService), varargs...)
}

// DeleteEmailsOnPushService mocks base method.
func (m *MockServicesService) DeleteEmailsOnPushService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEmailsOnPushService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmailsOnPushService indicates an expected call of DeleteEmailsOnPushService.
func (mr *MockServicesServiceMockRecorder) DeleteEmailsOnPushService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailsOnPushService", reflect.TypeOf((*MockServicesService)(nil).DeleteEmailsOnPushService), varargs...)
}

// DeleteExternalWikiService mocks base method.
func (m *MockServicesService) DeleteExternalWikiService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteExternalWikiService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExternalWikiService indicates an expected call of DeleteExternalWikiService.
func (mr *MockServicesServiceMockRecorder) DeleteExternalWikiService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExternalWikiService", reflect.TypeOf((*MockServicesService)(nil).DeleteExternalWikiService), varargs...)
}

// DeleteGitLabCIService mocks base method.
func (m *MockServicesService) DeleteGitLabCIService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGitLabCIService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGitLabCIService indicates an expected call of DeleteGitLabCIService.
func (mr *MockServicesServiceMockRecorder) DeleteGitLabCIService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGitLabCIService", reflect.TypeOf((*MockServicesService)(nil).DeleteGitLabCIService), varargs...)
}

// DeleteGithubService mocks base method.
func (m *MockServicesService) DeleteGithubService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGithubService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGithubService indicates an expected call of DeleteGithubService.
func (mr *MockServicesServiceMockRecorder) DeleteGithubService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGithubService", reflect.TypeOf((*MockServicesService)(nil).DeleteGithubService), varargs...)
}

// DeleteHarborService mocks base method.
func (m *MockServicesService) DeleteHarborService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteHarborService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHarborService indicates an expected call of DeleteHarborService.
func (mr *MockServicesServiceMockRecorder) DeleteHarborService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHarborService", reflect.TypeOf((*MockServicesService)(nil).DeleteHarborService), varargs...)
}

// DeleteHipChatService mocks base method.
func (m *MockServicesService) DeleteHipChatService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteHipChatService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHipChatService indicates an expected call of DeleteHipChatService.
func (mr *MockServicesServiceMockRecorder) DeleteHipChatService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHipChatService", reflect.TypeOf((*MockServicesService)(nil).DeleteHipChatService), varargs...)
}

// DeleteJenkinsCIService mocks base method.
func (m *MockServicesService) DeleteJenkinsCIService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteJenkinsCIService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJenkinsCIService indicates an expected call of DeleteJenkinsCIService.
func (mr *MockServicesServiceMockRecorder) DeleteJenkinsCIService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJenkinsCIService", reflect.TypeOf((*MockServicesService)(nil).DeleteJenkinsCIService), varargs...)
}

// DeleteJiraService mocks base method.
func (m *MockServicesService) DeleteJiraService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteJiraService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJiraService indicates an expected call of DeleteJiraService.
func (mr *MockServicesServiceMockRecorder) DeleteJiraService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJiraService", reflect.TypeOf((*MockServicesService)(nil).DeleteJiraService), varargs...)
}

// DeleteMattermostService mocks base method.
func (m *MockServicesService) DeleteMattermostService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMattermostService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMattermostService indicates an expected call of DeleteMattermostService.
func (mr *MockServicesServiceMockRecorder) DeleteMattermostService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMattermostService", reflect.TypeOf((*MockServicesService)(nil).DeleteMattermostService), varargs...)
}

// DeleteMattermostSlashCommandsService mocks base method.
func (m *MockServicesService) DeleteMattermostSlashCommandsService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMattermostSlashCommandsService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMattermostSlashCommandsService indicates an expected call of DeleteMattermostSlashCommandsService.
func (mr *MockServicesServiceMockRecorder) DeleteMattermostSlashCommandsService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMattermostSlashCommandsService", reflect.TypeOf((*MockServicesService)(nil).DeleteMattermostSlashCommandsService), varargs...)
}

// DeleteMicrosoftTeamsService mocks base method.
func (m *MockServicesService) DeleteMicrosoftTeamsService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMicrosoftTeamsService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMicrosoftTeamsService indicates an expected call of DeleteMicrosoftTeamsService.
func (mr *MockServicesServiceMockRecorder) DeleteMicrosoftTeamsService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMicrosoftTeamsService", reflect.TypeOf((*MockServicesService)(nil).DeleteMicrosoftTeamsService), varargs...)
}

// DeletePipelinesEmailService mocks base method.
func (m *MockServicesService) DeletePipelinesEmailService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePipelinesEmailService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePipelinesEmailService indicates an expected call of DeletePipelinesEmailService.
func (mr *MockServicesServiceMockRecorder) DeletePipelinesEmailService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipelinesEmailService", reflect.TypeOf((*MockServicesService)(nil).DeletePipelinesEmailService), varargs...)
}

// DeletePrometheusService mocks base method.
func (m *MockServicesService) DeletePrometheusService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePrometheusService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePrometheusService indicates an expected call of DeletePrometheusService.
func (mr *MockServicesServiceMockRecorder) DeletePrometheusService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrometheusService", reflect.TypeOf((*MockServicesService)(nil).DeletePrometheusService), varargs...)
}

// DeleteRedmineService mocks base method.
func (m *MockServicesService) DeleteRedmineService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRedmineService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRedmineService indicates an expected call of DeleteRedmineService.
func (mr *MockServicesServiceMockRecorder) DeleteRedmineService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRedmineService", reflect.TypeOf((*MockServicesService)(nil).DeleteRedmineService), varargs...)
}

// DeleteSlackService mocks base method.
func (m *MockServicesService) DeleteSlackService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSlackService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSlackService indicates an expected call of DeleteSlackService.
func (mr *MockServicesServiceMockRecorder) DeleteSlackService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlackService", reflect.TypeOf((*MockServicesService)(nil).DeleteSlackService), varargs...)
}

// DeleteSlackSlashCommandsService mocks base method.
func (m *MockServicesService) DeleteSlackSlashCommandsService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSlackSlashCommandsService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSlackSlashCommandsService indicates an expected call of DeleteSlackSlashCommandsService.
func (mr *MockServicesServiceMockRecorder) DeleteSlackSlashCommandsService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlackSlashCommandsService", reflect.TypeOf((*MockServicesService)(nil).DeleteSlackSlashCommandsService), varargs...)
}

// DeleteTelegramService mocks base method.
func (m *MockServicesService) DeleteTelegramService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTelegramService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTelegramService indicates an expected call of DeleteTelegramService.
func (mr *MockServicesServiceMockRecorder) DeleteTelegramService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTelegramService", reflect.TypeOf((*MockServicesService)(nil).DeleteTelegramService), varargs...)
}

// DeleteYouTrackService mocks base method.
func (m *MockServicesService) DeleteYouTrackService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteYouTrackService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteYouTrackService indicates an expected call of DeleteYouTrackService.
func (mr *MockServicesServiceMockRecorder) DeleteYouTrackService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteYouTrackService", reflect.TypeOf((*MockServicesService)(nil).DeleteYouTrackService), varargs...)
}

// DisableSlackApplication mocks base method.
func (m *MockServicesService) DisableSlackApplication(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableSlackApplication", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableSlackApplication indicates an expected call of DisableSlackApplication.
func (mr *MockServicesServiceMockRecorder) DisableSlackApplication(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableSlackApplication", reflect.TypeOf((*MockServicesService)(nil).DisableSlackApplication), varargs...)
}

// GetCustomIssueTrackerService mocks base method.
func (m *MockServicesService) GetCustomIssueTrackerService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.CustomIssueTrackerService, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCustomIssueTrackerService", varargs...)
	ret0, _ := ret[0].(*gitlab.CustomIssueTrackerService)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCustomIssueTrackerService indicates an expected call of GetCustomIssueTrackerService.
func (mr *MockServicesServiceMockRecorder) GetCustomIssueTrackerService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomIssueTrackerService", reflect.TypeOf((*MockServicesService)(nil).GetCustomIssueTrackerService), varargs...)
}

// GetDataDogService mocks base method.
func (m *MockServicesService) GetDataDogService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.DataDogService, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataDogService", varargs...)
	ret0, _ := ret[0].(*gitlab.DataDogService)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDataDogService indicates an expected call of GetDataDogService.
func (mr *MockServicesServiceMockRecorder) GetDataDogService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataDogService", reflect.TypeOf((*MockServicesService)(nil).GetDataDogService), varargs...)
}

// GetDiscordService mocks base method.
func (m *MockServicesService) GetDiscordService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.DiscordService, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDiscordService", varargs...)
	ret0, _ := ret[0].(*gitlab.DiscordService)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDiscordService indicates an expected call of GetDiscordService.
func (mr *MockServicesServiceMockRecorder) GetDiscordService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscordService", reflect.TypeOf((*MockServicesService)(nil).GetDiscordService), varargs...)
}

// GetDroneCIService mocks base method.
func (m *MockServicesService) GetDroneCIService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.DroneCIService, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDroneCIService", varargs...)
	ret0, _ := ret[0].(*gitlab.DroneCIService)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDroneCIService indicates an expected call of GetDroneCIService.
func (mr *MockServicesServiceMockRecorder) GetDroneCIService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDroneCIService", reflect.TypeOf((*MockServicesService)(nil).GetDroneCIService), varargs...)
}

// GetEmailsOnPushService mocks base method.
func (m *MockServicesService) GetEmailsOnPushService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.EmailsOnPushService, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEmailsOnPushService", varargs...)
	ret0, _ := ret[0].(*gitlab.EmailsOnPushService)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEmailsOnPushService indicates an expected call of GetEmailsOnPushService.
func (mr *MockServicesServiceMockRecorder) GetEmailsOnPushService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailsOnPushService", reflect.TypeOf((*MockServicesService)(nil).GetEmailsOnPushService), varargs...)
}

// GetExternalWikiService mocks base method.
func (m *MockServicesService) GetExternalWikiService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.ExternalWikiService, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExternalWikiService", varargs...)
	ret0, _ := ret[0].(*gitlab.ExternalWikiService)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetExternalWikiService indicates an expected call of GetExternalWikiService.
func (mr *MockServicesServiceMockRecorder) GetExternalWikiService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalWikiService", reflect.TypeOf((*MockServicesService)(nil).GetExternalWikiService), varargs...)
}

// GetGithubService mocks base method.
func (m *MockServicesService) GetGithubService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.GithubService, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGithubService", varargs...)
	ret0, _ := ret[0].(*gitlab.GithubService)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGithubService indicates an expected call of GetGithubService.
func (mr *MockServicesServiceMockRecorder) GetGithubService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGithubService", reflect.TypeOf((*MockServicesService)(nil).GetGithubService), varargs...)
}

// GetHarborService mocks base method.
func (m *MockServicesService) GetHarborService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.HarborService, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHarborService", varargs...)
	ret0, _ := ret[0].(*gitlab.HarborService)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetHarborService indicates an expected call of GetHarborService.
func (mr *MockServicesServiceMockRecorder) GetHarborService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHarborService", reflect.TypeOf((*MockServicesService)(nil).GetHarborService), varargs...)
}

// GetJenkinsCIService mocks base method.
func (m *MockServicesService) GetJenkinsCIService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.JenkinsCIService, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJenkinsCIService", varargs...)
	ret0, _ := ret[0].(*gitlab.JenkinsCIService)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetJenkinsCIService indicates an expected call of GetJenkinsCIService.
func (mr *MockServicesServiceMockRecorder) GetJenkinsCIService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJenkinsCIService", reflect.TypeOf((*MockServicesService)(nil).GetJenkinsCIService), varargs...)
}

// GetJiraService mocks base method.
func (m *MockServicesService) GetJiraService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.JiraService, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJiraService", varargs...)
	ret0, _ := ret[0].(*gitlab.JiraService)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetJiraService indicates an expected call of GetJiraService.
func (mr *MockServicesServiceMockRecorder) GetJiraService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJiraService", reflect.TypeOf((*MockServicesService)(nil).GetJiraService), varargs...)
}

// GetMattermostService mocks base method.
func (m *MockServicesService) GetMattermostService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.MattermostService, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMattermostService", varargs...)
	ret0, _ := ret[0].(*gitlab.MattermostService)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMattermostService indicates an expected call of GetMattermostService.
func (mr *MockServicesServiceMockRecorder) GetMattermostService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMattermostService", reflect.TypeOf((*MockServicesService)(nil).GetMattermostService), varargs...)
}

// GetMattermostSlashCommandsService mocks base method.
func (m *MockServicesService) GetMattermostSlashCommandsService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.MattermostSlashCommandsService, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMattermostSlashCommandsService", varargs...)
	ret0, _ := ret[0].(*gitlab.MattermostSlashCommandsService)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMattermostSlashCommandsService indicates an expected call of GetMattermostSlashCommandsService.
func (mr *MockServicesServiceMockRecorder) GetMattermostSlashCommandsService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMattermostSlashCommandsService", reflect.TypeOf((*MockServicesService)(nil).GetMattermostSlashCommandsService), varargs...)
}

// GetMicrosoftTeamsService mocks base method.
func (m *MockServicesService) GetMicrosoftTeamsService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.MicrosoftTeamsService, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMicrosoftTeamsService", varargs...)
	ret0, _ := ret[0].(*gitlab.MicrosoftTeamsService)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMicrosoftTeamsService indicates an expected call of GetMicrosoftTeamsService.
func (mr *MockServicesServiceMockRecorder) GetMicrosoftTeamsService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMicrosoftTeamsService", reflect.TypeOf((*MockServicesService)(nil).GetMicrosoftTeamsService), varargs...)
}

// GetPipelinesEmailService mocks base method.
func (m *MockServicesService) GetPipelinesEmailService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.PipelinesEmailService, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPipelinesEmailService", varargs...)
	ret0, _ := ret[0].(*gitlab.PipelinesEmailService)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPipelinesEmailService indicates an expected call of GetPipelinesEmailService.
func (mr *MockServicesServiceMockRecorder) GetPipelinesEmailService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelinesEmailService", reflect.TypeOf((*MockServicesService)(nil).GetPipelinesEmailService), varargs...)
}

// GetPrometheusService mocks base method.
func (m *MockServicesService) GetPrometheusService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.PrometheusService, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPrometheusService", varargs...)
	ret0, _ := ret[0].(*gitlab.PrometheusService)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPrometheusService indicates an expected call of GetPrometheusService.
func (mr *MockServicesServiceMockRecorder) GetPrometheusService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrometheusService", reflect.TypeOf((*MockServicesService)(nil).GetPrometheusService), varargs...)
}

// GetRedmineService mocks base method.
func (m *MockServicesService) GetRedmineService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.RedmineService, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRedmineService", varargs...)
	ret0, _ := ret[0].(*gitlab.RedmineService)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRedmineService indicates an expected call of GetRedmineService.
func (mr *MockServicesServiceMockRecorder) GetRedmineService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRedmineService", reflect.TypeOf((*MockServicesService)(nil).GetRedmineService), varargs...)
}

// GetSlackApplication mocks base method.
func (m *MockServicesService) GetSlackApplication(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.SlackApplication, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSlackApplication", varargs...)
	ret0, _ := ret[0].(*gitlab.SlackApplication)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSlackApplication indicates an expected call of GetSlackApplication.
func (mr *MockServicesServiceMockRecorder) GetSlackApplication(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlackApplication", reflect.TypeOf((*MockServicesService)(nil).GetSlackApplication), varargs...)
}

// GetSlackService mocks base method.
func (m *MockServicesService) GetSlackService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.SlackService, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSlackService", varargs...)
	ret0, _ := ret[0].(*gitlab.SlackService)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSlackService indicates an expected call of GetSlackService.
func (mr *MockServicesServiceMockRecorder) GetSlackService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlackService", reflect.TypeOf((*MockServicesService)(nil).GetSlackService), varargs...)
}

// GetSlackSlashCommandsService mocks base method.
func (m *MockServicesService) GetSlackSlashCommandsService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.SlackSlashCommandsService, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSlackSlashCommandsService", varargs...)
	ret0, _ := ret[0].(*gitlab.SlackSlashCommandsService)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSlackSlashCommandsService indicates an expected call of GetSlackSlashCommandsService.
func (mr *MockServicesServiceMockRecorder) GetSlackSlashCommandsService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlackSlashCommandsService", reflect.TypeOf((*MockServicesService)(nil).GetSlackSlashCommandsService), varargs...)
}

// GetTelegramService mocks base method.
func (m *MockServicesService) GetTelegramService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.TelegramService, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTelegramService", varargs...)
	ret0, _ := ret[0].(*gitlab.TelegramService)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTelegramService indicates an expected call of GetTelegramService.
func (mr *MockServicesServiceMockRecorder) GetTelegramService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTelegramService", reflect.TypeOf((*MockServicesService)(nil).GetTelegramService), varargs...)
}

// GetYouTrackService mocks base method.
func (m *MockServicesService) GetYouTrackService(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.YouTrackService, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetYouTrackService", varargs...)
	ret0, _ := ret[0].(*gitlab.YouTrackService)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetYouTrackService indicates an expected call of GetYouTrackService.
func (mr *MockServicesServiceMockRecorder) GetYouTrackService(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYouTrackService", reflect.TypeOf((*MockServicesService)(nil).GetYouTrackService), varargs...)
}

// ListServices mocks base method.
func (m *MockServicesService) ListServices(pid any, options ...gitlab.RequestOptionFunc) ([]*gitlab.Service, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServices", varargs...)
	ret0, _ := ret[0].([]*gitlab.Service)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListServices indicates an expected call of ListServices.
func (mr *MockServicesServiceMockRecorder) ListServices(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockServicesService)(nil).ListServices), varargs...)
}

// SetCustomIssueTrackerService mocks base method.
func (m *MockServicesService) SetCustomIssueTrackerService(pid any, opt *gitlab.SetCustomIssueTrackerServiceOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetCustomIssueTrackerService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCustomIssueTrackerService indicates an expected call of SetCustomIssueTrackerService.
func (mr *MockServicesServiceMockRecorder) SetCustomIssueTrackerService(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCustomIssueTrackerService", reflect.TypeOf((*MockServicesService)(nil).SetCustomIssueTrackerService), varargs...)
}

// SetDataDogService mocks base method.
func (m *MockServicesService) SetDataDogService(pid any, opt *gitlab.SetDataDogServiceOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetDataDogService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDataDogService indicates an expected call of SetDataDogService.
func (mr *MockServicesServiceMockRecorder) SetDataDogService(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDataDogService", reflect.TypeOf((*MockServicesService)(nil).SetDataDogService), varargs...)
}

// SetDiscordService mocks base method.
func (m *MockServicesService) SetDiscordService(pid any, opt *gitlab.SetDiscordServiceOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetDiscordService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDiscordService indicates an expected call of SetDiscordService.
func (mr *MockServicesServiceMockRecorder) SetDiscordService(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDiscordService", reflect.TypeOf((*MockServicesService)(nil).SetDiscordService), varargs...)
}

// SetDroneCIService mocks base method.
func (m *MockServicesService) SetDroneCIService(pid any, opt *gitlab.SetDroneCIServiceOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetDroneCIService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDroneCIService indicates an expected call of SetDroneCIService.
func (mr *MockServicesServiceMockRecorder) SetDroneCIService(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDroneCIService", reflect.TypeOf((*MockServicesService)(nil).SetDroneCIService), varargs...)
}

// SetEmailsOnPushService mocks base method.
func (m *MockServicesService) SetEmailsOnPushService(pid any, opt *gitlab.SetEmailsOnPushServiceOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetEmailsOnPushService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetEmailsOnPushService indicates an expected call of SetEmailsOnPushService.
func (mr *MockServicesServiceMockRecorder) SetEmailsOnPushService(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEmailsOnPushService", reflect.TypeOf((*MockServicesService)(nil).SetEmailsOnPushService), varargs...)
}

// SetExternalWikiService mocks base method.
func (m *MockServicesService) SetExternalWikiService(pid any, opt *gitlab.SetExternalWikiServiceOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetExternalWikiService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetExternalWikiService indicates an expected call of SetExternalWikiService.
func (mr *MockServicesServiceMockRecorder) SetExternalWikiService(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExternalWikiService", reflect.TypeOf((*MockServicesService)(nil).SetExternalWikiService), varargs...)
}

// SetGitLabCIService mocks base method.
func (m *MockServicesService) SetGitLabCIService(pid any, opt *gitlab.SetGitLabCIServiceOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetGitLabCIService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetGitLabCIService indicates an expected call of SetGitLabCIService.
func (mr *MockServicesServiceMockRecorder) SetGitLabCIService(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGitLabCIService", reflect.TypeOf((*MockServicesService)(nil).SetGitLabCIService), varargs...)
}

// SetGithubService mocks base method.
func (m *MockServicesService) SetGithubService(pid any, opt *gitlab.SetGithubServiceOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetGithubService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetGithubService indicates an expected call of SetGithubService.
func (mr *MockServicesServiceMockRecorder) SetGithubService(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGithubService", reflect.TypeOf((*MockServicesService)(nil).SetGithubService), varargs...)
}

// SetHarborService mocks base method.
func (m *MockServicesService) SetHarborService(pid any, opt *gitlab.SetHarborServiceOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetHarborService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetHarborService indicates an expected call of SetHarborService.
func (mr *MockServicesServiceMockRecorder) SetHarborService(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHarborService", reflect.TypeOf((*MockServicesService)(nil).SetHarborService), varargs...)
}

// SetHipChatService mocks base method.
func (m *MockServicesService) SetHipChatService(pid any, opt *gitlab.SetHipChatServiceOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetHipChatService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetHipChatService indicates an expected call of SetHipChatService.
func (mr *MockServicesServiceMockRecorder) SetHipChatService(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHipChatService", reflect.TypeOf((*MockServicesService)(nil).SetHipChatService), varargs...)
}

// SetJenkinsCIService mocks base method.
func (m *MockServicesService) SetJenkinsCIService(pid any, opt *gitlab.SetJenkinsCIServiceOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetJenkinsCIService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetJenkinsCIService indicates an expected call of SetJenkinsCIService.
func (mr *MockServicesServiceMockRecorder) SetJenkinsCIService(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetJenkinsCIService", reflect.TypeOf((*MockServicesService)(nil).SetJenkinsCIService), varargs...)
}

// SetJiraService mocks base method.
func (m *MockServicesService) SetJiraService(pid any, opt *gitlab.SetJiraServiceOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetJiraService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetJiraService indicates an expected call of SetJiraService.
func (mr *MockServicesServiceMockRecorder) SetJiraService(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetJiraService", reflect.TypeOf((*MockServicesService)(nil).SetJiraService), varargs...)
}

// SetMattermostService mocks base method.
func (m *MockServicesService) SetMattermostService(pid any, opt *gitlab.SetMattermostServiceOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetMattermostService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetMattermostService indicates an expected call of SetMattermostService.
func (mr *MockServicesServiceMockRecorder) SetMattermostService(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMattermostService", reflect.TypeOf((*MockServicesService)(nil).SetMattermostService), varargs...)
}

// SetMattermostSlashCommandsService mocks base method.
func (m *MockServicesService) SetMattermostSlashCommandsService(pid any, opt *gitlab.SetMattermostSlashCommandsServiceOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetMattermostSlashCommandsService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetMattermostSlashCommandsService indicates an expected call of SetMattermostSlashCommandsService.
func (mr *MockServicesServiceMockRecorder) SetMattermostSlashCommandsService(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMattermostSlashCommandsService", reflect.TypeOf((*MockServicesService)(nil).SetMattermostSlashCommandsService), varargs...)
}

// SetMicrosoftTeamsService mocks base method.
func (m *MockServicesService) SetMicrosoftTeamsService(pid any, opt *gitlab.SetMicrosoftTeamsServiceOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetMicrosoftTeamsService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetMicrosoftTeamsService indicates an expected call of SetMicrosoftTeamsService.
func (mr *MockServicesServiceMockRecorder) SetMicrosoftTeamsService(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMicrosoftTeamsService", reflect.TypeOf((*MockServicesService)(nil).SetMicrosoftTeamsService), varargs...)
}

// SetPipelinesEmailService mocks base method.
func (m *MockServicesService) SetPipelinesEmailService(pid any, opt *gitlab.SetPipelinesEmailServiceOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetPipelinesEmailService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPipelinesEmailService indicates an expected call of SetPipelinesEmailService.
func (mr *MockServicesServiceMockRecorder) SetPipelinesEmailService(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPipelinesEmailService", reflect.TypeOf((*MockServicesService)(nil).SetPipelinesEmailService), varargs...)
}

// SetPrometheusService mocks base method.
func (m *MockServicesService) SetPrometheusService(pid any, opt *gitlab.SetPrometheusServiceOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetPrometheusService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPrometheusService indicates an expected call of SetPrometheusService.
func (mr *MockServicesServiceMockRecorder) SetPrometheusService(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrometheusService", reflect.TypeOf((*MockServicesService)(nil).SetPrometheusService), varargs...)
}

// SetRedmineService mocks base method.
func (m *MockServicesService) SetRedmineService(pid any, opt *gitlab.SetRedmineServiceOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetRedmineService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRedmineService indicates an expected call of SetRedmineService.
func (mr *MockServicesServiceMockRecorder) SetRedmineService(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRedmineService", reflect.TypeOf((*MockServicesService)(nil).SetRedmineService), varargs...)
}

// SetSlackApplication mocks base method.
func (m *MockServicesService) SetSlackApplication(pid any, opt *gitlab.SetSlackApplicationOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetSlackApplication", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSlackApplication indicates an expected call of SetSlackApplication.
func (mr *MockServicesServiceMockRecorder) SetSlackApplication(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSlackApplication", reflect.TypeOf((*MockServicesService)(nil).SetSlackApplication), varargs...)
}

// SetSlackService mocks base method.
func (m *MockServicesService) SetSlackService(pid any, opt *gitlab.SetSlackServiceOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetSlackService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSlackService indicates an expected call of SetSlackService.
func (mr *MockServicesServiceMockRecorder) SetSlackService(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSlackService", reflect.TypeOf((*MockServicesService)(nil).SetSlackService), varargs...)
}

// SetSlackSlashCommandsService mocks base method.
func (m *MockServicesService) SetSlackSlashCommandsService(pid any, opt *gitlab.SetSlackSlashCommandsServiceOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetSlackSlashCommandsService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSlackSlashCommandsService indicates an expected call of SetSlackSlashCommandsService.
func (mr *MockServicesServiceMockRecorder) SetSlackSlashCommandsService(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSlackSlashCommandsService", reflect.TypeOf((*MockServicesService)(nil).SetSlackSlashCommandsService), varargs...)
}

// SetTelegramService mocks base method.
func (m *MockServicesService) SetTelegramService(pid any, opt *gitlab.SetTelegramServiceOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetTelegramService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTelegramService indicates an expected call of SetTelegramService.
func (mr *MockServicesServiceMockRecorder) SetTelegramService(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTelegramService", reflect.TypeOf((*MockServicesService)(nil).SetTelegramService), varargs...)
}

// SetYouTrackService mocks base method.
func (m *MockServicesService) SetYouTrackService(pid any, opt *gitlab.SetYouTrackServiceOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetYouTrackService", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetYouTrackService indicates an expected call of SetYouTrackService.
func (mr *MockServicesServiceMockRecorder) SetYouTrackService(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetYouTrackService", reflect.TypeOf((*MockServicesService)(nil).SetYouTrackService), varargs...)
}
