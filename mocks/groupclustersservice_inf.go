// Code generated by MockGen. DO NOT EDIT.
// Source: groupclustersservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=groupclustersservice_inf.go -destination=mocks/groupclustersservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupClustersService is a mock of GroupClustersService interface.
type MockGroupClustersService struct {
	ctrl     *gomock.Controller
	recorder *MockGroupClustersServiceMockRecorder
	isgomock struct{}
}

// MockGroupClustersServiceMockRecorder is the mock recorder for MockGroupClustersService.
type MockGroupClustersServiceMockRecorder struct {
	mock *MockGroupClustersService
}

// NewMockGroupClustersService creates a new mock instance.
func NewMockGroupClustersService(ctrl *gomock.Controller) *MockGroupClustersService {
	mock := &MockGroupClustersService{ctrl: ctrl}
	mock.recorder = &MockGroupClustersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupClustersService) EXPECT() *MockGroupClustersServiceMockRecorder {
	return m.recorder
}

// AddCluster mocks base method.
func (m *MockGroupClustersService) AddCluster(pid any, opt *gitlab.AddGroupClusterOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupCluster, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddCluster", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupCluster)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddCluster indicates an expected call of AddCluster.
func (mr *MockGroupClustersServiceMockRecorder) AddCluster(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCluster", reflect.TypeOf((*MockGroupClustersService)(nil).AddCluster), varargs...)
}

// DeleteCluster mocks base method.
func (m *MockGroupClustersService) DeleteCluster(pid any, cluster int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, cluster}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCluster", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockGroupClustersServiceMockRecorder) DeleteCluster(pid, cluster any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, cluster}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockGroupClustersService)(nil).DeleteCluster), varargs...)
}

// EditCluster mocks base method.
func (m *MockGroupClustersService) EditCluster(pid any, cluster int, opt *gitlab.EditGroupClusterOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupCluster, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, cluster, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditCluster", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupCluster)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditCluster indicates an expected call of EditCluster.
func (mr *MockGroupClustersServiceMockRecorder) EditCluster(pid, cluster, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, cluster, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditCluster", reflect.TypeOf((*MockGroupClustersService)(nil).EditCluster), varargs...)
}

// GetCluster mocks base method.
func (m *MockGroupClustersService) GetCluster(pid any, cluster int, options ...gitlab.RequestOptionFunc) (*gitlab.GroupCluster, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, cluster}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCluster", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupCluster)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockGroupClustersServiceMockRecorder) GetCluster(pid, cluster any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, cluster}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockGroupClustersService)(nil).GetCluster), varargs...)
}

// ListClusters mocks base method.
func (m *MockGroupClustersService) ListClusters(pid any, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupCluster, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClusters", varargs...)
	ret0, _ := ret[0].([]*gitlab.GroupCluster)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockGroupClustersServiceMockRecorder) ListClusters(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockGroupClustersService)(nil).ListClusters), varargs...)
}
