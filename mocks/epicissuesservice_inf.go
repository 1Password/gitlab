// Code generated by MockGen. DO NOT EDIT.
// Source: epicissuesservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=epicissuesservice_inf.go -destination=mocks/epicissuesservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockEpicIssuesService is a mock of EpicIssuesService interface.
type MockEpicIssuesService struct {
	ctrl     *gomock.Controller
	recorder *MockEpicIssuesServiceMockRecorder
	isgomock struct{}
}

// MockEpicIssuesServiceMockRecorder is the mock recorder for MockEpicIssuesService.
type MockEpicIssuesServiceMockRecorder struct {
	mock *MockEpicIssuesService
}

// NewMockEpicIssuesService creates a new mock instance.
func NewMockEpicIssuesService(ctrl *gomock.Controller) *MockEpicIssuesService {
	mock := &MockEpicIssuesService{ctrl: ctrl}
	mock.recorder = &MockEpicIssuesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEpicIssuesService) EXPECT() *MockEpicIssuesServiceMockRecorder {
	return m.recorder
}

// AssignEpicIssue mocks base method.
func (m *MockEpicIssuesService) AssignEpicIssue(gid any, epic, issue int, options ...gitlab.RequestOptionFunc) (*gitlab.EpicIssueAssignment, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, epic, issue}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssignEpicIssue", varargs...)
	ret0, _ := ret[0].(*gitlab.EpicIssueAssignment)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AssignEpicIssue indicates an expected call of AssignEpicIssue.
func (mr *MockEpicIssuesServiceMockRecorder) AssignEpicIssue(gid, epic, issue any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, epic, issue}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignEpicIssue", reflect.TypeOf((*MockEpicIssuesService)(nil).AssignEpicIssue), varargs...)
}

// ListEpicIssues mocks base method.
func (m *MockEpicIssuesService) ListEpicIssues(gid any, epic int, opt *gitlab.ListOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Issue, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, epic, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEpicIssues", varargs...)
	ret0, _ := ret[0].([]*gitlab.Issue)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEpicIssues indicates an expected call of ListEpicIssues.
func (mr *MockEpicIssuesServiceMockRecorder) ListEpicIssues(gid, epic, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, epic, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEpicIssues", reflect.TypeOf((*MockEpicIssuesService)(nil).ListEpicIssues), varargs...)
}

// RemoveEpicIssue mocks base method.
func (m *MockEpicIssuesService) RemoveEpicIssue(gid any, epic, epicIssue int, options ...gitlab.RequestOptionFunc) (*gitlab.EpicIssueAssignment, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, epic, epicIssue}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveEpicIssue", varargs...)
	ret0, _ := ret[0].(*gitlab.EpicIssueAssignment)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RemoveEpicIssue indicates an expected call of RemoveEpicIssue.
func (mr *MockEpicIssuesServiceMockRecorder) RemoveEpicIssue(gid, epic, epicIssue any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, epic, epicIssue}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEpicIssue", reflect.TypeOf((*MockEpicIssuesService)(nil).RemoveEpicIssue), varargs...)
}

// UpdateEpicIssueAssignment mocks base method.
func (m *MockEpicIssuesService) UpdateEpicIssueAssignment(gid any, epic, epicIssue int, opt *gitlab.UpdateEpicIsssueAssignmentOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Issue, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, epic, epicIssue, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEpicIssueAssignment", varargs...)
	ret0, _ := ret[0].([]*gitlab.Issue)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateEpicIssueAssignment indicates an expected call of UpdateEpicIssueAssignment.
func (mr *MockEpicIssuesServiceMockRecorder) UpdateEpicIssueAssignment(gid, epic, epicIssue, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, epic, epicIssue, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEpicIssueAssignment", reflect.TypeOf((*MockEpicIssuesService)(nil).UpdateEpicIssueAssignment), varargs...)
}
