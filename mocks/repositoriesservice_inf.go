// Code generated by MockGen. DO NOT EDIT.
// Source: repositoriesservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=repositoriesservice_inf.go -destination=mocks/repositoriesservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositoriesService is a mock of RepositoriesService interface.
type MockRepositoriesService struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoriesServiceMockRecorder
	isgomock struct{}
}

// MockRepositoriesServiceMockRecorder is the mock recorder for MockRepositoriesService.
type MockRepositoriesServiceMockRecorder struct {
	mock *MockRepositoriesService
}

// NewMockRepositoriesService creates a new mock instance.
func NewMockRepositoriesService(ctrl *gomock.Controller) *MockRepositoriesService {
	mock := &MockRepositoriesService{ctrl: ctrl}
	mock.recorder = &MockRepositoriesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoriesService) EXPECT() *MockRepositoriesServiceMockRecorder {
	return m.recorder
}

// AddChangelog mocks base method.
func (m *MockRepositoriesService) AddChangelog(pid any, opt *gitlab.AddChangelogOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddChangelog", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddChangelog indicates an expected call of AddChangelog.
func (mr *MockRepositoriesServiceMockRecorder) AddChangelog(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChangelog", reflect.TypeOf((*MockRepositoriesService)(nil).AddChangelog), varargs...)
}

// Archive mocks base method.
func (m *MockRepositoriesService) Archive(pid any, opt *gitlab.ArchiveOptions, options ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Archive", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Archive indicates an expected call of Archive.
func (mr *MockRepositoriesServiceMockRecorder) Archive(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Archive", reflect.TypeOf((*MockRepositoriesService)(nil).Archive), varargs...)
}

// Blob mocks base method.
func (m *MockRepositoriesService) Blob(pid any, sha string, options ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, sha}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Blob", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Blob indicates an expected call of Blob.
func (mr *MockRepositoriesServiceMockRecorder) Blob(pid, sha any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, sha}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Blob", reflect.TypeOf((*MockRepositoriesService)(nil).Blob), varargs...)
}

// Compare mocks base method.
func (m *MockRepositoriesService) Compare(pid any, opt *gitlab.CompareOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Compare, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Compare", varargs...)
	ret0, _ := ret[0].(*gitlab.Compare)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Compare indicates an expected call of Compare.
func (mr *MockRepositoriesServiceMockRecorder) Compare(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compare", reflect.TypeOf((*MockRepositoriesService)(nil).Compare), varargs...)
}

// Contributors mocks base method.
func (m *MockRepositoriesService) Contributors(pid any, opt *gitlab.ListContributorsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Contributor, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Contributors", varargs...)
	ret0, _ := ret[0].([]*gitlab.Contributor)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Contributors indicates an expected call of Contributors.
func (mr *MockRepositoriesServiceMockRecorder) Contributors(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contributors", reflect.TypeOf((*MockRepositoriesService)(nil).Contributors), varargs...)
}

// GenerateChangelogData mocks base method.
func (m *MockRepositoriesService) GenerateChangelogData(pid any, opt gitlab.GenerateChangelogDataOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ChangelogData, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateChangelogData", varargs...)
	ret0, _ := ret[0].(*gitlab.ChangelogData)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateChangelogData indicates an expected call of GenerateChangelogData.
func (mr *MockRepositoriesServiceMockRecorder) GenerateChangelogData(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateChangelogData", reflect.TypeOf((*MockRepositoriesService)(nil).GenerateChangelogData), varargs...)
}

// ListTree mocks base method.
func (m *MockRepositoriesService) ListTree(pid any, opt *gitlab.ListTreeOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.TreeNode, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTree", varargs...)
	ret0, _ := ret[0].([]*gitlab.TreeNode)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTree indicates an expected call of ListTree.
func (mr *MockRepositoriesServiceMockRecorder) ListTree(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTree", reflect.TypeOf((*MockRepositoriesService)(nil).ListTree), varargs...)
}

// MergeBase mocks base method.
func (m *MockRepositoriesService) MergeBase(pid any, opt *gitlab.MergeBaseOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Commit, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MergeBase", varargs...)
	ret0, _ := ret[0].(*gitlab.Commit)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MergeBase indicates an expected call of MergeBase.
func (mr *MockRepositoriesServiceMockRecorder) MergeBase(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeBase", reflect.TypeOf((*MockRepositoriesService)(nil).MergeBase), varargs...)
}

// RawBlobContent mocks base method.
func (m *MockRepositoriesService) RawBlobContent(pid any, sha string, options ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, sha}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RawBlobContent", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RawBlobContent indicates an expected call of RawBlobContent.
func (mr *MockRepositoriesServiceMockRecorder) RawBlobContent(pid, sha any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, sha}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawBlobContent", reflect.TypeOf((*MockRepositoriesService)(nil).RawBlobContent), varargs...)
}

// StreamArchive mocks base method.
func (m *MockRepositoriesService) StreamArchive(pid any, w io.Writer, opt *gitlab.ArchiveOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, w, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamArchive", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamArchive indicates an expected call of StreamArchive.
func (mr *MockRepositoriesServiceMockRecorder) StreamArchive(pid, w, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, w, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamArchive", reflect.TypeOf((*MockRepositoriesService)(nil).StreamArchive), varargs...)
}
