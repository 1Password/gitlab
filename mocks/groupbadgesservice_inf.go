// Code generated by MockGen. DO NOT EDIT.
// Source: groupbadgesservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=groupbadgesservice_inf.go -destination=mocks/groupbadgesservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupBadgesService is a mock of GroupBadgesService interface.
type MockGroupBadgesService struct {
	ctrl     *gomock.Controller
	recorder *MockGroupBadgesServiceMockRecorder
	isgomock struct{}
}

// MockGroupBadgesServiceMockRecorder is the mock recorder for MockGroupBadgesService.
type MockGroupBadgesServiceMockRecorder struct {
	mock *MockGroupBadgesService
}

// NewMockGroupBadgesService creates a new mock instance.
func NewMockGroupBadgesService(ctrl *gomock.Controller) *MockGroupBadgesService {
	mock := &MockGroupBadgesService{ctrl: ctrl}
	mock.recorder = &MockGroupBadgesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupBadgesService) EXPECT() *MockGroupBadgesServiceMockRecorder {
	return m.recorder
}

// AddGroupBadge mocks base method.
func (m *MockGroupBadgesService) AddGroupBadge(gid any, opt *gitlab.AddGroupBadgeOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupBadge, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddGroupBadge", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupBadge)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddGroupBadge indicates an expected call of AddGroupBadge.
func (mr *MockGroupBadgesServiceMockRecorder) AddGroupBadge(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGroupBadge", reflect.TypeOf((*MockGroupBadgesService)(nil).AddGroupBadge), varargs...)
}

// DeleteGroupBadge mocks base method.
func (m *MockGroupBadgesService) DeleteGroupBadge(gid any, badge int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, badge}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroupBadge", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupBadge indicates an expected call of DeleteGroupBadge.
func (mr *MockGroupBadgesServiceMockRecorder) DeleteGroupBadge(gid, badge any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, badge}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupBadge", reflect.TypeOf((*MockGroupBadgesService)(nil).DeleteGroupBadge), varargs...)
}

// EditGroupBadge mocks base method.
func (m *MockGroupBadgesService) EditGroupBadge(gid any, badge int, opt *gitlab.EditGroupBadgeOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupBadge, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, badge, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditGroupBadge", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupBadge)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditGroupBadge indicates an expected call of EditGroupBadge.
func (mr *MockGroupBadgesServiceMockRecorder) EditGroupBadge(gid, badge, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, badge, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditGroupBadge", reflect.TypeOf((*MockGroupBadgesService)(nil).EditGroupBadge), varargs...)
}

// GetGroupBadge mocks base method.
func (m *MockGroupBadgesService) GetGroupBadge(gid any, badge int, options ...gitlab.RequestOptionFunc) (*gitlab.GroupBadge, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, badge}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupBadge", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupBadge)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroupBadge indicates an expected call of GetGroupBadge.
func (mr *MockGroupBadgesServiceMockRecorder) GetGroupBadge(gid, badge any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, badge}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupBadge", reflect.TypeOf((*MockGroupBadgesService)(nil).GetGroupBadge), varargs...)
}

// ListGroupBadges mocks base method.
func (m *MockGroupBadgesService) ListGroupBadges(gid any, opt *gitlab.ListGroupBadgesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupBadge, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupBadges", varargs...)
	ret0, _ := ret[0].([]*gitlab.GroupBadge)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupBadges indicates an expected call of ListGroupBadges.
func (mr *MockGroupBadgesServiceMockRecorder) ListGroupBadges(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupBadges", reflect.TypeOf((*MockGroupBadgesService)(nil).ListGroupBadges), varargs...)
}

// PreviewGroupBadge mocks base method.
func (m *MockGroupBadgesService) PreviewGroupBadge(gid any, opt *gitlab.GroupBadgePreviewOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupBadge, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PreviewGroupBadge", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupBadge)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PreviewGroupBadge indicates an expected call of PreviewGroupBadge.
func (mr *MockGroupBadgesServiceMockRecorder) PreviewGroupBadge(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreviewGroupBadge", reflect.TypeOf((*MockGroupBadgesService)(nil).PreviewGroupBadge), varargs...)
}
