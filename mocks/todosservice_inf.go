// Code generated by MockGen. DO NOT EDIT.
// Source: todosservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=todosservice_inf.go -destination=mocks/todosservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockTodosService is a mock of TodosService interface.
type MockTodosService struct {
	ctrl     *gomock.Controller
	recorder *MockTodosServiceMockRecorder
	isgomock struct{}
}

// MockTodosServiceMockRecorder is the mock recorder for MockTodosService.
type MockTodosServiceMockRecorder struct {
	mock *MockTodosService
}

// NewMockTodosService creates a new mock instance.
func NewMockTodosService(ctrl *gomock.Controller) *MockTodosService {
	mock := &MockTodosService{ctrl: ctrl}
	mock.recorder = &MockTodosServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodosService) EXPECT() *MockTodosServiceMockRecorder {
	return m.recorder
}

// ListTodos mocks base method.
func (m *MockTodosService) ListTodos(opt *gitlab.ListTodosOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Todo, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTodos", varargs...)
	ret0, _ := ret[0].([]*gitlab.Todo)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTodos indicates an expected call of ListTodos.
func (mr *MockTodosServiceMockRecorder) ListTodos(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTodos", reflect.TypeOf((*MockTodosService)(nil).ListTodos), varargs...)
}

// MarkAllTodosAsDone mocks base method.
func (m *MockTodosService) MarkAllTodosAsDone(options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarkAllTodosAsDone", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkAllTodosAsDone indicates an expected call of MarkAllTodosAsDone.
func (mr *MockTodosServiceMockRecorder) MarkAllTodosAsDone(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAllTodosAsDone", reflect.TypeOf((*MockTodosService)(nil).MarkAllTodosAsDone), options...)
}

// MarkTodoAsDone mocks base method.
func (m *MockTodosService) MarkTodoAsDone(id int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{id}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarkTodoAsDone", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkTodoAsDone indicates an expected call of MarkTodoAsDone.
func (mr *MockTodosServiceMockRecorder) MarkTodoAsDone(id any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{id}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkTodoAsDone", reflect.TypeOf((*MockTodosService)(nil).MarkTodoAsDone), varargs...)
}
