// Code generated by MockGen. DO NOT EDIT.
// Source: groupiterationsservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=groupiterationsservice_inf.go -destination=mocks/groupiterationsservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupIterationsService is a mock of GroupIterationsService interface.
type MockGroupIterationsService struct {
	ctrl     *gomock.Controller
	recorder *MockGroupIterationsServiceMockRecorder
	isgomock struct{}
}

// MockGroupIterationsServiceMockRecorder is the mock recorder for MockGroupIterationsService.
type MockGroupIterationsServiceMockRecorder struct {
	mock *MockGroupIterationsService
}

// NewMockGroupIterationsService creates a new mock instance.
func NewMockGroupIterationsService(ctrl *gomock.Controller) *MockGroupIterationsService {
	mock := &MockGroupIterationsService{ctrl: ctrl}
	mock.recorder = &MockGroupIterationsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupIterationsService) EXPECT() *MockGroupIterationsServiceMockRecorder {
	return m.recorder
}

// ListGroupIterations mocks base method.
func (m *MockGroupIterationsService) ListGroupIterations(gid any, opt *gitlab.ListGroupIterationsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupIteration, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupIterations", varargs...)
	ret0, _ := ret[0].([]*gitlab.GroupIteration)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupIterations indicates an expected call of ListGroupIterations.
func (mr *MockGroupIterationsServiceMockRecorder) ListGroupIterations(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupIterations", reflect.TypeOf((*MockGroupIterationsService)(nil).ListGroupIterations), varargs...)
}
