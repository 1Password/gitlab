// Code generated by MockGen. DO NOT EDIT.
// Source: appearanceservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=appearanceservice_inf.go -destination=mocks/appearanceservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockAppearanceService is a mock of AppearanceService interface.
type MockAppearanceService struct {
	ctrl     *gomock.Controller
	recorder *MockAppearanceServiceMockRecorder
	isgomock struct{}
}

// MockAppearanceServiceMockRecorder is the mock recorder for MockAppearanceService.
type MockAppearanceServiceMockRecorder struct {
	mock *MockAppearanceService
}

// NewMockAppearanceService creates a new mock instance.
func NewMockAppearanceService(ctrl *gomock.Controller) *MockAppearanceService {
	mock := &MockAppearanceService{ctrl: ctrl}
	mock.recorder = &MockAppearanceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppearanceService) EXPECT() *MockAppearanceServiceMockRecorder {
	return m.recorder
}

// ChangeAppearance mocks base method.
func (m *MockAppearanceService) ChangeAppearance(opt *gitlab.ChangeAppearanceOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Appearance, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeAppearance", varargs...)
	ret0, _ := ret[0].(*gitlab.Appearance)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ChangeAppearance indicates an expected call of ChangeAppearance.
func (mr *MockAppearanceServiceMockRecorder) ChangeAppearance(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeAppearance", reflect.TypeOf((*MockAppearanceService)(nil).ChangeAppearance), varargs...)
}

// GetAppearance mocks base method.
func (m *MockAppearanceService) GetAppearance(options ...gitlab.RequestOptionFunc) (*gitlab.Appearance, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppearance", varargs...)
	ret0, _ := ret[0].(*gitlab.Appearance)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAppearance indicates an expected call of GetAppearance.
func (mr *MockAppearanceServiceMockRecorder) GetAppearance(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppearance", reflect.TypeOf((*MockAppearanceService)(nil).GetAppearance), options...)
}
