// Code generated by MockGen. DO NOT EDIT.
// Source: dorametricsservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=dorametricsservice_inf.go -destination=mocks/dorametricsservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockDORAMetricsService is a mock of DORAMetricsService interface.
type MockDORAMetricsService struct {
	ctrl     *gomock.Controller
	recorder *MockDORAMetricsServiceMockRecorder
}

// MockDORAMetricsServiceMockRecorder is the mock recorder for MockDORAMetricsService.
type MockDORAMetricsServiceMockRecorder struct {
	mock *MockDORAMetricsService
}

// NewMockDORAMetricsService creates a new mock instance.
func NewMockDORAMetricsService(ctrl *gomock.Controller) *MockDORAMetricsService {
	mock := &MockDORAMetricsService{ctrl: ctrl}
	mock.recorder = &MockDORAMetricsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDORAMetricsService) EXPECT() *MockDORAMetricsServiceMockRecorder {
	return m.recorder
}

// GetGroupDORAMetrics mocks base method.
func (m *MockDORAMetricsService) GetGroupDORAMetrics(gid any, opt gitlab.GetDORAMetricsOptions, options ...gitlab.RequestOptionFunc) ([]gitlab.DORAMetric, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupDORAMetrics", varargs...)
	ret0, _ := ret[0].([]gitlab.DORAMetric)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroupDORAMetrics indicates an expected call of GetGroupDORAMetrics.
func (mr *MockDORAMetricsServiceMockRecorder) GetGroupDORAMetrics(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupDORAMetrics", reflect.TypeOf((*MockDORAMetricsService)(nil).GetGroupDORAMetrics), varargs...)
}

// GetProjectDORAMetrics mocks base method.
func (m *MockDORAMetricsService) GetProjectDORAMetrics(pid any, opt gitlab.GetDORAMetricsOptions, options ...gitlab.RequestOptionFunc) ([]gitlab.DORAMetric, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectDORAMetrics", varargs...)
	ret0, _ := ret[0].([]gitlab.DORAMetric)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProjectDORAMetrics indicates an expected call of GetProjectDORAMetrics.
func (mr *MockDORAMetricsServiceMockRecorder) GetProjectDORAMetrics(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectDORAMetrics", reflect.TypeOf((*MockDORAMetricsService)(nil).GetProjectDORAMetrics), varargs...)
}
