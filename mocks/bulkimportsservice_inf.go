// Code generated by MockGen. DO NOT EDIT.
// Source: bulkimportsservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=bulkimportsservice_inf.go -destination=mocks/bulkimportsservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockBulkImportsService is a mock of BulkImportsService interface.
type MockBulkImportsService struct {
	ctrl     *gomock.Controller
	recorder *MockBulkImportsServiceMockRecorder
	isgomock struct{}
}

// MockBulkImportsServiceMockRecorder is the mock recorder for MockBulkImportsService.
type MockBulkImportsServiceMockRecorder struct {
	mock *MockBulkImportsService
}

// NewMockBulkImportsService creates a new mock instance.
func NewMockBulkImportsService(ctrl *gomock.Controller) *MockBulkImportsService {
	mock := &MockBulkImportsService{ctrl: ctrl}
	mock.recorder = &MockBulkImportsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBulkImportsService) EXPECT() *MockBulkImportsServiceMockRecorder {
	return m.recorder
}

// StartMigration mocks base method.
func (m *MockBulkImportsService) StartMigration(startMigrationOptions *gitlab.BulkImportStartMigrationOptions, options ...gitlab.RequestOptionFunc) (*gitlab.BulkImportStartMigrationResponse, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{startMigrationOptions}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartMigration", varargs...)
	ret0, _ := ret[0].(*gitlab.BulkImportStartMigrationResponse)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StartMigration indicates an expected call of StartMigration.
func (mr *MockBulkImportsServiceMockRecorder) StartMigration(startMigrationOptions any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{startMigrationOptions}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMigration", reflect.TypeOf((*MockBulkImportsService)(nil).StartMigration), varargs...)
}
