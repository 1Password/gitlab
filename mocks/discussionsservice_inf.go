// Code generated by MockGen. DO NOT EDIT.
// Source: discussionsservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=discussionsservice_inf.go -destination=mocks/discussionsservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockDiscussionsService is a mock of DiscussionsService interface.
type MockDiscussionsService struct {
	ctrl     *gomock.Controller
	recorder *MockDiscussionsServiceMockRecorder
	isgomock struct{}
}

// MockDiscussionsServiceMockRecorder is the mock recorder for MockDiscussionsService.
type MockDiscussionsServiceMockRecorder struct {
	mock *MockDiscussionsService
}

// NewMockDiscussionsService creates a new mock instance.
func NewMockDiscussionsService(ctrl *gomock.Controller) *MockDiscussionsService {
	mock := &MockDiscussionsService{ctrl: ctrl}
	mock.recorder = &MockDiscussionsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscussionsService) EXPECT() *MockDiscussionsServiceMockRecorder {
	return m.recorder
}

// AddCommitDiscussionNote mocks base method.
func (m *MockDiscussionsService) AddCommitDiscussionNote(pid any, commit, discussion string, opt *gitlab.AddCommitDiscussionNoteOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, commit, discussion, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddCommitDiscussionNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Note)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddCommitDiscussionNote indicates an expected call of AddCommitDiscussionNote.
func (mr *MockDiscussionsServiceMockRecorder) AddCommitDiscussionNote(pid, commit, discussion, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, commit, discussion, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCommitDiscussionNote", reflect.TypeOf((*MockDiscussionsService)(nil).AddCommitDiscussionNote), varargs...)
}

// AddEpicDiscussionNote mocks base method.
func (m *MockDiscussionsService) AddEpicDiscussionNote(gid any, epic int, discussion string, opt *gitlab.AddEpicDiscussionNoteOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, epic, discussion, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEpicDiscussionNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Note)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddEpicDiscussionNote indicates an expected call of AddEpicDiscussionNote.
func (mr *MockDiscussionsServiceMockRecorder) AddEpicDiscussionNote(gid, epic, discussion, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, epic, discussion, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEpicDiscussionNote", reflect.TypeOf((*MockDiscussionsService)(nil).AddEpicDiscussionNote), varargs...)
}

// AddIssueDiscussionNote mocks base method.
func (m *MockDiscussionsService) AddIssueDiscussionNote(pid any, issue int, discussion string, opt *gitlab.AddIssueDiscussionNoteOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, issue, discussion, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddIssueDiscussionNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Note)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddIssueDiscussionNote indicates an expected call of AddIssueDiscussionNote.
func (mr *MockDiscussionsServiceMockRecorder) AddIssueDiscussionNote(pid, issue, discussion, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, issue, discussion, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIssueDiscussionNote", reflect.TypeOf((*MockDiscussionsService)(nil).AddIssueDiscussionNote), varargs...)
}

// AddMergeRequestDiscussionNote mocks base method.
func (m *MockDiscussionsService) AddMergeRequestDiscussionNote(pid any, mergeRequest int, discussion string, opt *gitlab.AddMergeRequestDiscussionNoteOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequest, discussion, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddMergeRequestDiscussionNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Note)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddMergeRequestDiscussionNote indicates an expected call of AddMergeRequestDiscussionNote.
func (mr *MockDiscussionsServiceMockRecorder) AddMergeRequestDiscussionNote(pid, mergeRequest, discussion, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequest, discussion, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMergeRequestDiscussionNote", reflect.TypeOf((*MockDiscussionsService)(nil).AddMergeRequestDiscussionNote), varargs...)
}

// AddSnippetDiscussionNote mocks base method.
func (m *MockDiscussionsService) AddSnippetDiscussionNote(pid any, snippet int, discussion string, opt *gitlab.AddSnippetDiscussionNoteOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, snippet, discussion, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddSnippetDiscussionNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Note)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddSnippetDiscussionNote indicates an expected call of AddSnippetDiscussionNote.
func (mr *MockDiscussionsServiceMockRecorder) AddSnippetDiscussionNote(pid, snippet, discussion, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, snippet, discussion, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSnippetDiscussionNote", reflect.TypeOf((*MockDiscussionsService)(nil).AddSnippetDiscussionNote), varargs...)
}

// CreateCommitDiscussion mocks base method.
func (m *MockDiscussionsService) CreateCommitDiscussion(pid any, commit string, opt *gitlab.CreateCommitDiscussionOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Discussion, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, commit, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCommitDiscussion", varargs...)
	ret0, _ := ret[0].(*gitlab.Discussion)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCommitDiscussion indicates an expected call of CreateCommitDiscussion.
func (mr *MockDiscussionsServiceMockRecorder) CreateCommitDiscussion(pid, commit, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, commit, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommitDiscussion", reflect.TypeOf((*MockDiscussionsService)(nil).CreateCommitDiscussion), varargs...)
}

// CreateEpicDiscussion mocks base method.
func (m *MockDiscussionsService) CreateEpicDiscussion(gid any, epic int, opt *gitlab.CreateEpicDiscussionOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Discussion, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, epic, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEpicDiscussion", varargs...)
	ret0, _ := ret[0].(*gitlab.Discussion)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateEpicDiscussion indicates an expected call of CreateEpicDiscussion.
func (mr *MockDiscussionsServiceMockRecorder) CreateEpicDiscussion(gid, epic, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, epic, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEpicDiscussion", reflect.TypeOf((*MockDiscussionsService)(nil).CreateEpicDiscussion), varargs...)
}

// CreateIssueDiscussion mocks base method.
func (m *MockDiscussionsService) CreateIssueDiscussion(pid any, issue int, opt *gitlab.CreateIssueDiscussionOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Discussion, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, issue, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIssueDiscussion", varargs...)
	ret0, _ := ret[0].(*gitlab.Discussion)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateIssueDiscussion indicates an expected call of CreateIssueDiscussion.
func (mr *MockDiscussionsServiceMockRecorder) CreateIssueDiscussion(pid, issue, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, issue, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssueDiscussion", reflect.TypeOf((*MockDiscussionsService)(nil).CreateIssueDiscussion), varargs...)
}

// CreateMergeRequestDiscussion mocks base method.
func (m *MockDiscussionsService) CreateMergeRequestDiscussion(pid any, mergeRequest int, opt *gitlab.CreateMergeRequestDiscussionOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Discussion, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequest, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMergeRequestDiscussion", varargs...)
	ret0, _ := ret[0].(*gitlab.Discussion)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateMergeRequestDiscussion indicates an expected call of CreateMergeRequestDiscussion.
func (mr *MockDiscussionsServiceMockRecorder) CreateMergeRequestDiscussion(pid, mergeRequest, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequest, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMergeRequestDiscussion", reflect.TypeOf((*MockDiscussionsService)(nil).CreateMergeRequestDiscussion), varargs...)
}

// CreateSnippetDiscussion mocks base method.
func (m *MockDiscussionsService) CreateSnippetDiscussion(pid any, snippet int, opt *gitlab.CreateSnippetDiscussionOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Discussion, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, snippet, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSnippetDiscussion", varargs...)
	ret0, _ := ret[0].(*gitlab.Discussion)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSnippetDiscussion indicates an expected call of CreateSnippetDiscussion.
func (mr *MockDiscussionsServiceMockRecorder) CreateSnippetDiscussion(pid, snippet, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, snippet, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnippetDiscussion", reflect.TypeOf((*MockDiscussionsService)(nil).CreateSnippetDiscussion), varargs...)
}

// DeleteCommitDiscussionNote mocks base method.
func (m *MockDiscussionsService) DeleteCommitDiscussionNote(pid any, commit, discussion string, note int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, commit, discussion, note}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCommitDiscussionNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCommitDiscussionNote indicates an expected call of DeleteCommitDiscussionNote.
func (mr *MockDiscussionsServiceMockRecorder) DeleteCommitDiscussionNote(pid, commit, discussion, note any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, commit, discussion, note}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommitDiscussionNote", reflect.TypeOf((*MockDiscussionsService)(nil).DeleteCommitDiscussionNote), varargs...)
}

// DeleteEpicDiscussionNote mocks base method.
func (m *MockDiscussionsService) DeleteEpicDiscussionNote(gid any, epic int, discussion string, note int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, epic, discussion, note}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEpicDiscussionNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEpicDiscussionNote indicates an expected call of DeleteEpicDiscussionNote.
func (mr *MockDiscussionsServiceMockRecorder) DeleteEpicDiscussionNote(gid, epic, discussion, note any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, epic, discussion, note}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEpicDiscussionNote", reflect.TypeOf((*MockDiscussionsService)(nil).DeleteEpicDiscussionNote), varargs...)
}

// DeleteIssueDiscussionNote mocks base method.
func (m *MockDiscussionsService) DeleteIssueDiscussionNote(pid any, issue int, discussion string, note int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, issue, discussion, note}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIssueDiscussionNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIssueDiscussionNote indicates an expected call of DeleteIssueDiscussionNote.
func (mr *MockDiscussionsServiceMockRecorder) DeleteIssueDiscussionNote(pid, issue, discussion, note any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, issue, discussion, note}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIssueDiscussionNote", reflect.TypeOf((*MockDiscussionsService)(nil).DeleteIssueDiscussionNote), varargs...)
}

// DeleteMergeRequestDiscussionNote mocks base method.
func (m *MockDiscussionsService) DeleteMergeRequestDiscussionNote(pid any, mergeRequest int, discussion string, note int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequest, discussion, note}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMergeRequestDiscussionNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMergeRequestDiscussionNote indicates an expected call of DeleteMergeRequestDiscussionNote.
func (mr *MockDiscussionsServiceMockRecorder) DeleteMergeRequestDiscussionNote(pid, mergeRequest, discussion, note any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequest, discussion, note}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMergeRequestDiscussionNote", reflect.TypeOf((*MockDiscussionsService)(nil).DeleteMergeRequestDiscussionNote), varargs...)
}

// DeleteSnippetDiscussionNote mocks base method.
func (m *MockDiscussionsService) DeleteSnippetDiscussionNote(pid any, snippet int, discussion string, note int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, snippet, discussion, note}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSnippetDiscussionNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSnippetDiscussionNote indicates an expected call of DeleteSnippetDiscussionNote.
func (mr *MockDiscussionsServiceMockRecorder) DeleteSnippetDiscussionNote(pid, snippet, discussion, note any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, snippet, discussion, note}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnippetDiscussionNote", reflect.TypeOf((*MockDiscussionsService)(nil).DeleteSnippetDiscussionNote), varargs...)
}

// GetCommitDiscussion mocks base method.
func (m *MockDiscussionsService) GetCommitDiscussion(pid any, commit, discussion string, options ...gitlab.RequestOptionFunc) (*gitlab.Discussion, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, commit, discussion}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommitDiscussion", varargs...)
	ret0, _ := ret[0].(*gitlab.Discussion)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommitDiscussion indicates an expected call of GetCommitDiscussion.
func (mr *MockDiscussionsServiceMockRecorder) GetCommitDiscussion(pid, commit, discussion any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, commit, discussion}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitDiscussion", reflect.TypeOf((*MockDiscussionsService)(nil).GetCommitDiscussion), varargs...)
}

// GetEpicDiscussion mocks base method.
func (m *MockDiscussionsService) GetEpicDiscussion(gid any, epic int, discussion string, options ...gitlab.RequestOptionFunc) (*gitlab.Discussion, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, epic, discussion}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEpicDiscussion", varargs...)
	ret0, _ := ret[0].(*gitlab.Discussion)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEpicDiscussion indicates an expected call of GetEpicDiscussion.
func (mr *MockDiscussionsServiceMockRecorder) GetEpicDiscussion(gid, epic, discussion any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, epic, discussion}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpicDiscussion", reflect.TypeOf((*MockDiscussionsService)(nil).GetEpicDiscussion), varargs...)
}

// GetIssueDiscussion mocks base method.
func (m *MockDiscussionsService) GetIssueDiscussion(pid any, issue int, discussion string, options ...gitlab.RequestOptionFunc) (*gitlab.Discussion, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, issue, discussion}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIssueDiscussion", varargs...)
	ret0, _ := ret[0].(*gitlab.Discussion)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIssueDiscussion indicates an expected call of GetIssueDiscussion.
func (mr *MockDiscussionsServiceMockRecorder) GetIssueDiscussion(pid, issue, discussion any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, issue, discussion}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueDiscussion", reflect.TypeOf((*MockDiscussionsService)(nil).GetIssueDiscussion), varargs...)
}

// GetMergeRequestDiscussion mocks base method.
func (m *MockDiscussionsService) GetMergeRequestDiscussion(pid any, mergeRequest int, discussion string, options ...gitlab.RequestOptionFunc) (*gitlab.Discussion, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequest, discussion}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMergeRequestDiscussion", varargs...)
	ret0, _ := ret[0].(*gitlab.Discussion)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMergeRequestDiscussion indicates an expected call of GetMergeRequestDiscussion.
func (mr *MockDiscussionsServiceMockRecorder) GetMergeRequestDiscussion(pid, mergeRequest, discussion any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequest, discussion}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergeRequestDiscussion", reflect.TypeOf((*MockDiscussionsService)(nil).GetMergeRequestDiscussion), varargs...)
}

// GetSnippetDiscussion mocks base method.
func (m *MockDiscussionsService) GetSnippetDiscussion(pid any, snippet int, discussion string, options ...gitlab.RequestOptionFunc) (*gitlab.Discussion, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, snippet, discussion}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSnippetDiscussion", varargs...)
	ret0, _ := ret[0].(*gitlab.Discussion)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSnippetDiscussion indicates an expected call of GetSnippetDiscussion.
func (mr *MockDiscussionsServiceMockRecorder) GetSnippetDiscussion(pid, snippet, discussion any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, snippet, discussion}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnippetDiscussion", reflect.TypeOf((*MockDiscussionsService)(nil).GetSnippetDiscussion), varargs...)
}

// ListCommitDiscussions mocks base method.
func (m *MockDiscussionsService) ListCommitDiscussions(pid any, commit string, opt *gitlab.ListCommitDiscussionsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Discussion, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, commit, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCommitDiscussions", varargs...)
	ret0, _ := ret[0].([]*gitlab.Discussion)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCommitDiscussions indicates an expected call of ListCommitDiscussions.
func (mr *MockDiscussionsServiceMockRecorder) ListCommitDiscussions(pid, commit, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, commit, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommitDiscussions", reflect.TypeOf((*MockDiscussionsService)(nil).ListCommitDiscussions), varargs...)
}

// ListGroupEpicDiscussions mocks base method.
func (m *MockDiscussionsService) ListGroupEpicDiscussions(gid any, epic int, opt *gitlab.ListGroupEpicDiscussionsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Discussion, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, epic, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupEpicDiscussions", varargs...)
	ret0, _ := ret[0].([]*gitlab.Discussion)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupEpicDiscussions indicates an expected call of ListGroupEpicDiscussions.
func (mr *MockDiscussionsServiceMockRecorder) ListGroupEpicDiscussions(gid, epic, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, epic, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupEpicDiscussions", reflect.TypeOf((*MockDiscussionsService)(nil).ListGroupEpicDiscussions), varargs...)
}

// ListIssueDiscussions mocks base method.
func (m *MockDiscussionsService) ListIssueDiscussions(pid any, issue int, opt *gitlab.ListIssueDiscussionsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Discussion, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, issue, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIssueDiscussions", varargs...)
	ret0, _ := ret[0].([]*gitlab.Discussion)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListIssueDiscussions indicates an expected call of ListIssueDiscussions.
func (mr *MockDiscussionsServiceMockRecorder) ListIssueDiscussions(pid, issue, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, issue, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssueDiscussions", reflect.TypeOf((*MockDiscussionsService)(nil).ListIssueDiscussions), varargs...)
}

// ListMergeRequestDiscussions mocks base method.
func (m *MockDiscussionsService) ListMergeRequestDiscussions(pid any, mergeRequest int, opt *gitlab.ListMergeRequestDiscussionsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Discussion, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequest, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMergeRequestDiscussions", varargs...)
	ret0, _ := ret[0].([]*gitlab.Discussion)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMergeRequestDiscussions indicates an expected call of ListMergeRequestDiscussions.
func (mr *MockDiscussionsServiceMockRecorder) ListMergeRequestDiscussions(pid, mergeRequest, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequest, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMergeRequestDiscussions", reflect.TypeOf((*MockDiscussionsService)(nil).ListMergeRequestDiscussions), varargs...)
}

// ListSnippetDiscussions mocks base method.
func (m *MockDiscussionsService) ListSnippetDiscussions(pid any, snippet int, opt *gitlab.ListSnippetDiscussionsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Discussion, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, snippet, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSnippetDiscussions", varargs...)
	ret0, _ := ret[0].([]*gitlab.Discussion)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSnippetDiscussions indicates an expected call of ListSnippetDiscussions.
func (mr *MockDiscussionsServiceMockRecorder) ListSnippetDiscussions(pid, snippet, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, snippet, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnippetDiscussions", reflect.TypeOf((*MockDiscussionsService)(nil).ListSnippetDiscussions), varargs...)
}

// ResolveMergeRequestDiscussion mocks base method.
func (m *MockDiscussionsService) ResolveMergeRequestDiscussion(pid any, mergeRequest int, discussion string, opt *gitlab.ResolveMergeRequestDiscussionOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Discussion, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequest, discussion, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResolveMergeRequestDiscussion", varargs...)
	ret0, _ := ret[0].(*gitlab.Discussion)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ResolveMergeRequestDiscussion indicates an expected call of ResolveMergeRequestDiscussion.
func (mr *MockDiscussionsServiceMockRecorder) ResolveMergeRequestDiscussion(pid, mergeRequest, discussion, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequest, discussion, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveMergeRequestDiscussion", reflect.TypeOf((*MockDiscussionsService)(nil).ResolveMergeRequestDiscussion), varargs...)
}

// UpdateCommitDiscussionNote mocks base method.
func (m *MockDiscussionsService) UpdateCommitDiscussionNote(pid any, commit, discussion string, note int, opt *gitlab.UpdateCommitDiscussionNoteOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, commit, discussion, note, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCommitDiscussionNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Note)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateCommitDiscussionNote indicates an expected call of UpdateCommitDiscussionNote.
func (mr *MockDiscussionsServiceMockRecorder) UpdateCommitDiscussionNote(pid, commit, discussion, note, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, commit, discussion, note, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCommitDiscussionNote", reflect.TypeOf((*MockDiscussionsService)(nil).UpdateCommitDiscussionNote), varargs...)
}

// UpdateEpicDiscussionNote mocks base method.
func (m *MockDiscussionsService) UpdateEpicDiscussionNote(gid any, epic int, discussion string, note int, opt *gitlab.UpdateEpicDiscussionNoteOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, epic, discussion, note, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEpicDiscussionNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Note)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateEpicDiscussionNote indicates an expected call of UpdateEpicDiscussionNote.
func (mr *MockDiscussionsServiceMockRecorder) UpdateEpicDiscussionNote(gid, epic, discussion, note, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, epic, discussion, note, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEpicDiscussionNote", reflect.TypeOf((*MockDiscussionsService)(nil).UpdateEpicDiscussionNote), varargs...)
}

// UpdateIssueDiscussionNote mocks base method.
func (m *MockDiscussionsService) UpdateIssueDiscussionNote(pid any, issue int, discussion string, note int, opt *gitlab.UpdateIssueDiscussionNoteOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, issue, discussion, note, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIssueDiscussionNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Note)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateIssueDiscussionNote indicates an expected call of UpdateIssueDiscussionNote.
func (mr *MockDiscussionsServiceMockRecorder) UpdateIssueDiscussionNote(pid, issue, discussion, note, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, issue, discussion, note, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIssueDiscussionNote", reflect.TypeOf((*MockDiscussionsService)(nil).UpdateIssueDiscussionNote), varargs...)
}

// UpdateMergeRequestDiscussionNote mocks base method.
func (m *MockDiscussionsService) UpdateMergeRequestDiscussionNote(pid any, mergeRequest int, discussion string, note int, opt *gitlab.UpdateMergeRequestDiscussionNoteOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequest, discussion, note, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMergeRequestDiscussionNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Note)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateMergeRequestDiscussionNote indicates an expected call of UpdateMergeRequestDiscussionNote.
func (mr *MockDiscussionsServiceMockRecorder) UpdateMergeRequestDiscussionNote(pid, mergeRequest, discussion, note, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequest, discussion, note, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMergeRequestDiscussionNote", reflect.TypeOf((*MockDiscussionsService)(nil).UpdateMergeRequestDiscussionNote), varargs...)
}

// UpdateSnippetDiscussionNote mocks base method.
func (m *MockDiscussionsService) UpdateSnippetDiscussionNote(pid any, snippet int, discussion string, note int, opt *gitlab.UpdateSnippetDiscussionNoteOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, snippet, discussion, note, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSnippetDiscussionNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Note)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateSnippetDiscussionNote indicates an expected call of UpdateSnippetDiscussionNote.
func (mr *MockDiscussionsServiceMockRecorder) UpdateSnippetDiscussionNote(pid, snippet, discussion, note, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, snippet, discussion, note, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnippetDiscussionNote", reflect.TypeOf((*MockDiscussionsService)(nil).UpdateSnippetDiscussionNote), varargs...)
}
