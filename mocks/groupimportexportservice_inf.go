// Code generated by MockGen. DO NOT EDIT.
// Source: groupimportexportservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=groupimportexportservice_inf.go -destination=mocks/groupimportexportservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	bytes "bytes"
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupImportExportService is a mock of GroupImportExportService interface.
type MockGroupImportExportService struct {
	ctrl     *gomock.Controller
	recorder *MockGroupImportExportServiceMockRecorder
}

// MockGroupImportExportServiceMockRecorder is the mock recorder for MockGroupImportExportService.
type MockGroupImportExportServiceMockRecorder struct {
	mock *MockGroupImportExportService
}

// NewMockGroupImportExportService creates a new mock instance.
func NewMockGroupImportExportService(ctrl *gomock.Controller) *MockGroupImportExportService {
	mock := &MockGroupImportExportService{ctrl: ctrl}
	mock.recorder = &MockGroupImportExportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupImportExportService) EXPECT() *MockGroupImportExportServiceMockRecorder {
	return m.recorder
}

// ExportDownload mocks base method.
func (m *MockGroupImportExportService) ExportDownload(gid any, options ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExportDownload", varargs...)
	ret0, _ := ret[0].(*bytes.Reader)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExportDownload indicates an expected call of ExportDownload.
func (mr *MockGroupImportExportServiceMockRecorder) ExportDownload(gid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportDownload", reflect.TypeOf((*MockGroupImportExportService)(nil).ExportDownload), varargs...)
}

// ImportFile mocks base method.
func (m *MockGroupImportExportService) ImportFile(opt *gitlab.GroupImportFileOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportFile", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportFile indicates an expected call of ImportFile.
func (mr *MockGroupImportExportServiceMockRecorder) ImportFile(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportFile", reflect.TypeOf((*MockGroupImportExportService)(nil).ImportFile), varargs...)
}

// ScheduleExport mocks base method.
func (m *MockGroupImportExportService) ScheduleExport(gid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleExport", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleExport indicates an expected call of ScheduleExport.
func (mr *MockGroupImportExportServiceMockRecorder) ScheduleExport(gid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleExport", reflect.TypeOf((*MockGroupImportExportService)(nil).ScheduleExport), varargs...)
}
