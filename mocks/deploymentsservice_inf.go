// Code generated by MockGen. DO NOT EDIT.
// Source: deploymentsservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=deploymentsservice_inf.go -destination=mocks/deploymentsservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockDeploymentsService is a mock of DeploymentsService interface.
type MockDeploymentsService struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentsServiceMockRecorder
	isgomock struct{}
}

// MockDeploymentsServiceMockRecorder is the mock recorder for MockDeploymentsService.
type MockDeploymentsServiceMockRecorder struct {
	mock *MockDeploymentsService
}

// NewMockDeploymentsService creates a new mock instance.
func NewMockDeploymentsService(ctrl *gomock.Controller) *MockDeploymentsService {
	mock := &MockDeploymentsService{ctrl: ctrl}
	mock.recorder = &MockDeploymentsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentsService) EXPECT() *MockDeploymentsServiceMockRecorder {
	return m.recorder
}

// ApproveOrRejectProjectDeployment mocks base method.
func (m *MockDeploymentsService) ApproveOrRejectProjectDeployment(pid any, deployment int, opt *gitlab.ApproveOrRejectProjectDeploymentOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, deployment, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApproveOrRejectProjectDeployment", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApproveOrRejectProjectDeployment indicates an expected call of ApproveOrRejectProjectDeployment.
func (mr *MockDeploymentsServiceMockRecorder) ApproveOrRejectProjectDeployment(pid, deployment, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, deployment, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveOrRejectProjectDeployment", reflect.TypeOf((*MockDeploymentsService)(nil).ApproveOrRejectProjectDeployment), varargs...)
}

// CreateProjectDeployment mocks base method.
func (m *MockDeploymentsService) CreateProjectDeployment(pid any, opt *gitlab.CreateProjectDeploymentOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Deployment, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProjectDeployment", varargs...)
	ret0, _ := ret[0].(*gitlab.Deployment)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateProjectDeployment indicates an expected call of CreateProjectDeployment.
func (mr *MockDeploymentsServiceMockRecorder) CreateProjectDeployment(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectDeployment", reflect.TypeOf((*MockDeploymentsService)(nil).CreateProjectDeployment), varargs...)
}

// DeleteProjectDeployment mocks base method.
func (m *MockDeploymentsService) DeleteProjectDeployment(pid any, deployment int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, deployment}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProjectDeployment", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectDeployment indicates an expected call of DeleteProjectDeployment.
func (mr *MockDeploymentsServiceMockRecorder) DeleteProjectDeployment(pid, deployment any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, deployment}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectDeployment", reflect.TypeOf((*MockDeploymentsService)(nil).DeleteProjectDeployment), varargs...)
}

// GetProjectDeployment mocks base method.
func (m *MockDeploymentsService) GetProjectDeployment(pid any, deployment int, options ...gitlab.RequestOptionFunc) (*gitlab.Deployment, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, deployment}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectDeployment", varargs...)
	ret0, _ := ret[0].(*gitlab.Deployment)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProjectDeployment indicates an expected call of GetProjectDeployment.
func (mr *MockDeploymentsServiceMockRecorder) GetProjectDeployment(pid, deployment any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, deployment}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectDeployment", reflect.TypeOf((*MockDeploymentsService)(nil).GetProjectDeployment), varargs...)
}

// ListProjectDeployments mocks base method.
func (m *MockDeploymentsService) ListProjectDeployments(pid any, opts *gitlab.ListProjectDeploymentsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Deployment, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opts}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectDeployments", varargs...)
	ret0, _ := ret[0].([]*gitlab.Deployment)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectDeployments indicates an expected call of ListProjectDeployments.
func (mr *MockDeploymentsServiceMockRecorder) ListProjectDeployments(pid, opts any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opts}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectDeployments", reflect.TypeOf((*MockDeploymentsService)(nil).ListProjectDeployments), varargs...)
}

// UpdateProjectDeployment mocks base method.
func (m *MockDeploymentsService) UpdateProjectDeployment(pid any, deployment int, opt *gitlab.UpdateProjectDeploymentOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Deployment, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, deployment, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProjectDeployment", varargs...)
	ret0, _ := ret[0].(*gitlab.Deployment)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateProjectDeployment indicates an expected call of UpdateProjectDeployment.
func (mr *MockDeploymentsServiceMockRecorder) UpdateProjectDeployment(pid, deployment, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, deployment, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectDeployment", reflect.TypeOf((*MockDeploymentsService)(nil).UpdateProjectDeployment), varargs...)
}
