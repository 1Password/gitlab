// Code generated by MockGen. DO NOT EDIT.
// Source: protectedbranchesservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=protectedbranchesservice_inf.go -destination=mocks/protectedbranchesservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockProtectedBranchesService is a mock of ProtectedBranchesService interface.
type MockProtectedBranchesService struct {
	ctrl     *gomock.Controller
	recorder *MockProtectedBranchesServiceMockRecorder
	isgomock struct{}
}

// MockProtectedBranchesServiceMockRecorder is the mock recorder for MockProtectedBranchesService.
type MockProtectedBranchesServiceMockRecorder struct {
	mock *MockProtectedBranchesService
}

// NewMockProtectedBranchesService creates a new mock instance.
func NewMockProtectedBranchesService(ctrl *gomock.Controller) *MockProtectedBranchesService {
	mock := &MockProtectedBranchesService{ctrl: ctrl}
	mock.recorder = &MockProtectedBranchesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProtectedBranchesService) EXPECT() *MockProtectedBranchesServiceMockRecorder {
	return m.recorder
}

// GetProtectedBranch mocks base method.
func (m *MockProtectedBranchesService) GetProtectedBranch(pid any, branch string, options ...gitlab.RequestOptionFunc) (*gitlab.ProtectedBranch, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, branch}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProtectedBranch", varargs...)
	ret0, _ := ret[0].(*gitlab.ProtectedBranch)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProtectedBranch indicates an expected call of GetProtectedBranch.
func (mr *MockProtectedBranchesServiceMockRecorder) GetProtectedBranch(pid, branch any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, branch}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProtectedBranch", reflect.TypeOf((*MockProtectedBranchesService)(nil).GetProtectedBranch), varargs...)
}

// ListProtectedBranches mocks base method.
func (m *MockProtectedBranchesService) ListProtectedBranches(pid any, opt *gitlab.ListProtectedBranchesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProtectedBranch, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProtectedBranches", varargs...)
	ret0, _ := ret[0].([]*gitlab.ProtectedBranch)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProtectedBranches indicates an expected call of ListProtectedBranches.
func (mr *MockProtectedBranchesServiceMockRecorder) ListProtectedBranches(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProtectedBranches", reflect.TypeOf((*MockProtectedBranchesService)(nil).ListProtectedBranches), varargs...)
}

// ProtectRepositoryBranches mocks base method.
func (m *MockProtectedBranchesService) ProtectRepositoryBranches(pid any, opt *gitlab.ProtectRepositoryBranchesOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProtectedBranch, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProtectRepositoryBranches", varargs...)
	ret0, _ := ret[0].(*gitlab.ProtectedBranch)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProtectRepositoryBranches indicates an expected call of ProtectRepositoryBranches.
func (mr *MockProtectedBranchesServiceMockRecorder) ProtectRepositoryBranches(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtectRepositoryBranches", reflect.TypeOf((*MockProtectedBranchesService)(nil).ProtectRepositoryBranches), varargs...)
}

// RequireCodeOwnerApprovals mocks base method.
func (m *MockProtectedBranchesService) RequireCodeOwnerApprovals(pid any, branch string, opt *gitlab.RequireCodeOwnerApprovalsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, branch, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequireCodeOwnerApprovals", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequireCodeOwnerApprovals indicates an expected call of RequireCodeOwnerApprovals.
func (mr *MockProtectedBranchesServiceMockRecorder) RequireCodeOwnerApprovals(pid, branch, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, branch, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequireCodeOwnerApprovals", reflect.TypeOf((*MockProtectedBranchesService)(nil).RequireCodeOwnerApprovals), varargs...)
}

// UnprotectRepositoryBranches mocks base method.
func (m *MockProtectedBranchesService) UnprotectRepositoryBranches(pid any, branch string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, branch}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnprotectRepositoryBranches", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnprotectRepositoryBranches indicates an expected call of UnprotectRepositoryBranches.
func (mr *MockProtectedBranchesServiceMockRecorder) UnprotectRepositoryBranches(pid, branch any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, branch}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnprotectRepositoryBranches", reflect.TypeOf((*MockProtectedBranchesService)(nil).UnprotectRepositoryBranches), varargs...)
}

// UpdateProtectedBranch mocks base method.
func (m *MockProtectedBranchesService) UpdateProtectedBranch(pid any, branch string, opt *gitlab.UpdateProtectedBranchOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProtectedBranch, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, branch, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProtectedBranch", varargs...)
	ret0, _ := ret[0].(*gitlab.ProtectedBranch)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateProtectedBranch indicates an expected call of UpdateProtectedBranch.
func (mr *MockProtectedBranchesServiceMockRecorder) UpdateProtectedBranch(pid, branch, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, branch, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProtectedBranch", reflect.TypeOf((*MockProtectedBranchesService)(nil).UpdateProtectedBranch), varargs...)
}
