// Code generated by MockGen. DO NOT EDIT.
// Source: auditeventsservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=auditeventsservice_inf.go -destination=mocks/auditeventsservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockAuditEventsService is a mock of AuditEventsService interface.
type MockAuditEventsService struct {
	ctrl     *gomock.Controller
	recorder *MockAuditEventsServiceMockRecorder
	isgomock struct{}
}

// MockAuditEventsServiceMockRecorder is the mock recorder for MockAuditEventsService.
type MockAuditEventsServiceMockRecorder struct {
	mock *MockAuditEventsService
}

// NewMockAuditEventsService creates a new mock instance.
func NewMockAuditEventsService(ctrl *gomock.Controller) *MockAuditEventsService {
	mock := &MockAuditEventsService{ctrl: ctrl}
	mock.recorder = &MockAuditEventsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditEventsService) EXPECT() *MockAuditEventsServiceMockRecorder {
	return m.recorder
}

// GetGroupAuditEvent mocks base method.
func (m *MockAuditEventsService) GetGroupAuditEvent(gid any, event int, options ...gitlab.RequestOptionFunc) (*gitlab.AuditEvent, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, event}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupAuditEvent", varargs...)
	ret0, _ := ret[0].(*gitlab.AuditEvent)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroupAuditEvent indicates an expected call of GetGroupAuditEvent.
func (mr *MockAuditEventsServiceMockRecorder) GetGroupAuditEvent(gid, event any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, event}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupAuditEvent", reflect.TypeOf((*MockAuditEventsService)(nil).GetGroupAuditEvent), varargs...)
}

// GetInstanceAuditEvent mocks base method.
func (m *MockAuditEventsService) GetInstanceAuditEvent(event int, options ...gitlab.RequestOptionFunc) (*gitlab.AuditEvent, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{event}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstanceAuditEvent", varargs...)
	ret0, _ := ret[0].(*gitlab.AuditEvent)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceAuditEvent indicates an expected call of GetInstanceAuditEvent.
func (mr *MockAuditEventsServiceMockRecorder) GetInstanceAuditEvent(event any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{event}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceAuditEvent", reflect.TypeOf((*MockAuditEventsService)(nil).GetInstanceAuditEvent), varargs...)
}

// GetProjectAuditEvent mocks base method.
func (m *MockAuditEventsService) GetProjectAuditEvent(pid any, event int, options ...gitlab.RequestOptionFunc) (*gitlab.AuditEvent, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, event}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectAuditEvent", varargs...)
	ret0, _ := ret[0].(*gitlab.AuditEvent)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProjectAuditEvent indicates an expected call of GetProjectAuditEvent.
func (mr *MockAuditEventsServiceMockRecorder) GetProjectAuditEvent(pid, event any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, event}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectAuditEvent", reflect.TypeOf((*MockAuditEventsService)(nil).GetProjectAuditEvent), varargs...)
}

// ListGroupAuditEvents mocks base method.
func (m *MockAuditEventsService) ListGroupAuditEvents(gid any, opt *gitlab.ListAuditEventsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.AuditEvent, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupAuditEvents", varargs...)
	ret0, _ := ret[0].([]*gitlab.AuditEvent)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupAuditEvents indicates an expected call of ListGroupAuditEvents.
func (mr *MockAuditEventsServiceMockRecorder) ListGroupAuditEvents(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupAuditEvents", reflect.TypeOf((*MockAuditEventsService)(nil).ListGroupAuditEvents), varargs...)
}

// ListInstanceAuditEvents mocks base method.
func (m *MockAuditEventsService) ListInstanceAuditEvents(opt *gitlab.ListAuditEventsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.AuditEvent, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInstanceAuditEvents", varargs...)
	ret0, _ := ret[0].([]*gitlab.AuditEvent)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListInstanceAuditEvents indicates an expected call of ListInstanceAuditEvents.
func (mr *MockAuditEventsServiceMockRecorder) ListInstanceAuditEvents(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceAuditEvents", reflect.TypeOf((*MockAuditEventsService)(nil).ListInstanceAuditEvents), varargs...)
}

// ListProjectAuditEvents mocks base method.
func (m *MockAuditEventsService) ListProjectAuditEvents(pid any, opt *gitlab.ListAuditEventsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.AuditEvent, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectAuditEvents", varargs...)
	ret0, _ := ret[0].([]*gitlab.AuditEvent)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectAuditEvents indicates an expected call of ListProjectAuditEvents.
func (mr *MockAuditEventsServiceMockRecorder) ListProjectAuditEvents(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectAuditEvents", reflect.TypeOf((*MockAuditEventsService)(nil).ListProjectAuditEvents), varargs...)
}
