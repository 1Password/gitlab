// Code generated by MockGen. DO NOT EDIT.
// Source: containerregistryservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=containerregistryservice_inf.go -destination=mocks/containerregistryservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockContainerRegistryService is a mock of ContainerRegistryService interface.
type MockContainerRegistryService struct {
	ctrl     *gomock.Controller
	recorder *MockContainerRegistryServiceMockRecorder
}

// MockContainerRegistryServiceMockRecorder is the mock recorder for MockContainerRegistryService.
type MockContainerRegistryServiceMockRecorder struct {
	mock *MockContainerRegistryService
}

// NewMockContainerRegistryService creates a new mock instance.
func NewMockContainerRegistryService(ctrl *gomock.Controller) *MockContainerRegistryService {
	mock := &MockContainerRegistryService{ctrl: ctrl}
	mock.recorder = &MockContainerRegistryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerRegistryService) EXPECT() *MockContainerRegistryServiceMockRecorder {
	return m.recorder
}

// DeleteRegistryRepository mocks base method.
func (m *MockContainerRegistryService) DeleteRegistryRepository(pid any, repository int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, repository}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRegistryRepository", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegistryRepository indicates an expected call of DeleteRegistryRepository.
func (mr *MockContainerRegistryServiceMockRecorder) DeleteRegistryRepository(pid, repository any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, repository}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistryRepository", reflect.TypeOf((*MockContainerRegistryService)(nil).DeleteRegistryRepository), varargs...)
}

// DeleteRegistryRepositoryTag mocks base method.
func (m *MockContainerRegistryService) DeleteRegistryRepositoryTag(pid any, repository int, tagName string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, repository, tagName}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRegistryRepositoryTag", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegistryRepositoryTag indicates an expected call of DeleteRegistryRepositoryTag.
func (mr *MockContainerRegistryServiceMockRecorder) DeleteRegistryRepositoryTag(pid, repository, tagName any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, repository, tagName}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistryRepositoryTag", reflect.TypeOf((*MockContainerRegistryService)(nil).DeleteRegistryRepositoryTag), varargs...)
}

// DeleteRegistryRepositoryTags mocks base method.
func (m *MockContainerRegistryService) DeleteRegistryRepositoryTags(pid any, repository int, opt *gitlab.DeleteRegistryRepositoryTagsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, repository, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRegistryRepositoryTags", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegistryRepositoryTags indicates an expected call of DeleteRegistryRepositoryTags.
func (mr *MockContainerRegistryServiceMockRecorder) DeleteRegistryRepositoryTags(pid, repository, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, repository, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistryRepositoryTags", reflect.TypeOf((*MockContainerRegistryService)(nil).DeleteRegistryRepositoryTags), varargs...)
}

// GetRegistryRepositoryTagDetail mocks base method.
func (m *MockContainerRegistryService) GetRegistryRepositoryTagDetail(pid any, repository int, tagName string, options ...gitlab.RequestOptionFunc) (*gitlab.RegistryRepositoryTag, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, repository, tagName}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRegistryRepositoryTagDetail", varargs...)
	ret0, _ := ret[0].(*gitlab.RegistryRepositoryTag)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRegistryRepositoryTagDetail indicates an expected call of GetRegistryRepositoryTagDetail.
func (mr *MockContainerRegistryServiceMockRecorder) GetRegistryRepositoryTagDetail(pid, repository, tagName any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, repository, tagName}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistryRepositoryTagDetail", reflect.TypeOf((*MockContainerRegistryService)(nil).GetRegistryRepositoryTagDetail), varargs...)
}

// GetSingleRegistryRepository mocks base method.
func (m *MockContainerRegistryService) GetSingleRegistryRepository(pid any, opt *gitlab.GetSingleRegistryRepositoryOptions, options ...gitlab.RequestOptionFunc) (*gitlab.RegistryRepository, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSingleRegistryRepository", varargs...)
	ret0, _ := ret[0].(*gitlab.RegistryRepository)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSingleRegistryRepository indicates an expected call of GetSingleRegistryRepository.
func (mr *MockContainerRegistryServiceMockRecorder) GetSingleRegistryRepository(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingleRegistryRepository", reflect.TypeOf((*MockContainerRegistryService)(nil).GetSingleRegistryRepository), varargs...)
}

// ListGroupRegistryRepositories mocks base method.
func (m *MockContainerRegistryService) ListGroupRegistryRepositories(gid any, opt *gitlab.ListRegistryRepositoriesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.RegistryRepository, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupRegistryRepositories", varargs...)
	ret0, _ := ret[0].([]*gitlab.RegistryRepository)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupRegistryRepositories indicates an expected call of ListGroupRegistryRepositories.
func (mr *MockContainerRegistryServiceMockRecorder) ListGroupRegistryRepositories(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupRegistryRepositories", reflect.TypeOf((*MockContainerRegistryService)(nil).ListGroupRegistryRepositories), varargs...)
}

// ListProjectRegistryRepositories mocks base method.
func (m *MockContainerRegistryService) ListProjectRegistryRepositories(pid any, opt *gitlab.ListRegistryRepositoriesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.RegistryRepository, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectRegistryRepositories", varargs...)
	ret0, _ := ret[0].([]*gitlab.RegistryRepository)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectRegistryRepositories indicates an expected call of ListProjectRegistryRepositories.
func (mr *MockContainerRegistryServiceMockRecorder) ListProjectRegistryRepositories(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectRegistryRepositories", reflect.TypeOf((*MockContainerRegistryService)(nil).ListProjectRegistryRepositories), varargs...)
}

// ListRegistryRepositoryTags mocks base method.
func (m *MockContainerRegistryService) ListRegistryRepositoryTags(pid any, repository int, opt *gitlab.ListRegistryRepositoryTagsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.RegistryRepositoryTag, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, repository, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRegistryRepositoryTags", varargs...)
	ret0, _ := ret[0].([]*gitlab.RegistryRepositoryTag)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRegistryRepositoryTags indicates an expected call of ListRegistryRepositoryTags.
func (mr *MockContainerRegistryServiceMockRecorder) ListRegistryRepositoryTags(pid, repository, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, repository, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegistryRepositoryTags", reflect.TypeOf((*MockContainerRegistryService)(nil).ListRegistryRepositoryTags), varargs...)
}
