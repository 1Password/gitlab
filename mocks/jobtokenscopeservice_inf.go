// Code generated by MockGen. DO NOT EDIT.
// Source: jobtokenscopeservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=jobtokenscopeservice_inf.go -destination=mocks/jobtokenscopeservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockJobTokenScopeService is a mock of JobTokenScopeService interface.
type MockJobTokenScopeService struct {
	ctrl     *gomock.Controller
	recorder *MockJobTokenScopeServiceMockRecorder
	isgomock struct{}
}

// MockJobTokenScopeServiceMockRecorder is the mock recorder for MockJobTokenScopeService.
type MockJobTokenScopeServiceMockRecorder struct {
	mock *MockJobTokenScopeService
}

// NewMockJobTokenScopeService creates a new mock instance.
func NewMockJobTokenScopeService(ctrl *gomock.Controller) *MockJobTokenScopeService {
	mock := &MockJobTokenScopeService{ctrl: ctrl}
	mock.recorder = &MockJobTokenScopeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobTokenScopeService) EXPECT() *MockJobTokenScopeServiceMockRecorder {
	return m.recorder
}

// AddGroupToJobTokenAllowlist mocks base method.
func (m *MockJobTokenScopeService) AddGroupToJobTokenAllowlist(pid any, opt *gitlab.AddGroupToJobTokenAllowlistOptions, options ...gitlab.RequestOptionFunc) (*gitlab.JobTokenAllowlistItem, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddGroupToJobTokenAllowlist", varargs...)
	ret0, _ := ret[0].(*gitlab.JobTokenAllowlistItem)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddGroupToJobTokenAllowlist indicates an expected call of AddGroupToJobTokenAllowlist.
func (mr *MockJobTokenScopeServiceMockRecorder) AddGroupToJobTokenAllowlist(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGroupToJobTokenAllowlist", reflect.TypeOf((*MockJobTokenScopeService)(nil).AddGroupToJobTokenAllowlist), varargs...)
}

// AddProjectToJobScopeAllowList mocks base method.
func (m *MockJobTokenScopeService) AddProjectToJobScopeAllowList(pid any, opt *gitlab.JobTokenInboundAllowOptions, options ...gitlab.RequestOptionFunc) (*gitlab.JobTokenInboundAllowItem, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddProjectToJobScopeAllowList", varargs...)
	ret0, _ := ret[0].(*gitlab.JobTokenInboundAllowItem)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddProjectToJobScopeAllowList indicates an expected call of AddProjectToJobScopeAllowList.
func (mr *MockJobTokenScopeServiceMockRecorder) AddProjectToJobScopeAllowList(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProjectToJobScopeAllowList", reflect.TypeOf((*MockJobTokenScopeService)(nil).AddProjectToJobScopeAllowList), varargs...)
}

// GetJobTokenAllowlistGroups mocks base method.
func (m *MockJobTokenScopeService) GetJobTokenAllowlistGroups(pid any, opt *gitlab.GetJobTokenAllowlistGroupsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Group, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJobTokenAllowlistGroups", varargs...)
	ret0, _ := ret[0].([]*gitlab.Group)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetJobTokenAllowlistGroups indicates an expected call of GetJobTokenAllowlistGroups.
func (mr *MockJobTokenScopeServiceMockRecorder) GetJobTokenAllowlistGroups(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobTokenAllowlistGroups", reflect.TypeOf((*MockJobTokenScopeService)(nil).GetJobTokenAllowlistGroups), varargs...)
}

// GetProjectJobTokenAccessSettings mocks base method.
func (m *MockJobTokenScopeService) GetProjectJobTokenAccessSettings(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.JobTokenAccessSettings, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectJobTokenAccessSettings", varargs...)
	ret0, _ := ret[0].(*gitlab.JobTokenAccessSettings)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProjectJobTokenAccessSettings indicates an expected call of GetProjectJobTokenAccessSettings.
func (mr *MockJobTokenScopeServiceMockRecorder) GetProjectJobTokenAccessSettings(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectJobTokenAccessSettings", reflect.TypeOf((*MockJobTokenScopeService)(nil).GetProjectJobTokenAccessSettings), varargs...)
}

// GetProjectJobTokenInboundAllowList mocks base method.
func (m *MockJobTokenScopeService) GetProjectJobTokenInboundAllowList(pid any, opt *gitlab.GetJobTokenInboundAllowListOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Project, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectJobTokenInboundAllowList", varargs...)
	ret0, _ := ret[0].([]*gitlab.Project)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProjectJobTokenInboundAllowList indicates an expected call of GetProjectJobTokenInboundAllowList.
func (mr *MockJobTokenScopeServiceMockRecorder) GetProjectJobTokenInboundAllowList(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectJobTokenInboundAllowList", reflect.TypeOf((*MockJobTokenScopeService)(nil).GetProjectJobTokenInboundAllowList), varargs...)
}

// PatchProjectJobTokenAccessSettings mocks base method.
func (m *MockJobTokenScopeService) PatchProjectJobTokenAccessSettings(pid any, opt *gitlab.PatchProjectJobTokenAccessSettingsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchProjectJobTokenAccessSettings", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchProjectJobTokenAccessSettings indicates an expected call of PatchProjectJobTokenAccessSettings.
func (mr *MockJobTokenScopeServiceMockRecorder) PatchProjectJobTokenAccessSettings(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchProjectJobTokenAccessSettings", reflect.TypeOf((*MockJobTokenScopeService)(nil).PatchProjectJobTokenAccessSettings), varargs...)
}

// RemoveGroupFromJobTokenAllowlist mocks base method.
func (m *MockJobTokenScopeService) RemoveGroupFromJobTokenAllowlist(pid any, targetGroup int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, targetGroup}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveGroupFromJobTokenAllowlist", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveGroupFromJobTokenAllowlist indicates an expected call of RemoveGroupFromJobTokenAllowlist.
func (mr *MockJobTokenScopeServiceMockRecorder) RemoveGroupFromJobTokenAllowlist(pid, targetGroup any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, targetGroup}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveGroupFromJobTokenAllowlist", reflect.TypeOf((*MockJobTokenScopeService)(nil).RemoveGroupFromJobTokenAllowlist), varargs...)
}

// RemoveProjectFromJobScopeAllowList mocks base method.
func (m *MockJobTokenScopeService) RemoveProjectFromJobScopeAllowList(pid any, targetProject int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, targetProject}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveProjectFromJobScopeAllowList", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveProjectFromJobScopeAllowList indicates an expected call of RemoveProjectFromJobScopeAllowList.
func (mr *MockJobTokenScopeServiceMockRecorder) RemoveProjectFromJobScopeAllowList(pid, targetProject any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, targetProject}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProjectFromJobScopeAllowList", reflect.TypeOf((*MockJobTokenScopeService)(nil).RemoveProjectFromJobScopeAllowList), varargs...)
}
