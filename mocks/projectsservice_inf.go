// Code generated by MockGen. DO NOT EDIT.
// Source: projectsservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=projectsservice_inf.go -destination=mocks/projectsservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectsService is a mock of ProjectsService interface.
type MockProjectsService struct {
	ctrl     *gomock.Controller
	recorder *MockProjectsServiceMockRecorder
}

// MockProjectsServiceMockRecorder is the mock recorder for MockProjectsService.
type MockProjectsServiceMockRecorder struct {
	mock *MockProjectsService
}

// NewMockProjectsService creates a new mock instance.
func NewMockProjectsService(ctrl *gomock.Controller) *MockProjectsService {
	mock := &MockProjectsService{ctrl: ctrl}
	mock.recorder = &MockProjectsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectsService) EXPECT() *MockProjectsServiceMockRecorder {
	return m.recorder
}

// AddProjectHook mocks base method.
func (m *MockProjectsService) AddProjectHook(pid any, opt *gitlab.AddProjectHookOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectHook, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddProjectHook", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectHook)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddProjectHook indicates an expected call of AddProjectHook.
func (mr *MockProjectsServiceMockRecorder) AddProjectHook(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProjectHook", reflect.TypeOf((*MockProjectsService)(nil).AddProjectHook), varargs...)
}

// AddProjectPushRule mocks base method.
func (m *MockProjectsService) AddProjectPushRule(pid any, opt *gitlab.AddProjectPushRuleOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectPushRules, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddProjectPushRule", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectPushRules)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddProjectPushRule indicates an expected call of AddProjectPushRule.
func (mr *MockProjectsServiceMockRecorder) AddProjectPushRule(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProjectPushRule", reflect.TypeOf((*MockProjectsService)(nil).AddProjectPushRule), varargs...)
}

// ArchiveProject mocks base method.
func (m *MockProjectsService) ArchiveProject(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Project, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ArchiveProject", varargs...)
	ret0, _ := ret[0].(*gitlab.Project)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ArchiveProject indicates an expected call of ArchiveProject.
func (mr *MockProjectsServiceMockRecorder) ArchiveProject(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveProject", reflect.TypeOf((*MockProjectsService)(nil).ArchiveProject), varargs...)
}

// ChangeAllowedApprovers mocks base method.
func (m *MockProjectsService) ChangeAllowedApprovers(pid any, opt *gitlab.ChangeAllowedApproversOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectApprovals, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeAllowedApprovers", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectApprovals)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ChangeAllowedApprovers indicates an expected call of ChangeAllowedApprovers.
func (mr *MockProjectsServiceMockRecorder) ChangeAllowedApprovers(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeAllowedApprovers", reflect.TypeOf((*MockProjectsService)(nil).ChangeAllowedApprovers), varargs...)
}

// ChangeApprovalConfiguration mocks base method.
func (m *MockProjectsService) ChangeApprovalConfiguration(pid any, opt *gitlab.ChangeApprovalConfigurationOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectApprovals, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeApprovalConfiguration", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectApprovals)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ChangeApprovalConfiguration indicates an expected call of ChangeApprovalConfiguration.
func (mr *MockProjectsServiceMockRecorder) ChangeApprovalConfiguration(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeApprovalConfiguration", reflect.TypeOf((*MockProjectsService)(nil).ChangeApprovalConfiguration), varargs...)
}

// CreateProject mocks base method.
func (m *MockProjectsService) CreateProject(opt *gitlab.CreateProjectOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Project, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProject", varargs...)
	ret0, _ := ret[0].(*gitlab.Project)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockProjectsServiceMockRecorder) CreateProject(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockProjectsService)(nil).CreateProject), varargs...)
}

// CreateProjectApprovalRule mocks base method.
func (m *MockProjectsService) CreateProjectApprovalRule(pid any, opt *gitlab.CreateProjectLevelRuleOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectApprovalRule, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProjectApprovalRule", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectApprovalRule)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateProjectApprovalRule indicates an expected call of CreateProjectApprovalRule.
func (mr *MockProjectsServiceMockRecorder) CreateProjectApprovalRule(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectApprovalRule", reflect.TypeOf((*MockProjectsService)(nil).CreateProjectApprovalRule), varargs...)
}

// CreateProjectForUser mocks base method.
func (m *MockProjectsService) CreateProjectForUser(user int, opt *gitlab.CreateProjectForUserOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Project, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{user, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProjectForUser", varargs...)
	ret0, _ := ret[0].(*gitlab.Project)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateProjectForUser indicates an expected call of CreateProjectForUser.
func (mr *MockProjectsServiceMockRecorder) CreateProjectForUser(user, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectForUser", reflect.TypeOf((*MockProjectsService)(nil).CreateProjectForUser), varargs...)
}

// CreateProjectForkRelation mocks base method.
func (m *MockProjectsService) CreateProjectForkRelation(pid any, fork int, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectForkRelation, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, fork}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProjectForkRelation", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectForkRelation)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateProjectForkRelation indicates an expected call of CreateProjectForkRelation.
func (mr *MockProjectsServiceMockRecorder) CreateProjectForkRelation(pid, fork any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, fork}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectForkRelation", reflect.TypeOf((*MockProjectsService)(nil).CreateProjectForkRelation), varargs...)
}

// DeleteProject mocks base method.
func (m *MockProjectsService) DeleteProject(pid any, opt *gitlab.DeleteProjectOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProject", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockProjectsServiceMockRecorder) DeleteProject(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockProjectsService)(nil).DeleteProject), varargs...)
}

// DeleteProjectApprovalRule mocks base method.
func (m *MockProjectsService) DeleteProjectApprovalRule(pid any, approvalRule int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, approvalRule}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProjectApprovalRule", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectApprovalRule indicates an expected call of DeleteProjectApprovalRule.
func (mr *MockProjectsServiceMockRecorder) DeleteProjectApprovalRule(pid, approvalRule any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, approvalRule}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectApprovalRule", reflect.TypeOf((*MockProjectsService)(nil).DeleteProjectApprovalRule), varargs...)
}

// DeleteProjectCustomHeader mocks base method.
func (m *MockProjectsService) DeleteProjectCustomHeader(pid any, hook int, key string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, hook, key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProjectCustomHeader", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectCustomHeader indicates an expected call of DeleteProjectCustomHeader.
func (mr *MockProjectsServiceMockRecorder) DeleteProjectCustomHeader(pid, hook, key any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, hook, key}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectCustomHeader", reflect.TypeOf((*MockProjectsService)(nil).DeleteProjectCustomHeader), varargs...)
}

// DeleteProjectForkRelation mocks base method.
func (m *MockProjectsService) DeleteProjectForkRelation(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProjectForkRelation", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectForkRelation indicates an expected call of DeleteProjectForkRelation.
func (mr *MockProjectsServiceMockRecorder) DeleteProjectForkRelation(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectForkRelation", reflect.TypeOf((*MockProjectsService)(nil).DeleteProjectForkRelation), varargs...)
}

// DeleteProjectHook mocks base method.
func (m *MockProjectsService) DeleteProjectHook(pid any, hook int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, hook}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProjectHook", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectHook indicates an expected call of DeleteProjectHook.
func (mr *MockProjectsServiceMockRecorder) DeleteProjectHook(pid, hook any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, hook}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectHook", reflect.TypeOf((*MockProjectsService)(nil).DeleteProjectHook), varargs...)
}

// DeleteProjectPushRule mocks base method.
func (m *MockProjectsService) DeleteProjectPushRule(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProjectPushRule", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectPushRule indicates an expected call of DeleteProjectPushRule.
func (mr *MockProjectsServiceMockRecorder) DeleteProjectPushRule(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectPushRule", reflect.TypeOf((*MockProjectsService)(nil).DeleteProjectPushRule), varargs...)
}

// DeleteSharedProjectFromGroup mocks base method.
func (m *MockProjectsService) DeleteSharedProjectFromGroup(pid any, groupID int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, groupID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSharedProjectFromGroup", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSharedProjectFromGroup indicates an expected call of DeleteSharedProjectFromGroup.
func (mr *MockProjectsServiceMockRecorder) DeleteSharedProjectFromGroup(pid, groupID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, groupID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSharedProjectFromGroup", reflect.TypeOf((*MockProjectsService)(nil).DeleteSharedProjectFromGroup), varargs...)
}

// EditProject mocks base method.
func (m *MockProjectsService) EditProject(pid any, opt *gitlab.EditProjectOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Project, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditProject", varargs...)
	ret0, _ := ret[0].(*gitlab.Project)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditProject indicates an expected call of EditProject.
func (mr *MockProjectsServiceMockRecorder) EditProject(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProject", reflect.TypeOf((*MockProjectsService)(nil).EditProject), varargs...)
}

// EditProjectHook mocks base method.
func (m *MockProjectsService) EditProjectHook(pid any, hook int, opt *gitlab.EditProjectHookOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectHook, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, hook, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditProjectHook", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectHook)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditProjectHook indicates an expected call of EditProjectHook.
func (mr *MockProjectsServiceMockRecorder) EditProjectHook(pid, hook, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, hook, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProjectHook", reflect.TypeOf((*MockProjectsService)(nil).EditProjectHook), varargs...)
}

// EditProjectPushRule mocks base method.
func (m *MockProjectsService) EditProjectPushRule(pid any, opt *gitlab.EditProjectPushRuleOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectPushRules, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditProjectPushRule", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectPushRules)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditProjectPushRule indicates an expected call of EditProjectPushRule.
func (mr *MockProjectsServiceMockRecorder) EditProjectPushRule(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProjectPushRule", reflect.TypeOf((*MockProjectsService)(nil).EditProjectPushRule), varargs...)
}

// ForkProject mocks base method.
func (m *MockProjectsService) ForkProject(pid any, opt *gitlab.ForkProjectOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Project, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ForkProject", varargs...)
	ret0, _ := ret[0].(*gitlab.Project)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ForkProject indicates an expected call of ForkProject.
func (mr *MockProjectsServiceMockRecorder) ForkProject(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForkProject", reflect.TypeOf((*MockProjectsService)(nil).ForkProject), varargs...)
}

// GetApprovalConfiguration mocks base method.
func (m *MockProjectsService) GetApprovalConfiguration(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectApprovals, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApprovalConfiguration", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectApprovals)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetApprovalConfiguration indicates an expected call of GetApprovalConfiguration.
func (mr *MockProjectsServiceMockRecorder) GetApprovalConfiguration(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApprovalConfiguration", reflect.TypeOf((*MockProjectsService)(nil).GetApprovalConfiguration), varargs...)
}

// GetProject mocks base method.
func (m *MockProjectsService) GetProject(pid any, opt *gitlab.GetProjectOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Project, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProject", varargs...)
	ret0, _ := ret[0].(*gitlab.Project)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProject indicates an expected call of GetProject.
func (mr *MockProjectsServiceMockRecorder) GetProject(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockProjectsService)(nil).GetProject), varargs...)
}

// GetProjectApprovalRule mocks base method.
func (m *MockProjectsService) GetProjectApprovalRule(pid any, ruleID int, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectApprovalRule, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, ruleID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectApprovalRule", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectApprovalRule)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProjectApprovalRule indicates an expected call of GetProjectApprovalRule.
func (mr *MockProjectsServiceMockRecorder) GetProjectApprovalRule(pid, ruleID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, ruleID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectApprovalRule", reflect.TypeOf((*MockProjectsService)(nil).GetProjectApprovalRule), varargs...)
}

// GetProjectApprovalRules mocks base method.
func (m *MockProjectsService) GetProjectApprovalRules(pid any, opt *gitlab.GetProjectApprovalRulesListsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectApprovalRule, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectApprovalRules", varargs...)
	ret0, _ := ret[0].([]*gitlab.ProjectApprovalRule)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProjectApprovalRules indicates an expected call of GetProjectApprovalRules.
func (mr *MockProjectsServiceMockRecorder) GetProjectApprovalRules(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectApprovalRules", reflect.TypeOf((*MockProjectsService)(nil).GetProjectApprovalRules), varargs...)
}

// GetProjectHook mocks base method.
func (m *MockProjectsService) GetProjectHook(pid any, hook int, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectHook, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, hook}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectHook", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectHook)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProjectHook indicates an expected call of GetProjectHook.
func (mr *MockProjectsServiceMockRecorder) GetProjectHook(pid, hook any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, hook}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectHook", reflect.TypeOf((*MockProjectsService)(nil).GetProjectHook), varargs...)
}

// GetProjectLanguages mocks base method.
func (m *MockProjectsService) GetProjectLanguages(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectLanguages, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectLanguages", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectLanguages)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProjectLanguages indicates an expected call of GetProjectLanguages.
func (mr *MockProjectsServiceMockRecorder) GetProjectLanguages(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectLanguages", reflect.TypeOf((*MockProjectsService)(nil).GetProjectLanguages), varargs...)
}

// GetProjectPullMirrorDetails mocks base method.
func (m *MockProjectsService) GetProjectPullMirrorDetails(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectPullMirrorDetails, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectPullMirrorDetails", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectPullMirrorDetails)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProjectPullMirrorDetails indicates an expected call of GetProjectPullMirrorDetails.
func (mr *MockProjectsServiceMockRecorder) GetProjectPullMirrorDetails(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectPullMirrorDetails", reflect.TypeOf((*MockProjectsService)(nil).GetProjectPullMirrorDetails), varargs...)
}

// GetProjectPushRules mocks base method.
func (m *MockProjectsService) GetProjectPushRules(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectPushRules, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectPushRules", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectPushRules)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProjectPushRules indicates an expected call of GetProjectPushRules.
func (mr *MockProjectsServiceMockRecorder) GetProjectPushRules(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectPushRules", reflect.TypeOf((*MockProjectsService)(nil).GetProjectPushRules), varargs...)
}

// GetRepositoryStorage mocks base method.
func (m *MockProjectsService) GetRepositoryStorage(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectReposityStorage, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRepositoryStorage", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectReposityStorage)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRepositoryStorage indicates an expected call of GetRepositoryStorage.
func (mr *MockProjectsServiceMockRecorder) GetRepositoryStorage(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryStorage", reflect.TypeOf((*MockProjectsService)(nil).GetRepositoryStorage), varargs...)
}

// ListProjectForks mocks base method.
func (m *MockProjectsService) ListProjectForks(pid any, opt *gitlab.ListProjectsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Project, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectForks", varargs...)
	ret0, _ := ret[0].([]*gitlab.Project)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectForks indicates an expected call of ListProjectForks.
func (mr *MockProjectsServiceMockRecorder) ListProjectForks(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectForks", reflect.TypeOf((*MockProjectsService)(nil).ListProjectForks), varargs...)
}

// ListProjectHooks mocks base method.
func (m *MockProjectsService) ListProjectHooks(pid any, opt *gitlab.ListProjectHooksOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectHook, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectHooks", varargs...)
	ret0, _ := ret[0].([]*gitlab.ProjectHook)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectHooks indicates an expected call of ListProjectHooks.
func (mr *MockProjectsServiceMockRecorder) ListProjectHooks(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectHooks", reflect.TypeOf((*MockProjectsService)(nil).ListProjectHooks), varargs...)
}

// ListProjects mocks base method.
func (m *MockProjectsService) ListProjects(opt *gitlab.ListProjectsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Project, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjects", varargs...)
	ret0, _ := ret[0].([]*gitlab.Project)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockProjectsServiceMockRecorder) ListProjects(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockProjectsService)(nil).ListProjects), varargs...)
}

// ListProjectsGroups mocks base method.
func (m *MockProjectsService) ListProjectsGroups(pid any, opt *gitlab.ListProjectGroupOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectGroup, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectsGroups", varargs...)
	ret0, _ := ret[0].([]*gitlab.ProjectGroup)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectsGroups indicates an expected call of ListProjectsGroups.
func (mr *MockProjectsServiceMockRecorder) ListProjectsGroups(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectsGroups", reflect.TypeOf((*MockProjectsService)(nil).ListProjectsGroups), varargs...)
}

// ListProjectsInvitedGroups mocks base method.
func (m *MockProjectsService) ListProjectsInvitedGroups(pid any, opt *gitlab.ListProjectInvidedGroupOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectGroup, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectsInvitedGroups", varargs...)
	ret0, _ := ret[0].([]*gitlab.ProjectGroup)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectsInvitedGroups indicates an expected call of ListProjectsInvitedGroups.
func (mr *MockProjectsServiceMockRecorder) ListProjectsInvitedGroups(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectsInvitedGroups", reflect.TypeOf((*MockProjectsService)(nil).ListProjectsInvitedGroups), varargs...)
}

// ListProjectsUsers mocks base method.
func (m *MockProjectsService) ListProjectsUsers(pid any, opt *gitlab.ListProjectUserOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectUser, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectsUsers", varargs...)
	ret0, _ := ret[0].([]*gitlab.ProjectUser)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectsUsers indicates an expected call of ListProjectsUsers.
func (mr *MockProjectsServiceMockRecorder) ListProjectsUsers(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectsUsers", reflect.TypeOf((*MockProjectsService)(nil).ListProjectsUsers), varargs...)
}

// ListUserContributedProjects mocks base method.
func (m *MockProjectsService) ListUserContributedProjects(uid any, opt *gitlab.ListProjectsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Project, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{uid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUserContributedProjects", varargs...)
	ret0, _ := ret[0].([]*gitlab.Project)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUserContributedProjects indicates an expected call of ListUserContributedProjects.
func (mr *MockProjectsServiceMockRecorder) ListUserContributedProjects(uid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{uid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserContributedProjects", reflect.TypeOf((*MockProjectsService)(nil).ListUserContributedProjects), varargs...)
}

// ListUserProjects mocks base method.
func (m *MockProjectsService) ListUserProjects(uid any, opt *gitlab.ListProjectsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Project, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{uid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUserProjects", varargs...)
	ret0, _ := ret[0].([]*gitlab.Project)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUserProjects indicates an expected call of ListUserProjects.
func (mr *MockProjectsServiceMockRecorder) ListUserProjects(uid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{uid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserProjects", reflect.TypeOf((*MockProjectsService)(nil).ListUserProjects), varargs...)
}

// ListUserStarredProjects mocks base method.
func (m *MockProjectsService) ListUserStarredProjects(uid any, opt *gitlab.ListProjectsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Project, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{uid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUserStarredProjects", varargs...)
	ret0, _ := ret[0].([]*gitlab.Project)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUserStarredProjects indicates an expected call of ListUserStarredProjects.
func (mr *MockProjectsServiceMockRecorder) ListUserStarredProjects(uid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{uid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserStarredProjects", reflect.TypeOf((*MockProjectsService)(nil).ListUserStarredProjects), varargs...)
}

// SetProjectCustomHeader mocks base method.
func (m *MockProjectsService) SetProjectCustomHeader(pid any, hook int, key string, opt *gitlab.SetHookCustomHeaderOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, hook, key, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetProjectCustomHeader", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetProjectCustomHeader indicates an expected call of SetProjectCustomHeader.
func (mr *MockProjectsServiceMockRecorder) SetProjectCustomHeader(pid, hook, key, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, hook, key, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProjectCustomHeader", reflect.TypeOf((*MockProjectsService)(nil).SetProjectCustomHeader), varargs...)
}

// ShareProjectWithGroup mocks base method.
func (m *MockProjectsService) ShareProjectWithGroup(pid any, opt *gitlab.ShareWithGroupOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ShareProjectWithGroup", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShareProjectWithGroup indicates an expected call of ShareProjectWithGroup.
func (mr *MockProjectsServiceMockRecorder) ShareProjectWithGroup(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareProjectWithGroup", reflect.TypeOf((*MockProjectsService)(nil).ShareProjectWithGroup), varargs...)
}

// StarProject mocks base method.
func (m *MockProjectsService) StarProject(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Project, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StarProject", varargs...)
	ret0, _ := ret[0].(*gitlab.Project)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StarProject indicates an expected call of StarProject.
func (mr *MockProjectsServiceMockRecorder) StarProject(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StarProject", reflect.TypeOf((*MockProjectsService)(nil).StarProject), varargs...)
}

// StartHousekeepingProject mocks base method.
func (m *MockProjectsService) StartHousekeepingProject(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartHousekeepingProject", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartHousekeepingProject indicates an expected call of StartHousekeepingProject.
func (mr *MockProjectsServiceMockRecorder) StartHousekeepingProject(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartHousekeepingProject", reflect.TypeOf((*MockProjectsService)(nil).StartHousekeepingProject), varargs...)
}

// StartMirroringProject mocks base method.
func (m *MockProjectsService) StartMirroringProject(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartMirroringProject", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartMirroringProject indicates an expected call of StartMirroringProject.
func (mr *MockProjectsServiceMockRecorder) StartMirroringProject(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMirroringProject", reflect.TypeOf((*MockProjectsService)(nil).StartMirroringProject), varargs...)
}

// TransferProject mocks base method.
func (m *MockProjectsService) TransferProject(pid any, opt *gitlab.TransferProjectOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Project, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TransferProject", varargs...)
	ret0, _ := ret[0].(*gitlab.Project)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TransferProject indicates an expected call of TransferProject.
func (mr *MockProjectsServiceMockRecorder) TransferProject(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferProject", reflect.TypeOf((*MockProjectsService)(nil).TransferProject), varargs...)
}

// TriggerTestProjectHook mocks base method.
func (m *MockProjectsService) TriggerTestProjectHook(pid any, hook int, event gitlab.ProjectHookEvent, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, hook, event}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TriggerTestProjectHook", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerTestProjectHook indicates an expected call of TriggerTestProjectHook.
func (mr *MockProjectsServiceMockRecorder) TriggerTestProjectHook(pid, hook, event any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, hook, event}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerTestProjectHook", reflect.TypeOf((*MockProjectsService)(nil).TriggerTestProjectHook), varargs...)
}

// UnarchiveProject mocks base method.
func (m *MockProjectsService) UnarchiveProject(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Project, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnarchiveProject", varargs...)
	ret0, _ := ret[0].(*gitlab.Project)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UnarchiveProject indicates an expected call of UnarchiveProject.
func (mr *MockProjectsServiceMockRecorder) UnarchiveProject(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnarchiveProject", reflect.TypeOf((*MockProjectsService)(nil).UnarchiveProject), varargs...)
}

// UnstarProject mocks base method.
func (m *MockProjectsService) UnstarProject(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Project, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnstarProject", varargs...)
	ret0, _ := ret[0].(*gitlab.Project)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UnstarProject indicates an expected call of UnstarProject.
func (mr *MockProjectsServiceMockRecorder) UnstarProject(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnstarProject", reflect.TypeOf((*MockProjectsService)(nil).UnstarProject), varargs...)
}

// UpdateProjectApprovalRule mocks base method.
func (m *MockProjectsService) UpdateProjectApprovalRule(pid any, approvalRule int, opt *gitlab.UpdateProjectLevelRuleOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectApprovalRule, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, approvalRule, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProjectApprovalRule", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectApprovalRule)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateProjectApprovalRule indicates an expected call of UpdateProjectApprovalRule.
func (mr *MockProjectsServiceMockRecorder) UpdateProjectApprovalRule(pid, approvalRule, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, approvalRule, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectApprovalRule", reflect.TypeOf((*MockProjectsService)(nil).UpdateProjectApprovalRule), varargs...)
}

// UploadAvatar mocks base method.
func (m *MockProjectsService) UploadAvatar(pid any, avatar io.Reader, filename string, options ...gitlab.RequestOptionFunc) (*gitlab.Project, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, avatar, filename}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadAvatar", varargs...)
	ret0, _ := ret[0].(*gitlab.Project)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UploadAvatar indicates an expected call of UploadAvatar.
func (mr *MockProjectsServiceMockRecorder) UploadAvatar(pid, avatar, filename any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, avatar, filename}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAvatar", reflect.TypeOf((*MockProjectsService)(nil).UploadAvatar), varargs...)
}

// UploadFile mocks base method.
func (m *MockProjectsService) UploadFile(pid any, content io.Reader, filename string, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectFile, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, content, filename}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadFile", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectFile)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockProjectsServiceMockRecorder) UploadFile(pid, content, filename any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, content, filename}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockProjectsService)(nil).UploadFile), varargs...)
}
