// Code generated by MockGen. DO NOT EDIT.
// Source: projectfeatureflagservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=projectfeatureflagservice_inf.go -destination=mocks/projectfeatureflagservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectFeatureFlagService is a mock of ProjectFeatureFlagService interface.
type MockProjectFeatureFlagService struct {
	ctrl     *gomock.Controller
	recorder *MockProjectFeatureFlagServiceMockRecorder
	isgomock struct{}
}

// MockProjectFeatureFlagServiceMockRecorder is the mock recorder for MockProjectFeatureFlagService.
type MockProjectFeatureFlagServiceMockRecorder struct {
	mock *MockProjectFeatureFlagService
}

// NewMockProjectFeatureFlagService creates a new mock instance.
func NewMockProjectFeatureFlagService(ctrl *gomock.Controller) *MockProjectFeatureFlagService {
	mock := &MockProjectFeatureFlagService{ctrl: ctrl}
	mock.recorder = &MockProjectFeatureFlagServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectFeatureFlagService) EXPECT() *MockProjectFeatureFlagServiceMockRecorder {
	return m.recorder
}

// CreateProjectFeatureFlag mocks base method.
func (m *MockProjectFeatureFlagService) CreateProjectFeatureFlag(pid any, opt *gitlab.CreateProjectFeatureFlagOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectFeatureFlag, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProjectFeatureFlag", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectFeatureFlag)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateProjectFeatureFlag indicates an expected call of CreateProjectFeatureFlag.
func (mr *MockProjectFeatureFlagServiceMockRecorder) CreateProjectFeatureFlag(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectFeatureFlag", reflect.TypeOf((*MockProjectFeatureFlagService)(nil).CreateProjectFeatureFlag), varargs...)
}

// DeleteProjectFeatureFlag mocks base method.
func (m *MockProjectFeatureFlagService) DeleteProjectFeatureFlag(pid any, name string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, name}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProjectFeatureFlag", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectFeatureFlag indicates an expected call of DeleteProjectFeatureFlag.
func (mr *MockProjectFeatureFlagServiceMockRecorder) DeleteProjectFeatureFlag(pid, name any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, name}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectFeatureFlag", reflect.TypeOf((*MockProjectFeatureFlagService)(nil).DeleteProjectFeatureFlag), varargs...)
}

// GetProjectFeatureFlag mocks base method.
func (m *MockProjectFeatureFlagService) GetProjectFeatureFlag(pid any, name string, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectFeatureFlag, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, name}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectFeatureFlag", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectFeatureFlag)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProjectFeatureFlag indicates an expected call of GetProjectFeatureFlag.
func (mr *MockProjectFeatureFlagServiceMockRecorder) GetProjectFeatureFlag(pid, name any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, name}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectFeatureFlag", reflect.TypeOf((*MockProjectFeatureFlagService)(nil).GetProjectFeatureFlag), varargs...)
}

// ListProjectFeatureFlags mocks base method.
func (m *MockProjectFeatureFlagService) ListProjectFeatureFlags(pid any, opt *gitlab.ListProjectFeatureFlagOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectFeatureFlag, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectFeatureFlags", varargs...)
	ret0, _ := ret[0].([]*gitlab.ProjectFeatureFlag)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectFeatureFlags indicates an expected call of ListProjectFeatureFlags.
func (mr *MockProjectFeatureFlagServiceMockRecorder) ListProjectFeatureFlags(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectFeatureFlags", reflect.TypeOf((*MockProjectFeatureFlagService)(nil).ListProjectFeatureFlags), varargs...)
}

// UpdateProjectFeatureFlag mocks base method.
func (m *MockProjectFeatureFlagService) UpdateProjectFeatureFlag(pid any, name string, opt *gitlab.UpdateProjectFeatureFlagOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectFeatureFlag, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, name, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProjectFeatureFlag", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectFeatureFlag)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateProjectFeatureFlag indicates an expected call of UpdateProjectFeatureFlag.
func (mr *MockProjectFeatureFlagServiceMockRecorder) UpdateProjectFeatureFlag(pid, name, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, name, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectFeatureFlag", reflect.TypeOf((*MockProjectFeatureFlagService)(nil).UpdateProjectFeatureFlag), varargs...)
}
