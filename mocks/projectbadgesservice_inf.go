// Code generated by MockGen. DO NOT EDIT.
// Source: projectbadgesservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=projectbadgesservice_inf.go -destination=mocks/projectbadgesservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectBadgesService is a mock of ProjectBadgesService interface.
type MockProjectBadgesService struct {
	ctrl     *gomock.Controller
	recorder *MockProjectBadgesServiceMockRecorder
	isgomock struct{}
}

// MockProjectBadgesServiceMockRecorder is the mock recorder for MockProjectBadgesService.
type MockProjectBadgesServiceMockRecorder struct {
	mock *MockProjectBadgesService
}

// NewMockProjectBadgesService creates a new mock instance.
func NewMockProjectBadgesService(ctrl *gomock.Controller) *MockProjectBadgesService {
	mock := &MockProjectBadgesService{ctrl: ctrl}
	mock.recorder = &MockProjectBadgesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectBadgesService) EXPECT() *MockProjectBadgesServiceMockRecorder {
	return m.recorder
}

// AddProjectBadge mocks base method.
func (m *MockProjectBadgesService) AddProjectBadge(pid any, opt *gitlab.AddProjectBadgeOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectBadge, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddProjectBadge", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectBadge)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddProjectBadge indicates an expected call of AddProjectBadge.
func (mr *MockProjectBadgesServiceMockRecorder) AddProjectBadge(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProjectBadge", reflect.TypeOf((*MockProjectBadgesService)(nil).AddProjectBadge), varargs...)
}

// DeleteProjectBadge mocks base method.
func (m *MockProjectBadgesService) DeleteProjectBadge(pid any, badge int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, badge}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProjectBadge", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectBadge indicates an expected call of DeleteProjectBadge.
func (mr *MockProjectBadgesServiceMockRecorder) DeleteProjectBadge(pid, badge any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, badge}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectBadge", reflect.TypeOf((*MockProjectBadgesService)(nil).DeleteProjectBadge), varargs...)
}

// EditProjectBadge mocks base method.
func (m *MockProjectBadgesService) EditProjectBadge(pid any, badge int, opt *gitlab.EditProjectBadgeOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectBadge, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, badge, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditProjectBadge", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectBadge)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditProjectBadge indicates an expected call of EditProjectBadge.
func (mr *MockProjectBadgesServiceMockRecorder) EditProjectBadge(pid, badge, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, badge, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProjectBadge", reflect.TypeOf((*MockProjectBadgesService)(nil).EditProjectBadge), varargs...)
}

// GetProjectBadge mocks base method.
func (m *MockProjectBadgesService) GetProjectBadge(pid any, badge int, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectBadge, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, badge}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectBadge", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectBadge)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProjectBadge indicates an expected call of GetProjectBadge.
func (mr *MockProjectBadgesServiceMockRecorder) GetProjectBadge(pid, badge any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, badge}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectBadge", reflect.TypeOf((*MockProjectBadgesService)(nil).GetProjectBadge), varargs...)
}

// ListProjectBadges mocks base method.
func (m *MockProjectBadgesService) ListProjectBadges(pid any, opt *gitlab.ListProjectBadgesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectBadge, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectBadges", varargs...)
	ret0, _ := ret[0].([]*gitlab.ProjectBadge)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectBadges indicates an expected call of ListProjectBadges.
func (mr *MockProjectBadgesServiceMockRecorder) ListProjectBadges(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectBadges", reflect.TypeOf((*MockProjectBadgesService)(nil).ListProjectBadges), varargs...)
}

// PreviewProjectBadge mocks base method.
func (m *MockProjectBadgesService) PreviewProjectBadge(pid any, opt *gitlab.ProjectBadgePreviewOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectBadge, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PreviewProjectBadge", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectBadge)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PreviewProjectBadge indicates an expected call of PreviewProjectBadge.
func (mr *MockProjectBadgesServiceMockRecorder) PreviewProjectBadge(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreviewProjectBadge", reflect.TypeOf((*MockProjectBadgesService)(nil).PreviewProjectBadge), varargs...)
}
