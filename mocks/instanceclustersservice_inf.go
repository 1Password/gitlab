// Code generated by MockGen. DO NOT EDIT.
// Source: instanceclustersservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=instanceclustersservice_inf.go -destination=mocks/instanceclustersservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockInstanceClustersService is a mock of InstanceClustersService interface.
type MockInstanceClustersService struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceClustersServiceMockRecorder
	isgomock struct{}
}

// MockInstanceClustersServiceMockRecorder is the mock recorder for MockInstanceClustersService.
type MockInstanceClustersServiceMockRecorder struct {
	mock *MockInstanceClustersService
}

// NewMockInstanceClustersService creates a new mock instance.
func NewMockInstanceClustersService(ctrl *gomock.Controller) *MockInstanceClustersService {
	mock := &MockInstanceClustersService{ctrl: ctrl}
	mock.recorder = &MockInstanceClustersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceClustersService) EXPECT() *MockInstanceClustersServiceMockRecorder {
	return m.recorder
}

// AddCluster mocks base method.
func (m *MockInstanceClustersService) AddCluster(opt *gitlab.AddClusterOptions, options ...gitlab.RequestOptionFunc) (*gitlab.InstanceCluster, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddCluster", varargs...)
	ret0, _ := ret[0].(*gitlab.InstanceCluster)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddCluster indicates an expected call of AddCluster.
func (mr *MockInstanceClustersServiceMockRecorder) AddCluster(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCluster", reflect.TypeOf((*MockInstanceClustersService)(nil).AddCluster), varargs...)
}

// DeleteCluster mocks base method.
func (m *MockInstanceClustersService) DeleteCluster(cluster int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{cluster}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCluster", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockInstanceClustersServiceMockRecorder) DeleteCluster(cluster any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{cluster}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockInstanceClustersService)(nil).DeleteCluster), varargs...)
}

// EditCluster mocks base method.
func (m *MockInstanceClustersService) EditCluster(cluster int, opt *gitlab.EditClusterOptions, options ...gitlab.RequestOptionFunc) (*gitlab.InstanceCluster, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{cluster, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditCluster", varargs...)
	ret0, _ := ret[0].(*gitlab.InstanceCluster)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditCluster indicates an expected call of EditCluster.
func (mr *MockInstanceClustersServiceMockRecorder) EditCluster(cluster, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{cluster, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditCluster", reflect.TypeOf((*MockInstanceClustersService)(nil).EditCluster), varargs...)
}

// GetCluster mocks base method.
func (m *MockInstanceClustersService) GetCluster(cluster int, options ...gitlab.RequestOptionFunc) (*gitlab.InstanceCluster, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{cluster}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCluster", varargs...)
	ret0, _ := ret[0].(*gitlab.InstanceCluster)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockInstanceClustersServiceMockRecorder) GetCluster(cluster any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{cluster}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockInstanceClustersService)(nil).GetCluster), varargs...)
}

// ListClusters mocks base method.
func (m *MockInstanceClustersService) ListClusters(options ...gitlab.RequestOptionFunc) ([]*gitlab.InstanceCluster, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClusters", varargs...)
	ret0, _ := ret[0].([]*gitlab.InstanceCluster)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockInstanceClustersServiceMockRecorder) ListClusters(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockInstanceClustersService)(nil).ListClusters), options...)
}
