// Code generated by MockGen. DO NOT EDIT.
// Source: projectaccesstokensservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=projectaccesstokensservice_inf.go -destination=mocks/projectaccesstokensservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectAccessTokensService is a mock of ProjectAccessTokensService interface.
type MockProjectAccessTokensService struct {
	ctrl     *gomock.Controller
	recorder *MockProjectAccessTokensServiceMockRecorder
}

// MockProjectAccessTokensServiceMockRecorder is the mock recorder for MockProjectAccessTokensService.
type MockProjectAccessTokensServiceMockRecorder struct {
	mock *MockProjectAccessTokensService
}

// NewMockProjectAccessTokensService creates a new mock instance.
func NewMockProjectAccessTokensService(ctrl *gomock.Controller) *MockProjectAccessTokensService {
	mock := &MockProjectAccessTokensService{ctrl: ctrl}
	mock.recorder = &MockProjectAccessTokensServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectAccessTokensService) EXPECT() *MockProjectAccessTokensServiceMockRecorder {
	return m.recorder
}

// CreateProjectAccessToken mocks base method.
func (m *MockProjectAccessTokensService) CreateProjectAccessToken(pid any, opt *gitlab.CreateProjectAccessTokenOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectAccessToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProjectAccessToken", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectAccessToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateProjectAccessToken indicates an expected call of CreateProjectAccessToken.
func (mr *MockProjectAccessTokensServiceMockRecorder) CreateProjectAccessToken(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectAccessToken", reflect.TypeOf((*MockProjectAccessTokensService)(nil).CreateProjectAccessToken), varargs...)
}

// GetProjectAccessToken mocks base method.
func (m *MockProjectAccessTokensService) GetProjectAccessToken(pid any, id int, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectAccessToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, id}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectAccessToken", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectAccessToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProjectAccessToken indicates an expected call of GetProjectAccessToken.
func (mr *MockProjectAccessTokensServiceMockRecorder) GetProjectAccessToken(pid, id any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, id}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectAccessToken", reflect.TypeOf((*MockProjectAccessTokensService)(nil).GetProjectAccessToken), varargs...)
}

// ListProjectAccessTokens mocks base method.
func (m *MockProjectAccessTokensService) ListProjectAccessTokens(pid any, opt *gitlab.ListProjectAccessTokensOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectAccessToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectAccessTokens", varargs...)
	ret0, _ := ret[0].([]*gitlab.ProjectAccessToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectAccessTokens indicates an expected call of ListProjectAccessTokens.
func (mr *MockProjectAccessTokensServiceMockRecorder) ListProjectAccessTokens(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectAccessTokens", reflect.TypeOf((*MockProjectAccessTokensService)(nil).ListProjectAccessTokens), varargs...)
}

// RevokeProjectAccessToken mocks base method.
func (m *MockProjectAccessTokensService) RevokeProjectAccessToken(pid any, id int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, id}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokeProjectAccessToken", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeProjectAccessToken indicates an expected call of RevokeProjectAccessToken.
func (mr *MockProjectAccessTokensServiceMockRecorder) RevokeProjectAccessToken(pid, id any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, id}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeProjectAccessToken", reflect.TypeOf((*MockProjectAccessTokensService)(nil).RevokeProjectAccessToken), varargs...)
}

// RotateProjectAccessToken mocks base method.
func (m *MockProjectAccessTokensService) RotateProjectAccessToken(pid any, id int, opt *gitlab.RotateProjectAccessTokenOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectAccessToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, id, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RotateProjectAccessToken", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectAccessToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RotateProjectAccessToken indicates an expected call of RotateProjectAccessToken.
func (mr *MockProjectAccessTokensServiceMockRecorder) RotateProjectAccessToken(pid, id, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, id, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotateProjectAccessToken", reflect.TypeOf((*MockProjectAccessTokensService)(nil).RotateProjectAccessToken), varargs...)
}
