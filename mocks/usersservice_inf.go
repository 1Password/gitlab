// Code generated by MockGen. DO NOT EDIT.
// Source: usersservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=usersservice_inf.go -destination=mocks/usersservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockUsersService is a mock of UsersService interface.
type MockUsersService struct {
	ctrl     *gomock.Controller
	recorder *MockUsersServiceMockRecorder
}

// MockUsersServiceMockRecorder is the mock recorder for MockUsersService.
type MockUsersServiceMockRecorder struct {
	mock *MockUsersService
}

// NewMockUsersService creates a new mock instance.
func NewMockUsersService(ctrl *gomock.Controller) *MockUsersService {
	mock := &MockUsersService{ctrl: ctrl}
	mock.recorder = &MockUsersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersService) EXPECT() *MockUsersServiceMockRecorder {
	return m.recorder
}

// ActivateUser mocks base method.
func (m *MockUsersService) ActivateUser(user int, options ...gitlab.RequestOptionFunc) error {
	m.ctrl.T.Helper()
	varargs := []any{user}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActivateUser", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateUser indicates an expected call of ActivateUser.
func (mr *MockUsersServiceMockRecorder) ActivateUser(user any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateUser", reflect.TypeOf((*MockUsersService)(nil).ActivateUser), varargs...)
}

// AddEmail mocks base method.
func (m *MockUsersService) AddEmail(opt *gitlab.AddEmailOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Email, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEmail", varargs...)
	ret0, _ := ret[0].(*gitlab.Email)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddEmail indicates an expected call of AddEmail.
func (mr *MockUsersServiceMockRecorder) AddEmail(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEmail", reflect.TypeOf((*MockUsersService)(nil).AddEmail), varargs...)
}

// AddEmailForUser mocks base method.
func (m *MockUsersService) AddEmailForUser(user int, opt *gitlab.AddEmailOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Email, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{user, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEmailForUser", varargs...)
	ret0, _ := ret[0].(*gitlab.Email)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddEmailForUser indicates an expected call of AddEmailForUser.
func (mr *MockUsersServiceMockRecorder) AddEmailForUser(user, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEmailForUser", reflect.TypeOf((*MockUsersService)(nil).AddEmailForUser), varargs...)
}

// AddGPGKey mocks base method.
func (m *MockUsersService) AddGPGKey(opt *gitlab.AddGPGKeyOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GPGKey, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddGPGKey", varargs...)
	ret0, _ := ret[0].(*gitlab.GPGKey)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddGPGKey indicates an expected call of AddGPGKey.
func (mr *MockUsersServiceMockRecorder) AddGPGKey(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGPGKey", reflect.TypeOf((*MockUsersService)(nil).AddGPGKey), varargs...)
}

// AddGPGKeyForUser mocks base method.
func (m *MockUsersService) AddGPGKeyForUser(user int, opt *gitlab.AddGPGKeyOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GPGKey, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{user, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddGPGKeyForUser", varargs...)
	ret0, _ := ret[0].(*gitlab.GPGKey)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddGPGKeyForUser indicates an expected call of AddGPGKeyForUser.
func (mr *MockUsersServiceMockRecorder) AddGPGKeyForUser(user, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGPGKeyForUser", reflect.TypeOf((*MockUsersService)(nil).AddGPGKeyForUser), varargs...)
}

// AddSSHKey mocks base method.
func (m *MockUsersService) AddSSHKey(opt *gitlab.AddSSHKeyOptions, options ...gitlab.RequestOptionFunc) (*gitlab.SSHKey, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddSSHKey", varargs...)
	ret0, _ := ret[0].(*gitlab.SSHKey)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddSSHKey indicates an expected call of AddSSHKey.
func (mr *MockUsersServiceMockRecorder) AddSSHKey(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSSHKey", reflect.TypeOf((*MockUsersService)(nil).AddSSHKey), varargs...)
}

// AddSSHKeyForUser mocks base method.
func (m *MockUsersService) AddSSHKeyForUser(user int, opt *gitlab.AddSSHKeyOptions, options ...gitlab.RequestOptionFunc) (*gitlab.SSHKey, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{user, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddSSHKeyForUser", varargs...)
	ret0, _ := ret[0].(*gitlab.SSHKey)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddSSHKeyForUser indicates an expected call of AddSSHKeyForUser.
func (mr *MockUsersServiceMockRecorder) AddSSHKeyForUser(user, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSSHKeyForUser", reflect.TypeOf((*MockUsersService)(nil).AddSSHKeyForUser), varargs...)
}

// ApproveUser mocks base method.
func (m *MockUsersService) ApproveUser(user int, options ...gitlab.RequestOptionFunc) error {
	m.ctrl.T.Helper()
	varargs := []any{user}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApproveUser", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApproveUser indicates an expected call of ApproveUser.
func (mr *MockUsersServiceMockRecorder) ApproveUser(user any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveUser", reflect.TypeOf((*MockUsersService)(nil).ApproveUser), varargs...)
}

// BanUser mocks base method.
func (m *MockUsersService) BanUser(user int, options ...gitlab.RequestOptionFunc) error {
	m.ctrl.T.Helper()
	varargs := []any{user}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BanUser", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// BanUser indicates an expected call of BanUser.
func (mr *MockUsersServiceMockRecorder) BanUser(user any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BanUser", reflect.TypeOf((*MockUsersService)(nil).BanUser), varargs...)
}

// BlockUser mocks base method.
func (m *MockUsersService) BlockUser(user int, options ...gitlab.RequestOptionFunc) error {
	m.ctrl.T.Helper()
	varargs := []any{user}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BlockUser", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockUser indicates an expected call of BlockUser.
func (mr *MockUsersServiceMockRecorder) BlockUser(user any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockUser", reflect.TypeOf((*MockUsersService)(nil).BlockUser), varargs...)
}

// CreateImpersonationToken mocks base method.
func (m *MockUsersService) CreateImpersonationToken(user int, opt *gitlab.CreateImpersonationTokenOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ImpersonationToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{user, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateImpersonationToken", varargs...)
	ret0, _ := ret[0].(*gitlab.ImpersonationToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateImpersonationToken indicates an expected call of CreateImpersonationToken.
func (mr *MockUsersServiceMockRecorder) CreateImpersonationToken(user, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImpersonationToken", reflect.TypeOf((*MockUsersService)(nil).CreateImpersonationToken), varargs...)
}

// CreatePersonalAccessToken mocks base method.
func (m *MockUsersService) CreatePersonalAccessToken(user int, opt *gitlab.CreatePersonalAccessTokenOptions, options ...gitlab.RequestOptionFunc) (*gitlab.PersonalAccessToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{user, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePersonalAccessToken", varargs...)
	ret0, _ := ret[0].(*gitlab.PersonalAccessToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePersonalAccessToken indicates an expected call of CreatePersonalAccessToken.
func (mr *MockUsersServiceMockRecorder) CreatePersonalAccessToken(user, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePersonalAccessToken", reflect.TypeOf((*MockUsersService)(nil).CreatePersonalAccessToken), varargs...)
}

// CreatePersonalAccessTokenForCurrentUser mocks base method.
func (m *MockUsersService) CreatePersonalAccessTokenForCurrentUser(opt *gitlab.CreatePersonalAccessTokenForCurrentUserOptions, options ...gitlab.RequestOptionFunc) (*gitlab.PersonalAccessToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePersonalAccessTokenForCurrentUser", varargs...)
	ret0, _ := ret[0].(*gitlab.PersonalAccessToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePersonalAccessTokenForCurrentUser indicates an expected call of CreatePersonalAccessTokenForCurrentUser.
func (mr *MockUsersServiceMockRecorder) CreatePersonalAccessTokenForCurrentUser(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePersonalAccessTokenForCurrentUser", reflect.TypeOf((*MockUsersService)(nil).CreatePersonalAccessTokenForCurrentUser), varargs...)
}

// CreateServiceAccountUser mocks base method.
func (m *MockUsersService) CreateServiceAccountUser(options ...gitlab.RequestOptionFunc) (*gitlab.User, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServiceAccountUser", varargs...)
	ret0, _ := ret[0].(*gitlab.User)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateServiceAccountUser indicates an expected call of CreateServiceAccountUser.
func (mr *MockUsersServiceMockRecorder) CreateServiceAccountUser(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceAccountUser", reflect.TypeOf((*MockUsersService)(nil).CreateServiceAccountUser), options...)
}

// CreateUser mocks base method.
func (m *MockUsersService) CreateUser(opt *gitlab.CreateUserOptions, options ...gitlab.RequestOptionFunc) (*gitlab.User, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUser", varargs...)
	ret0, _ := ret[0].(*gitlab.User)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUsersServiceMockRecorder) CreateUser(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsersService)(nil).CreateUser), varargs...)
}

// CreateUserRunner mocks base method.
func (m *MockUsersService) CreateUserRunner(opts *gitlab.CreateUserRunnerOptions, options ...gitlab.RequestOptionFunc) (*gitlab.UserRunner, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opts}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUserRunner", varargs...)
	ret0, _ := ret[0].(*gitlab.UserRunner)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateUserRunner indicates an expected call of CreateUserRunner.
func (mr *MockUsersServiceMockRecorder) CreateUserRunner(opts any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opts}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserRunner", reflect.TypeOf((*MockUsersService)(nil).CreateUserRunner), varargs...)
}

// CurrentUser mocks base method.
func (m *MockUsersService) CurrentUser(options ...gitlab.RequestOptionFunc) (*gitlab.User, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CurrentUser", varargs...)
	ret0, _ := ret[0].(*gitlab.User)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CurrentUser indicates an expected call of CurrentUser.
func (mr *MockUsersServiceMockRecorder) CurrentUser(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentUser", reflect.TypeOf((*MockUsersService)(nil).CurrentUser), options...)
}

// CurrentUserStatus mocks base method.
func (m *MockUsersService) CurrentUserStatus(options ...gitlab.RequestOptionFunc) (*gitlab.UserStatus, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CurrentUserStatus", varargs...)
	ret0, _ := ret[0].(*gitlab.UserStatus)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CurrentUserStatus indicates an expected call of CurrentUserStatus.
func (mr *MockUsersServiceMockRecorder) CurrentUserStatus(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentUserStatus", reflect.TypeOf((*MockUsersService)(nil).CurrentUserStatus), options...)
}

// DeactivateUser mocks base method.
func (m *MockUsersService) DeactivateUser(user int, options ...gitlab.RequestOptionFunc) error {
	m.ctrl.T.Helper()
	varargs := []any{user}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeactivateUser", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateUser indicates an expected call of DeactivateUser.
func (mr *MockUsersServiceMockRecorder) DeactivateUser(user any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateUser", reflect.TypeOf((*MockUsersService)(nil).DeactivateUser), varargs...)
}

// DeleteEmail mocks base method.
func (m *MockUsersService) DeleteEmail(email int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{email}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEmail", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmail indicates an expected call of DeleteEmail.
func (mr *MockUsersServiceMockRecorder) DeleteEmail(email any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{email}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmail", reflect.TypeOf((*MockUsersService)(nil).DeleteEmail), varargs...)
}

// DeleteEmailForUser mocks base method.
func (m *MockUsersService) DeleteEmailForUser(user, email int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{user, email}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEmailForUser", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmailForUser indicates an expected call of DeleteEmailForUser.
func (mr *MockUsersServiceMockRecorder) DeleteEmailForUser(user, email any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user, email}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailForUser", reflect.TypeOf((*MockUsersService)(nil).DeleteEmailForUser), varargs...)
}

// DeleteGPGKey mocks base method.
func (m *MockUsersService) DeleteGPGKey(key int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGPGKey", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGPGKey indicates an expected call of DeleteGPGKey.
func (mr *MockUsersServiceMockRecorder) DeleteGPGKey(key any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGPGKey", reflect.TypeOf((*MockUsersService)(nil).DeleteGPGKey), varargs...)
}

// DeleteGPGKeyForUser mocks base method.
func (m *MockUsersService) DeleteGPGKeyForUser(user, key int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{user, key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGPGKeyForUser", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGPGKeyForUser indicates an expected call of DeleteGPGKeyForUser.
func (mr *MockUsersServiceMockRecorder) DeleteGPGKeyForUser(user, key any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user, key}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGPGKeyForUser", reflect.TypeOf((*MockUsersService)(nil).DeleteGPGKeyForUser), varargs...)
}

// DeleteSSHKey mocks base method.
func (m *MockUsersService) DeleteSSHKey(key int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSSHKey", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSSHKey indicates an expected call of DeleteSSHKey.
func (mr *MockUsersServiceMockRecorder) DeleteSSHKey(key any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSSHKey", reflect.TypeOf((*MockUsersService)(nil).DeleteSSHKey), varargs...)
}

// DeleteSSHKeyForUser mocks base method.
func (m *MockUsersService) DeleteSSHKeyForUser(user, key int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{user, key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSSHKeyForUser", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSSHKeyForUser indicates an expected call of DeleteSSHKeyForUser.
func (mr *MockUsersServiceMockRecorder) DeleteSSHKeyForUser(user, key any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user, key}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSSHKeyForUser", reflect.TypeOf((*MockUsersService)(nil).DeleteSSHKeyForUser), varargs...)
}

// DeleteUser mocks base method.
func (m *MockUsersService) DeleteUser(user int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{user}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUser", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUsersServiceMockRecorder) DeleteUser(user any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUsersService)(nil).DeleteUser), varargs...)
}

// DisableTwoFactor mocks base method.
func (m *MockUsersService) DisableTwoFactor(user int, options ...gitlab.RequestOptionFunc) error {
	m.ctrl.T.Helper()
	varargs := []any{user}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableTwoFactor", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableTwoFactor indicates an expected call of DisableTwoFactor.
func (mr *MockUsersServiceMockRecorder) DisableTwoFactor(user any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableTwoFactor", reflect.TypeOf((*MockUsersService)(nil).DisableTwoFactor), varargs...)
}

// GetAllImpersonationTokens mocks base method.
func (m *MockUsersService) GetAllImpersonationTokens(user int, opt *gitlab.GetAllImpersonationTokensOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ImpersonationToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{user, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllImpersonationTokens", varargs...)
	ret0, _ := ret[0].([]*gitlab.ImpersonationToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllImpersonationTokens indicates an expected call of GetAllImpersonationTokens.
func (mr *MockUsersServiceMockRecorder) GetAllImpersonationTokens(user, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllImpersonationTokens", reflect.TypeOf((*MockUsersService)(nil).GetAllImpersonationTokens), varargs...)
}

// GetEmail mocks base method.
func (m *MockUsersService) GetEmail(email int, options ...gitlab.RequestOptionFunc) (*gitlab.Email, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{email}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEmail", varargs...)
	ret0, _ := ret[0].(*gitlab.Email)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEmail indicates an expected call of GetEmail.
func (mr *MockUsersServiceMockRecorder) GetEmail(email any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{email}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmail", reflect.TypeOf((*MockUsersService)(nil).GetEmail), varargs...)
}

// GetGPGKey mocks base method.
func (m *MockUsersService) GetGPGKey(key int, options ...gitlab.RequestOptionFunc) (*gitlab.GPGKey, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGPGKey", varargs...)
	ret0, _ := ret[0].(*gitlab.GPGKey)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGPGKey indicates an expected call of GetGPGKey.
func (mr *MockUsersServiceMockRecorder) GetGPGKey(key any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGPGKey", reflect.TypeOf((*MockUsersService)(nil).GetGPGKey), varargs...)
}

// GetGPGKeyForUser mocks base method.
func (m *MockUsersService) GetGPGKeyForUser(user, key int, options ...gitlab.RequestOptionFunc) (*gitlab.GPGKey, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{user, key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGPGKeyForUser", varargs...)
	ret0, _ := ret[0].(*gitlab.GPGKey)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGPGKeyForUser indicates an expected call of GetGPGKeyForUser.
func (mr *MockUsersServiceMockRecorder) GetGPGKeyForUser(user, key any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user, key}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGPGKeyForUser", reflect.TypeOf((*MockUsersService)(nil).GetGPGKeyForUser), varargs...)
}

// GetImpersonationToken mocks base method.
func (m *MockUsersService) GetImpersonationToken(user, token int, options ...gitlab.RequestOptionFunc) (*gitlab.ImpersonationToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{user, token}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetImpersonationToken", varargs...)
	ret0, _ := ret[0].(*gitlab.ImpersonationToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImpersonationToken indicates an expected call of GetImpersonationToken.
func (mr *MockUsersServiceMockRecorder) GetImpersonationToken(user, token any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user, token}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImpersonationToken", reflect.TypeOf((*MockUsersService)(nil).GetImpersonationToken), varargs...)
}

// GetSSHKey mocks base method.
func (m *MockUsersService) GetSSHKey(key int, options ...gitlab.RequestOptionFunc) (*gitlab.SSHKey, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSSHKey", varargs...)
	ret0, _ := ret[0].(*gitlab.SSHKey)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSSHKey indicates an expected call of GetSSHKey.
func (mr *MockUsersServiceMockRecorder) GetSSHKey(key any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSHKey", reflect.TypeOf((*MockUsersService)(nil).GetSSHKey), varargs...)
}

// GetSSHKeyForUser mocks base method.
func (m *MockUsersService) GetSSHKeyForUser(user, key int, options ...gitlab.RequestOptionFunc) (*gitlab.SSHKey, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{user, key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSSHKeyForUser", varargs...)
	ret0, _ := ret[0].(*gitlab.SSHKey)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSSHKeyForUser indicates an expected call of GetSSHKeyForUser.
func (mr *MockUsersServiceMockRecorder) GetSSHKeyForUser(user, key any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user, key}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSHKeyForUser", reflect.TypeOf((*MockUsersService)(nil).GetSSHKeyForUser), varargs...)
}

// GetUser mocks base method.
func (m *MockUsersService) GetUser(user int, opt gitlab.GetUsersOptions, options ...gitlab.RequestOptionFunc) (*gitlab.User, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{user, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUser", varargs...)
	ret0, _ := ret[0].(*gitlab.User)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUsersServiceMockRecorder) GetUser(user, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUsersService)(nil).GetUser), varargs...)
}

// GetUserActivities mocks base method.
func (m *MockUsersService) GetUserActivities(opt *gitlab.GetUserActivitiesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.UserActivity, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserActivities", varargs...)
	ret0, _ := ret[0].([]*gitlab.UserActivity)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserActivities indicates an expected call of GetUserActivities.
func (mr *MockUsersServiceMockRecorder) GetUserActivities(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserActivities", reflect.TypeOf((*MockUsersService)(nil).GetUserActivities), varargs...)
}

// GetUserAssociationsCount mocks base method.
func (m *MockUsersService) GetUserAssociationsCount(user int, options ...gitlab.RequestOptionFunc) (*gitlab.UserAssociationsCount, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{user}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserAssociationsCount", varargs...)
	ret0, _ := ret[0].(*gitlab.UserAssociationsCount)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserAssociationsCount indicates an expected call of GetUserAssociationsCount.
func (mr *MockUsersServiceMockRecorder) GetUserAssociationsCount(user any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAssociationsCount", reflect.TypeOf((*MockUsersService)(nil).GetUserAssociationsCount), varargs...)
}

// GetUserMemberships mocks base method.
func (m *MockUsersService) GetUserMemberships(user int, opt *gitlab.GetUserMembershipOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.UserMembership, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{user, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserMemberships", varargs...)
	ret0, _ := ret[0].([]*gitlab.UserMembership)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserMemberships indicates an expected call of GetUserMemberships.
func (mr *MockUsersServiceMockRecorder) GetUserMemberships(user, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserMemberships", reflect.TypeOf((*MockUsersService)(nil).GetUserMemberships), varargs...)
}

// GetUserStatus mocks base method.
func (m *MockUsersService) GetUserStatus(user int, options ...gitlab.RequestOptionFunc) (*gitlab.UserStatus, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{user}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserStatus", varargs...)
	ret0, _ := ret[0].(*gitlab.UserStatus)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserStatus indicates an expected call of GetUserStatus.
func (mr *MockUsersServiceMockRecorder) GetUserStatus(user any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserStatus", reflect.TypeOf((*MockUsersService)(nil).GetUserStatus), varargs...)
}

// ListEmails mocks base method.
func (m *MockUsersService) ListEmails(options ...gitlab.RequestOptionFunc) ([]*gitlab.Email, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEmails", varargs...)
	ret0, _ := ret[0].([]*gitlab.Email)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEmails indicates an expected call of ListEmails.
func (mr *MockUsersServiceMockRecorder) ListEmails(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmails", reflect.TypeOf((*MockUsersService)(nil).ListEmails), options...)
}

// ListEmailsForUser mocks base method.
func (m *MockUsersService) ListEmailsForUser(user int, opt *gitlab.ListEmailsForUserOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Email, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{user, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEmailsForUser", varargs...)
	ret0, _ := ret[0].([]*gitlab.Email)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEmailsForUser indicates an expected call of ListEmailsForUser.
func (mr *MockUsersServiceMockRecorder) ListEmailsForUser(user, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmailsForUser", reflect.TypeOf((*MockUsersService)(nil).ListEmailsForUser), varargs...)
}

// ListGPGKeys mocks base method.
func (m *MockUsersService) ListGPGKeys(options ...gitlab.RequestOptionFunc) ([]*gitlab.GPGKey, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGPGKeys", varargs...)
	ret0, _ := ret[0].([]*gitlab.GPGKey)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGPGKeys indicates an expected call of ListGPGKeys.
func (mr *MockUsersServiceMockRecorder) ListGPGKeys(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGPGKeys", reflect.TypeOf((*MockUsersService)(nil).ListGPGKeys), options...)
}

// ListGPGKeysForUser mocks base method.
func (m *MockUsersService) ListGPGKeysForUser(user int, options ...gitlab.RequestOptionFunc) ([]*gitlab.GPGKey, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{user}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGPGKeysForUser", varargs...)
	ret0, _ := ret[0].([]*gitlab.GPGKey)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGPGKeysForUser indicates an expected call of ListGPGKeysForUser.
func (mr *MockUsersServiceMockRecorder) ListGPGKeysForUser(user any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGPGKeysForUser", reflect.TypeOf((*MockUsersService)(nil).ListGPGKeysForUser), varargs...)
}

// ListSSHKeys mocks base method.
func (m *MockUsersService) ListSSHKeys(opt *gitlab.ListSSHKeysOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.SSHKey, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSSHKeys", varargs...)
	ret0, _ := ret[0].([]*gitlab.SSHKey)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSSHKeys indicates an expected call of ListSSHKeys.
func (mr *MockUsersServiceMockRecorder) ListSSHKeys(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSSHKeys", reflect.TypeOf((*MockUsersService)(nil).ListSSHKeys), varargs...)
}

// ListSSHKeysForUser mocks base method.
func (m *MockUsersService) ListSSHKeysForUser(uid any, opt *gitlab.ListSSHKeysForUserOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.SSHKey, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{uid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSSHKeysForUser", varargs...)
	ret0, _ := ret[0].([]*gitlab.SSHKey)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSSHKeysForUser indicates an expected call of ListSSHKeysForUser.
func (mr *MockUsersServiceMockRecorder) ListSSHKeysForUser(uid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{uid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSSHKeysForUser", reflect.TypeOf((*MockUsersService)(nil).ListSSHKeysForUser), varargs...)
}

// ListServiceAccounts mocks base method.
func (m *MockUsersService) ListServiceAccounts(opt *gitlab.ListServiceAccountsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ServiceAccount, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceAccounts", varargs...)
	ret0, _ := ret[0].([]*gitlab.ServiceAccount)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListServiceAccounts indicates an expected call of ListServiceAccounts.
func (mr *MockUsersServiceMockRecorder) ListServiceAccounts(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceAccounts", reflect.TypeOf((*MockUsersService)(nil).ListServiceAccounts), varargs...)
}

// ListUserContributionEvents mocks base method.
func (m *MockUsersService) ListUserContributionEvents(uid any, opt *gitlab.ListContributionEventsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ContributionEvent, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{uid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUserContributionEvents", varargs...)
	ret0, _ := ret[0].([]*gitlab.ContributionEvent)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUserContributionEvents indicates an expected call of ListUserContributionEvents.
func (mr *MockUsersServiceMockRecorder) ListUserContributionEvents(uid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{uid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserContributionEvents", reflect.TypeOf((*MockUsersService)(nil).ListUserContributionEvents), varargs...)
}

// ListUsers mocks base method.
func (m *MockUsersService) ListUsers(opt *gitlab.ListUsersOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.User, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsers", varargs...)
	ret0, _ := ret[0].([]*gitlab.User)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockUsersServiceMockRecorder) ListUsers(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockUsersService)(nil).ListUsers), varargs...)
}

// ModifyUser mocks base method.
func (m *MockUsersService) ModifyUser(user int, opt *gitlab.ModifyUserOptions, options ...gitlab.RequestOptionFunc) (*gitlab.User, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{user, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyUser", varargs...)
	ret0, _ := ret[0].(*gitlab.User)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ModifyUser indicates an expected call of ModifyUser.
func (mr *MockUsersServiceMockRecorder) ModifyUser(user, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyUser", reflect.TypeOf((*MockUsersService)(nil).ModifyUser), varargs...)
}

// RejectUser mocks base method.
func (m *MockUsersService) RejectUser(user int, options ...gitlab.RequestOptionFunc) error {
	m.ctrl.T.Helper()
	varargs := []any{user}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RejectUser", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RejectUser indicates an expected call of RejectUser.
func (mr *MockUsersServiceMockRecorder) RejectUser(user any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectUser", reflect.TypeOf((*MockUsersService)(nil).RejectUser), varargs...)
}

// RevokeImpersonationToken mocks base method.
func (m *MockUsersService) RevokeImpersonationToken(user, token int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{user, token}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokeImpersonationToken", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeImpersonationToken indicates an expected call of RevokeImpersonationToken.
func (mr *MockUsersServiceMockRecorder) RevokeImpersonationToken(user, token any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user, token}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeImpersonationToken", reflect.TypeOf((*MockUsersService)(nil).RevokeImpersonationToken), varargs...)
}

// SetUserStatus mocks base method.
func (m *MockUsersService) SetUserStatus(opt *gitlab.UserStatusOptions, options ...gitlab.RequestOptionFunc) (*gitlab.UserStatus, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetUserStatus", varargs...)
	ret0, _ := ret[0].(*gitlab.UserStatus)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetUserStatus indicates an expected call of SetUserStatus.
func (mr *MockUsersServiceMockRecorder) SetUserStatus(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserStatus", reflect.TypeOf((*MockUsersService)(nil).SetUserStatus), varargs...)
}

// UnbanUser mocks base method.
func (m *MockUsersService) UnbanUser(user int, options ...gitlab.RequestOptionFunc) error {
	m.ctrl.T.Helper()
	varargs := []any{user}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnbanUser", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnbanUser indicates an expected call of UnbanUser.
func (mr *MockUsersServiceMockRecorder) UnbanUser(user any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbanUser", reflect.TypeOf((*MockUsersService)(nil).UnbanUser), varargs...)
}

// UnblockUser mocks base method.
func (m *MockUsersService) UnblockUser(user int, options ...gitlab.RequestOptionFunc) error {
	m.ctrl.T.Helper()
	varargs := []any{user}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnblockUser", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnblockUser indicates an expected call of UnblockUser.
func (mr *MockUsersServiceMockRecorder) UnblockUser(user any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnblockUser", reflect.TypeOf((*MockUsersService)(nil).UnblockUser), varargs...)
}

// UploadAvatar mocks base method.
func (m *MockUsersService) UploadAvatar(avatar io.Reader, filename string, options ...gitlab.RequestOptionFunc) (*gitlab.User, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{avatar, filename}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadAvatar", varargs...)
	ret0, _ := ret[0].(*gitlab.User)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UploadAvatar indicates an expected call of UploadAvatar.
func (mr *MockUsersServiceMockRecorder) UploadAvatar(avatar, filename any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{avatar, filename}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAvatar", reflect.TypeOf((*MockUsersService)(nil).UploadAvatar), varargs...)
}
