// Code generated by MockGen. DO NOT EDIT.
// Source: pipelinesservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=pipelinesservice_inf.go -destination=mocks/pipelinesservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockPipelinesService is a mock of PipelinesService interface.
type MockPipelinesService struct {
	ctrl     *gomock.Controller
	recorder *MockPipelinesServiceMockRecorder
	isgomock struct{}
}

// MockPipelinesServiceMockRecorder is the mock recorder for MockPipelinesService.
type MockPipelinesServiceMockRecorder struct {
	mock *MockPipelinesService
}

// NewMockPipelinesService creates a new mock instance.
func NewMockPipelinesService(ctrl *gomock.Controller) *MockPipelinesService {
	mock := &MockPipelinesService{ctrl: ctrl}
	mock.recorder = &MockPipelinesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelinesService) EXPECT() *MockPipelinesServiceMockRecorder {
	return m.recorder
}

// CancelPipelineBuild mocks base method.
func (m *MockPipelinesService) CancelPipelineBuild(pid any, pipeline int, options ...gitlab.RequestOptionFunc) (*gitlab.Pipeline, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, pipeline}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelPipelineBuild", varargs...)
	ret0, _ := ret[0].(*gitlab.Pipeline)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CancelPipelineBuild indicates an expected call of CancelPipelineBuild.
func (mr *MockPipelinesServiceMockRecorder) CancelPipelineBuild(pid, pipeline any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, pipeline}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelPipelineBuild", reflect.TypeOf((*MockPipelinesService)(nil).CancelPipelineBuild), varargs...)
}

// CreatePipeline mocks base method.
func (m *MockPipelinesService) CreatePipeline(pid any, opt *gitlab.CreatePipelineOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Pipeline, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePipeline", varargs...)
	ret0, _ := ret[0].(*gitlab.Pipeline)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePipeline indicates an expected call of CreatePipeline.
func (mr *MockPipelinesServiceMockRecorder) CreatePipeline(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipeline", reflect.TypeOf((*MockPipelinesService)(nil).CreatePipeline), varargs...)
}

// DeletePipeline mocks base method.
func (m *MockPipelinesService) DeletePipeline(pid any, pipeline int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, pipeline}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePipeline", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePipeline indicates an expected call of DeletePipeline.
func (mr *MockPipelinesServiceMockRecorder) DeletePipeline(pid, pipeline any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, pipeline}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipeline", reflect.TypeOf((*MockPipelinesService)(nil).DeletePipeline), varargs...)
}

// GetLatestPipeline mocks base method.
func (m *MockPipelinesService) GetLatestPipeline(pid any, opt *gitlab.GetLatestPipelineOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Pipeline, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLatestPipeline", varargs...)
	ret0, _ := ret[0].(*gitlab.Pipeline)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLatestPipeline indicates an expected call of GetLatestPipeline.
func (mr *MockPipelinesServiceMockRecorder) GetLatestPipeline(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestPipeline", reflect.TypeOf((*MockPipelinesService)(nil).GetLatestPipeline), varargs...)
}

// GetPipeline mocks base method.
func (m *MockPipelinesService) GetPipeline(pid any, pipeline int, options ...gitlab.RequestOptionFunc) (*gitlab.Pipeline, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, pipeline}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPipeline", varargs...)
	ret0, _ := ret[0].(*gitlab.Pipeline)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPipeline indicates an expected call of GetPipeline.
func (mr *MockPipelinesServiceMockRecorder) GetPipeline(pid, pipeline any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, pipeline}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipeline", reflect.TypeOf((*MockPipelinesService)(nil).GetPipeline), varargs...)
}

// GetPipelineTestReport mocks base method.
func (m *MockPipelinesService) GetPipelineTestReport(pid any, pipeline int, options ...gitlab.RequestOptionFunc) (*gitlab.PipelineTestReport, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, pipeline}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPipelineTestReport", varargs...)
	ret0, _ := ret[0].(*gitlab.PipelineTestReport)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPipelineTestReport indicates an expected call of GetPipelineTestReport.
func (mr *MockPipelinesServiceMockRecorder) GetPipelineTestReport(pid, pipeline any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, pipeline}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineTestReport", reflect.TypeOf((*MockPipelinesService)(nil).GetPipelineTestReport), varargs...)
}

// GetPipelineVariables mocks base method.
func (m *MockPipelinesService) GetPipelineVariables(pid any, pipeline int, options ...gitlab.RequestOptionFunc) ([]*gitlab.PipelineVariable, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, pipeline}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPipelineVariables", varargs...)
	ret0, _ := ret[0].([]*gitlab.PipelineVariable)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPipelineVariables indicates an expected call of GetPipelineVariables.
func (mr *MockPipelinesServiceMockRecorder) GetPipelineVariables(pid, pipeline any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, pipeline}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineVariables", reflect.TypeOf((*MockPipelinesService)(nil).GetPipelineVariables), varargs...)
}

// ListProjectPipelines mocks base method.
func (m *MockPipelinesService) ListProjectPipelines(pid any, opt *gitlab.ListProjectPipelinesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.PipelineInfo, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectPipelines", varargs...)
	ret0, _ := ret[0].([]*gitlab.PipelineInfo)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectPipelines indicates an expected call of ListProjectPipelines.
func (mr *MockPipelinesServiceMockRecorder) ListProjectPipelines(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectPipelines", reflect.TypeOf((*MockPipelinesService)(nil).ListProjectPipelines), varargs...)
}

// RetryPipelineBuild mocks base method.
func (m *MockPipelinesService) RetryPipelineBuild(pid any, pipeline int, options ...gitlab.RequestOptionFunc) (*gitlab.Pipeline, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, pipeline}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetryPipelineBuild", varargs...)
	ret0, _ := ret[0].(*gitlab.Pipeline)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RetryPipelineBuild indicates an expected call of RetryPipelineBuild.
func (mr *MockPipelinesServiceMockRecorder) RetryPipelineBuild(pid, pipeline any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, pipeline}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryPipelineBuild", reflect.TypeOf((*MockPipelinesService)(nil).RetryPipelineBuild), varargs...)
}

// UpdatePipelineMetadata mocks base method.
func (m *MockPipelinesService) UpdatePipelineMetadata(pid any, pipeline int, opt *gitlab.UpdatePipelineMetadataOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Pipeline, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, pipeline, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePipelineMetadata", varargs...)
	ret0, _ := ret[0].(*gitlab.Pipeline)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdatePipelineMetadata indicates an expected call of UpdatePipelineMetadata.
func (mr *MockPipelinesServiceMockRecorder) UpdatePipelineMetadata(pid, pipeline, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, pipeline, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePipelineMetadata", reflect.TypeOf((*MockPipelinesService)(nil).UpdatePipelineMetadata), varargs...)
}
