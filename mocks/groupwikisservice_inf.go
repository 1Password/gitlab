// Code generated by MockGen. DO NOT EDIT.
// Source: groupwikisservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=groupwikisservice_inf.go -destination=mocks/groupwikisservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupWikisService is a mock of GroupWikisService interface.
type MockGroupWikisService struct {
	ctrl     *gomock.Controller
	recorder *MockGroupWikisServiceMockRecorder
	isgomock struct{}
}

// MockGroupWikisServiceMockRecorder is the mock recorder for MockGroupWikisService.
type MockGroupWikisServiceMockRecorder struct {
	mock *MockGroupWikisService
}

// NewMockGroupWikisService creates a new mock instance.
func NewMockGroupWikisService(ctrl *gomock.Controller) *MockGroupWikisService {
	mock := &MockGroupWikisService{ctrl: ctrl}
	mock.recorder = &MockGroupWikisServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupWikisService) EXPECT() *MockGroupWikisServiceMockRecorder {
	return m.recorder
}

// CreateGroupWikiPage mocks base method.
func (m *MockGroupWikisService) CreateGroupWikiPage(gid any, opt *gitlab.CreateGroupWikiPageOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupWiki, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGroupWikiPage", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupWiki)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateGroupWikiPage indicates an expected call of CreateGroupWikiPage.
func (mr *MockGroupWikisServiceMockRecorder) CreateGroupWikiPage(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupWikiPage", reflect.TypeOf((*MockGroupWikisService)(nil).CreateGroupWikiPage), varargs...)
}

// DeleteGroupWikiPage mocks base method.
func (m *MockGroupWikisService) DeleteGroupWikiPage(gid any, slug string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, slug}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroupWikiPage", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupWikiPage indicates an expected call of DeleteGroupWikiPage.
func (mr *MockGroupWikisServiceMockRecorder) DeleteGroupWikiPage(gid, slug any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, slug}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupWikiPage", reflect.TypeOf((*MockGroupWikisService)(nil).DeleteGroupWikiPage), varargs...)
}

// EditGroupWikiPage mocks base method.
func (m *MockGroupWikisService) EditGroupWikiPage(gid any, slug string, opt *gitlab.EditGroupWikiPageOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupWiki, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, slug, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditGroupWikiPage", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupWiki)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditGroupWikiPage indicates an expected call of EditGroupWikiPage.
func (mr *MockGroupWikisServiceMockRecorder) EditGroupWikiPage(gid, slug, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, slug, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditGroupWikiPage", reflect.TypeOf((*MockGroupWikisService)(nil).EditGroupWikiPage), varargs...)
}

// GetGroupWikiPage mocks base method.
func (m *MockGroupWikisService) GetGroupWikiPage(gid any, slug string, opt *gitlab.GetGroupWikiPageOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupWiki, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, slug, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupWikiPage", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupWiki)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroupWikiPage indicates an expected call of GetGroupWikiPage.
func (mr *MockGroupWikisServiceMockRecorder) GetGroupWikiPage(gid, slug, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, slug, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupWikiPage", reflect.TypeOf((*MockGroupWikisService)(nil).GetGroupWikiPage), varargs...)
}

// ListGroupWikis mocks base method.
func (m *MockGroupWikisService) ListGroupWikis(gid any, opt *gitlab.ListGroupWikisOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupWiki, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupWikis", varargs...)
	ret0, _ := ret[0].([]*gitlab.GroupWiki)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupWikis indicates an expected call of ListGroupWikis.
func (mr *MockGroupWikisServiceMockRecorder) ListGroupWikis(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupWikis", reflect.TypeOf((*MockGroupWikisService)(nil).ListGroupWikis), varargs...)
}
