// Code generated by MockGen. DO NOT EDIT.
// Source: sidekiqservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=sidekiqservice_inf.go -destination=mocks/sidekiqservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockSidekiqService is a mock of SidekiqService interface.
type MockSidekiqService struct {
	ctrl     *gomock.Controller
	recorder *MockSidekiqServiceMockRecorder
}

// MockSidekiqServiceMockRecorder is the mock recorder for MockSidekiqService.
type MockSidekiqServiceMockRecorder struct {
	mock *MockSidekiqService
}

// NewMockSidekiqService creates a new mock instance.
func NewMockSidekiqService(ctrl *gomock.Controller) *MockSidekiqService {
	mock := &MockSidekiqService{ctrl: ctrl}
	mock.recorder = &MockSidekiqServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSidekiqService) EXPECT() *MockSidekiqServiceMockRecorder {
	return m.recorder
}

// GetCompoundMetrics mocks base method.
func (m *MockSidekiqService) GetCompoundMetrics(options ...gitlab.RequestOptionFunc) (*gitlab.CompoundMetrics, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCompoundMetrics", varargs...)
	ret0, _ := ret[0].(*gitlab.CompoundMetrics)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCompoundMetrics indicates an expected call of GetCompoundMetrics.
func (mr *MockSidekiqServiceMockRecorder) GetCompoundMetrics(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompoundMetrics", reflect.TypeOf((*MockSidekiqService)(nil).GetCompoundMetrics), options...)
}

// GetJobStats mocks base method.
func (m *MockSidekiqService) GetJobStats(options ...gitlab.RequestOptionFunc) (*gitlab.JobStats, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJobStats", varargs...)
	ret0, _ := ret[0].(*gitlab.JobStats)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetJobStats indicates an expected call of GetJobStats.
func (mr *MockSidekiqServiceMockRecorder) GetJobStats(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobStats", reflect.TypeOf((*MockSidekiqService)(nil).GetJobStats), options...)
}

// GetProcessMetrics mocks base method.
func (m *MockSidekiqService) GetProcessMetrics(options ...gitlab.RequestOptionFunc) (*gitlab.ProcessMetrics, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProcessMetrics", varargs...)
	ret0, _ := ret[0].(*gitlab.ProcessMetrics)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProcessMetrics indicates an expected call of GetProcessMetrics.
func (mr *MockSidekiqServiceMockRecorder) GetProcessMetrics(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessMetrics", reflect.TypeOf((*MockSidekiqService)(nil).GetProcessMetrics), options...)
}

// GetQueueMetrics mocks base method.
func (m *MockSidekiqService) GetQueueMetrics(options ...gitlab.RequestOptionFunc) (*gitlab.QueueMetrics, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetQueueMetrics", varargs...)
	ret0, _ := ret[0].(*gitlab.QueueMetrics)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetQueueMetrics indicates an expected call of GetQueueMetrics.
func (mr *MockSidekiqServiceMockRecorder) GetQueueMetrics(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueMetrics", reflect.TypeOf((*MockSidekiqService)(nil).GetQueueMetrics), options...)
}
