// Code generated by MockGen. DO NOT EDIT.
// Source: projectvariablesservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=projectvariablesservice_inf.go -destination=mocks/projectvariablesservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectVariablesService is a mock of ProjectVariablesService interface.
type MockProjectVariablesService struct {
	ctrl     *gomock.Controller
	recorder *MockProjectVariablesServiceMockRecorder
}

// MockProjectVariablesServiceMockRecorder is the mock recorder for MockProjectVariablesService.
type MockProjectVariablesServiceMockRecorder struct {
	mock *MockProjectVariablesService
}

// NewMockProjectVariablesService creates a new mock instance.
func NewMockProjectVariablesService(ctrl *gomock.Controller) *MockProjectVariablesService {
	mock := &MockProjectVariablesService{ctrl: ctrl}
	mock.recorder = &MockProjectVariablesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectVariablesService) EXPECT() *MockProjectVariablesServiceMockRecorder {
	return m.recorder
}

// CreateVariable mocks base method.
func (m *MockProjectVariablesService) CreateVariable(pid any, opt *gitlab.CreateProjectVariableOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectVariable, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVariable", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectVariable)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateVariable indicates an expected call of CreateVariable.
func (mr *MockProjectVariablesServiceMockRecorder) CreateVariable(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVariable", reflect.TypeOf((*MockProjectVariablesService)(nil).CreateVariable), varargs...)
}

// GetVariable mocks base method.
func (m *MockProjectVariablesService) GetVariable(pid any, key string, opt *gitlab.GetProjectVariableOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectVariable, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, key, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVariable", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectVariable)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVariable indicates an expected call of GetVariable.
func (mr *MockProjectVariablesServiceMockRecorder) GetVariable(pid, key, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, key, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVariable", reflect.TypeOf((*MockProjectVariablesService)(nil).GetVariable), varargs...)
}

// ListVariables mocks base method.
func (m *MockProjectVariablesService) ListVariables(pid any, opt *gitlab.ListProjectVariablesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectVariable, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVariables", varargs...)
	ret0, _ := ret[0].([]*gitlab.ProjectVariable)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListVariables indicates an expected call of ListVariables.
func (mr *MockProjectVariablesServiceMockRecorder) ListVariables(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVariables", reflect.TypeOf((*MockProjectVariablesService)(nil).ListVariables), varargs...)
}

// RemoveVariable mocks base method.
func (m *MockProjectVariablesService) RemoveVariable(pid any, key string, opt *gitlab.RemoveProjectVariableOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, key, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveVariable", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveVariable indicates an expected call of RemoveVariable.
func (mr *MockProjectVariablesServiceMockRecorder) RemoveVariable(pid, key, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, key, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVariable", reflect.TypeOf((*MockProjectVariablesService)(nil).RemoveVariable), varargs...)
}

// UpdateVariable mocks base method.
func (m *MockProjectVariablesService) UpdateVariable(pid any, key string, opt *gitlab.UpdateProjectVariableOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectVariable, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, key, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVariable", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectVariable)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateVariable indicates an expected call of UpdateVariable.
func (mr *MockProjectVariablesServiceMockRecorder) UpdateVariable(pid, key, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, key, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVariable", reflect.TypeOf((*MockProjectVariablesService)(nil).UpdateVariable), varargs...)
}
