// Code generated by MockGen. DO NOT EDIT.
// Source: pagesdomainsservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=pagesdomainsservice_inf.go -destination=mocks/pagesdomainsservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockPagesDomainsService is a mock of PagesDomainsService interface.
type MockPagesDomainsService struct {
	ctrl     *gomock.Controller
	recorder *MockPagesDomainsServiceMockRecorder
}

// MockPagesDomainsServiceMockRecorder is the mock recorder for MockPagesDomainsService.
type MockPagesDomainsServiceMockRecorder struct {
	mock *MockPagesDomainsService
}

// NewMockPagesDomainsService creates a new mock instance.
func NewMockPagesDomainsService(ctrl *gomock.Controller) *MockPagesDomainsService {
	mock := &MockPagesDomainsService{ctrl: ctrl}
	mock.recorder = &MockPagesDomainsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPagesDomainsService) EXPECT() *MockPagesDomainsServiceMockRecorder {
	return m.recorder
}

// CreatePagesDomain mocks base method.
func (m *MockPagesDomainsService) CreatePagesDomain(pid any, opt *gitlab.CreatePagesDomainOptions, options ...gitlab.RequestOptionFunc) (*gitlab.PagesDomain, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePagesDomain", varargs...)
	ret0, _ := ret[0].(*gitlab.PagesDomain)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePagesDomain indicates an expected call of CreatePagesDomain.
func (mr *MockPagesDomainsServiceMockRecorder) CreatePagesDomain(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePagesDomain", reflect.TypeOf((*MockPagesDomainsService)(nil).CreatePagesDomain), varargs...)
}

// DeletePagesDomain mocks base method.
func (m *MockPagesDomainsService) DeletePagesDomain(pid any, domain string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, domain}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePagesDomain", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePagesDomain indicates an expected call of DeletePagesDomain.
func (mr *MockPagesDomainsServiceMockRecorder) DeletePagesDomain(pid, domain any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, domain}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePagesDomain", reflect.TypeOf((*MockPagesDomainsService)(nil).DeletePagesDomain), varargs...)
}

// GetPagesDomain mocks base method.
func (m *MockPagesDomainsService) GetPagesDomain(pid any, domain string, options ...gitlab.RequestOptionFunc) (*gitlab.PagesDomain, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, domain}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPagesDomain", varargs...)
	ret0, _ := ret[0].(*gitlab.PagesDomain)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPagesDomain indicates an expected call of GetPagesDomain.
func (mr *MockPagesDomainsServiceMockRecorder) GetPagesDomain(pid, domain any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, domain}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPagesDomain", reflect.TypeOf((*MockPagesDomainsService)(nil).GetPagesDomain), varargs...)
}

// ListAllPagesDomains mocks base method.
func (m *MockPagesDomainsService) ListAllPagesDomains(options ...gitlab.RequestOptionFunc) ([]*gitlab.PagesDomain, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAllPagesDomains", varargs...)
	ret0, _ := ret[0].([]*gitlab.PagesDomain)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAllPagesDomains indicates an expected call of ListAllPagesDomains.
func (mr *MockPagesDomainsServiceMockRecorder) ListAllPagesDomains(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllPagesDomains", reflect.TypeOf((*MockPagesDomainsService)(nil).ListAllPagesDomains), options...)
}

// ListPagesDomains mocks base method.
func (m *MockPagesDomainsService) ListPagesDomains(pid any, opt *gitlab.ListPagesDomainsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.PagesDomain, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPagesDomains", varargs...)
	ret0, _ := ret[0].([]*gitlab.PagesDomain)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPagesDomains indicates an expected call of ListPagesDomains.
func (mr *MockPagesDomainsServiceMockRecorder) ListPagesDomains(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPagesDomains", reflect.TypeOf((*MockPagesDomainsService)(nil).ListPagesDomains), varargs...)
}

// UpdatePagesDomain mocks base method.
func (m *MockPagesDomainsService) UpdatePagesDomain(pid any, domain string, opt *gitlab.UpdatePagesDomainOptions, options ...gitlab.RequestOptionFunc) (*gitlab.PagesDomain, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, domain, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePagesDomain", varargs...)
	ret0, _ := ret[0].(*gitlab.PagesDomain)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdatePagesDomain indicates an expected call of UpdatePagesDomain.
func (mr *MockPagesDomainsServiceMockRecorder) UpdatePagesDomain(pid, domain, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, domain, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePagesDomain", reflect.TypeOf((*MockPagesDomainsService)(nil).UpdatePagesDomain), varargs...)
}
