// Code generated by MockGen. DO NOT EDIT.
// Source: groupvariablesservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=groupvariablesservice_inf.go -destination=mocks/groupvariablesservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupVariablesService is a mock of GroupVariablesService interface.
type MockGroupVariablesService struct {
	ctrl     *gomock.Controller
	recorder *MockGroupVariablesServiceMockRecorder
	isgomock struct{}
}

// MockGroupVariablesServiceMockRecorder is the mock recorder for MockGroupVariablesService.
type MockGroupVariablesServiceMockRecorder struct {
	mock *MockGroupVariablesService
}

// NewMockGroupVariablesService creates a new mock instance.
func NewMockGroupVariablesService(ctrl *gomock.Controller) *MockGroupVariablesService {
	mock := &MockGroupVariablesService{ctrl: ctrl}
	mock.recorder = &MockGroupVariablesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupVariablesService) EXPECT() *MockGroupVariablesServiceMockRecorder {
	return m.recorder
}

// CreateVariable mocks base method.
func (m *MockGroupVariablesService) CreateVariable(gid any, opt *gitlab.CreateGroupVariableOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupVariable, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVariable", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupVariable)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateVariable indicates an expected call of CreateVariable.
func (mr *MockGroupVariablesServiceMockRecorder) CreateVariable(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVariable", reflect.TypeOf((*MockGroupVariablesService)(nil).CreateVariable), varargs...)
}

// GetVariable mocks base method.
func (m *MockGroupVariablesService) GetVariable(gid any, key string, opt *gitlab.GetGroupVariableOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupVariable, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, key, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVariable", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupVariable)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVariable indicates an expected call of GetVariable.
func (mr *MockGroupVariablesServiceMockRecorder) GetVariable(gid, key, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, key, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVariable", reflect.TypeOf((*MockGroupVariablesService)(nil).GetVariable), varargs...)
}

// ListVariables mocks base method.
func (m *MockGroupVariablesService) ListVariables(gid any, opt *gitlab.ListGroupVariablesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupVariable, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVariables", varargs...)
	ret0, _ := ret[0].([]*gitlab.GroupVariable)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListVariables indicates an expected call of ListVariables.
func (mr *MockGroupVariablesServiceMockRecorder) ListVariables(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVariables", reflect.TypeOf((*MockGroupVariablesService)(nil).ListVariables), varargs...)
}

// RemoveVariable mocks base method.
func (m *MockGroupVariablesService) RemoveVariable(gid any, key string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveVariable", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveVariable indicates an expected call of RemoveVariable.
func (mr *MockGroupVariablesServiceMockRecorder) RemoveVariable(gid, key any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, key}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVariable", reflect.TypeOf((*MockGroupVariablesService)(nil).RemoveVariable), varargs...)
}

// UpdateVariable mocks base method.
func (m *MockGroupVariablesService) UpdateVariable(gid any, key string, opt *gitlab.UpdateGroupVariableOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupVariable, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, key, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVariable", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupVariable)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateVariable indicates an expected call of UpdateVariable.
func (mr *MockGroupVariablesServiceMockRecorder) UpdateVariable(gid, key, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, key, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVariable", reflect.TypeOf((*MockGroupVariablesService)(nil).UpdateVariable), varargs...)
}
