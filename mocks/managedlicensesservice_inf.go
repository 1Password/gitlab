// Code generated by MockGen. DO NOT EDIT.
// Source: managedlicensesservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=managedlicensesservice_inf.go -destination=mocks/managedlicensesservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockManagedLicensesService is a mock of ManagedLicensesService interface.
type MockManagedLicensesService struct {
	ctrl     *gomock.Controller
	recorder *MockManagedLicensesServiceMockRecorder
	isgomock struct{}
}

// MockManagedLicensesServiceMockRecorder is the mock recorder for MockManagedLicensesService.
type MockManagedLicensesServiceMockRecorder struct {
	mock *MockManagedLicensesService
}

// NewMockManagedLicensesService creates a new mock instance.
func NewMockManagedLicensesService(ctrl *gomock.Controller) *MockManagedLicensesService {
	mock := &MockManagedLicensesService{ctrl: ctrl}
	mock.recorder = &MockManagedLicensesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagedLicensesService) EXPECT() *MockManagedLicensesServiceMockRecorder {
	return m.recorder
}

// AddManagedLicense mocks base method.
func (m *MockManagedLicensesService) AddManagedLicense(pid any, opt *gitlab.AddManagedLicenseOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ManagedLicense, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddManagedLicense", varargs...)
	ret0, _ := ret[0].(*gitlab.ManagedLicense)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddManagedLicense indicates an expected call of AddManagedLicense.
func (mr *MockManagedLicensesServiceMockRecorder) AddManagedLicense(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddManagedLicense", reflect.TypeOf((*MockManagedLicensesService)(nil).AddManagedLicense), varargs...)
}

// DeleteManagedLicense mocks base method.
func (m *MockManagedLicensesService) DeleteManagedLicense(pid, mlid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mlid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteManagedLicense", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteManagedLicense indicates an expected call of DeleteManagedLicense.
func (mr *MockManagedLicensesServiceMockRecorder) DeleteManagedLicense(pid, mlid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mlid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteManagedLicense", reflect.TypeOf((*MockManagedLicensesService)(nil).DeleteManagedLicense), varargs...)
}

// EditManagedLicense mocks base method.
func (m *MockManagedLicensesService) EditManagedLicense(pid, mlid any, opt *gitlab.EditManagedLicenceOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ManagedLicense, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mlid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditManagedLicense", varargs...)
	ret0, _ := ret[0].(*gitlab.ManagedLicense)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditManagedLicense indicates an expected call of EditManagedLicense.
func (mr *MockManagedLicensesServiceMockRecorder) EditManagedLicense(pid, mlid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mlid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditManagedLicense", reflect.TypeOf((*MockManagedLicensesService)(nil).EditManagedLicense), varargs...)
}

// GetManagedLicense mocks base method.
func (m *MockManagedLicensesService) GetManagedLicense(pid, mlid any, options ...gitlab.RequestOptionFunc) (*gitlab.ManagedLicense, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mlid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetManagedLicense", varargs...)
	ret0, _ := ret[0].(*gitlab.ManagedLicense)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetManagedLicense indicates an expected call of GetManagedLicense.
func (mr *MockManagedLicensesServiceMockRecorder) GetManagedLicense(pid, mlid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mlid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagedLicense", reflect.TypeOf((*MockManagedLicensesService)(nil).GetManagedLicense), varargs...)
}

// ListManagedLicenses mocks base method.
func (m *MockManagedLicensesService) ListManagedLicenses(pid any, options ...gitlab.RequestOptionFunc) ([]*gitlab.ManagedLicense, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListManagedLicenses", varargs...)
	ret0, _ := ret[0].([]*gitlab.ManagedLicense)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListManagedLicenses indicates an expected call of ListManagedLicenses.
func (mr *MockManagedLicensesServiceMockRecorder) ListManagedLicenses(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListManagedLicenses", reflect.TypeOf((*MockManagedLicensesService)(nil).ListManagedLicenses), varargs...)
}
