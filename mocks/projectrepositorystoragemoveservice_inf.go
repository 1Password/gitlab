// Code generated by MockGen. DO NOT EDIT.
// Source: projectrepositorystoragemoveservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=projectrepositorystoragemoveservice_inf.go -destination=mocks/projectrepositorystoragemoveservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectRepositoryStorageMoveService is a mock of ProjectRepositoryStorageMoveService interface.
type MockProjectRepositoryStorageMoveService struct {
	ctrl     *gomock.Controller
	recorder *MockProjectRepositoryStorageMoveServiceMockRecorder
	isgomock struct{}
}

// MockProjectRepositoryStorageMoveServiceMockRecorder is the mock recorder for MockProjectRepositoryStorageMoveService.
type MockProjectRepositoryStorageMoveServiceMockRecorder struct {
	mock *MockProjectRepositoryStorageMoveService
}

// NewMockProjectRepositoryStorageMoveService creates a new mock instance.
func NewMockProjectRepositoryStorageMoveService(ctrl *gomock.Controller) *MockProjectRepositoryStorageMoveService {
	mock := &MockProjectRepositoryStorageMoveService{ctrl: ctrl}
	mock.recorder = &MockProjectRepositoryStorageMoveServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectRepositoryStorageMoveService) EXPECT() *MockProjectRepositoryStorageMoveServiceMockRecorder {
	return m.recorder
}

// GetStorageMove mocks base method.
func (m *MockProjectRepositoryStorageMoveService) GetStorageMove(repositoryStorage int, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectRepositoryStorageMove, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{repositoryStorage}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStorageMove", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectRepositoryStorageMove)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStorageMove indicates an expected call of GetStorageMove.
func (mr *MockProjectRepositoryStorageMoveServiceMockRecorder) GetStorageMove(repositoryStorage any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{repositoryStorage}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageMove", reflect.TypeOf((*MockProjectRepositoryStorageMoveService)(nil).GetStorageMove), varargs...)
}

// GetStorageMoveForProject mocks base method.
func (m *MockProjectRepositoryStorageMoveService) GetStorageMoveForProject(project, repositoryStorage int, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectRepositoryStorageMove, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{project, repositoryStorage}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStorageMoveForProject", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectRepositoryStorageMove)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStorageMoveForProject indicates an expected call of GetStorageMoveForProject.
func (mr *MockProjectRepositoryStorageMoveServiceMockRecorder) GetStorageMoveForProject(project, repositoryStorage any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{project, repositoryStorage}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageMoveForProject", reflect.TypeOf((*MockProjectRepositoryStorageMoveService)(nil).GetStorageMoveForProject), varargs...)
}

// RetrieveAllStorageMoves mocks base method.
func (m *MockProjectRepositoryStorageMoveService) RetrieveAllStorageMoves(opts gitlab.RetrieveAllProjectStorageMovesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectRepositoryStorageMove, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opts}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveAllStorageMoves", varargs...)
	ret0, _ := ret[0].([]*gitlab.ProjectRepositoryStorageMove)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RetrieveAllStorageMoves indicates an expected call of RetrieveAllStorageMoves.
func (mr *MockProjectRepositoryStorageMoveServiceMockRecorder) RetrieveAllStorageMoves(opts any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opts}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAllStorageMoves", reflect.TypeOf((*MockProjectRepositoryStorageMoveService)(nil).RetrieveAllStorageMoves), varargs...)
}

// RetrieveAllStorageMovesForProject mocks base method.
func (m *MockProjectRepositoryStorageMoveService) RetrieveAllStorageMovesForProject(project int, opts gitlab.RetrieveAllProjectStorageMovesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectRepositoryStorageMove, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{project, opts}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveAllStorageMovesForProject", varargs...)
	ret0, _ := ret[0].([]*gitlab.ProjectRepositoryStorageMove)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RetrieveAllStorageMovesForProject indicates an expected call of RetrieveAllStorageMovesForProject.
func (mr *MockProjectRepositoryStorageMoveServiceMockRecorder) RetrieveAllStorageMovesForProject(project, opts any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{project, opts}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAllStorageMovesForProject", reflect.TypeOf((*MockProjectRepositoryStorageMoveService)(nil).RetrieveAllStorageMovesForProject), varargs...)
}

// ScheduleAllStorageMoves mocks base method.
func (m *MockProjectRepositoryStorageMoveService) ScheduleAllStorageMoves(opts gitlab.ScheduleAllProjectStorageMovesOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opts}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleAllStorageMoves", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleAllStorageMoves indicates an expected call of ScheduleAllStorageMoves.
func (mr *MockProjectRepositoryStorageMoveServiceMockRecorder) ScheduleAllStorageMoves(opts any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opts}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleAllStorageMoves", reflect.TypeOf((*MockProjectRepositoryStorageMoveService)(nil).ScheduleAllStorageMoves), varargs...)
}

// ScheduleStorageMoveForProject mocks base method.
func (m *MockProjectRepositoryStorageMoveService) ScheduleStorageMoveForProject(project int, opts gitlab.ScheduleStorageMoveForProjectOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectRepositoryStorageMove, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{project, opts}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleStorageMoveForProject", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectRepositoryStorageMove)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ScheduleStorageMoveForProject indicates an expected call of ScheduleStorageMoveForProject.
func (mr *MockProjectRepositoryStorageMoveServiceMockRecorder) ScheduleStorageMoveForProject(project, opts any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{project, opts}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleStorageMoveForProject", reflect.TypeOf((*MockProjectRepositoryStorageMoveService)(nil).ScheduleStorageMoveForProject), varargs...)
}
