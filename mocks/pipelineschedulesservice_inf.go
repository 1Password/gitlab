// Code generated by MockGen. DO NOT EDIT.
// Source: pipelineschedulesservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=pipelineschedulesservice_inf.go -destination=mocks/pipelineschedulesservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockPipelineSchedulesService is a mock of PipelineSchedulesService interface.
type MockPipelineSchedulesService struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineSchedulesServiceMockRecorder
	isgomock struct{}
}

// MockPipelineSchedulesServiceMockRecorder is the mock recorder for MockPipelineSchedulesService.
type MockPipelineSchedulesServiceMockRecorder struct {
	mock *MockPipelineSchedulesService
}

// NewMockPipelineSchedulesService creates a new mock instance.
func NewMockPipelineSchedulesService(ctrl *gomock.Controller) *MockPipelineSchedulesService {
	mock := &MockPipelineSchedulesService{ctrl: ctrl}
	mock.recorder = &MockPipelineSchedulesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineSchedulesService) EXPECT() *MockPipelineSchedulesServiceMockRecorder {
	return m.recorder
}

// CreatePipelineSchedule mocks base method.
func (m *MockPipelineSchedulesService) CreatePipelineSchedule(pid any, opt *gitlab.CreatePipelineScheduleOptions, options ...gitlab.RequestOptionFunc) (*gitlab.PipelineSchedule, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePipelineSchedule", varargs...)
	ret0, _ := ret[0].(*gitlab.PipelineSchedule)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePipelineSchedule indicates an expected call of CreatePipelineSchedule.
func (mr *MockPipelineSchedulesServiceMockRecorder) CreatePipelineSchedule(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipelineSchedule", reflect.TypeOf((*MockPipelineSchedulesService)(nil).CreatePipelineSchedule), varargs...)
}

// CreatePipelineScheduleVariable mocks base method.
func (m *MockPipelineSchedulesService) CreatePipelineScheduleVariable(pid any, schedule int, opt *gitlab.CreatePipelineScheduleVariableOptions, options ...gitlab.RequestOptionFunc) (*gitlab.PipelineVariable, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, schedule, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePipelineScheduleVariable", varargs...)
	ret0, _ := ret[0].(*gitlab.PipelineVariable)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePipelineScheduleVariable indicates an expected call of CreatePipelineScheduleVariable.
func (mr *MockPipelineSchedulesServiceMockRecorder) CreatePipelineScheduleVariable(pid, schedule, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, schedule, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipelineScheduleVariable", reflect.TypeOf((*MockPipelineSchedulesService)(nil).CreatePipelineScheduleVariable), varargs...)
}

// DeletePipelineSchedule mocks base method.
func (m *MockPipelineSchedulesService) DeletePipelineSchedule(pid any, schedule int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, schedule}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePipelineSchedule", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePipelineSchedule indicates an expected call of DeletePipelineSchedule.
func (mr *MockPipelineSchedulesServiceMockRecorder) DeletePipelineSchedule(pid, schedule any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, schedule}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipelineSchedule", reflect.TypeOf((*MockPipelineSchedulesService)(nil).DeletePipelineSchedule), varargs...)
}

// DeletePipelineScheduleVariable mocks base method.
func (m *MockPipelineSchedulesService) DeletePipelineScheduleVariable(pid any, schedule int, key string, options ...gitlab.RequestOptionFunc) (*gitlab.PipelineVariable, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, schedule, key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePipelineScheduleVariable", varargs...)
	ret0, _ := ret[0].(*gitlab.PipelineVariable)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeletePipelineScheduleVariable indicates an expected call of DeletePipelineScheduleVariable.
func (mr *MockPipelineSchedulesServiceMockRecorder) DeletePipelineScheduleVariable(pid, schedule, key any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, schedule, key}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipelineScheduleVariable", reflect.TypeOf((*MockPipelineSchedulesService)(nil).DeletePipelineScheduleVariable), varargs...)
}

// EditPipelineSchedule mocks base method.
func (m *MockPipelineSchedulesService) EditPipelineSchedule(pid any, schedule int, opt *gitlab.EditPipelineScheduleOptions, options ...gitlab.RequestOptionFunc) (*gitlab.PipelineSchedule, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, schedule, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditPipelineSchedule", varargs...)
	ret0, _ := ret[0].(*gitlab.PipelineSchedule)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditPipelineSchedule indicates an expected call of EditPipelineSchedule.
func (mr *MockPipelineSchedulesServiceMockRecorder) EditPipelineSchedule(pid, schedule, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, schedule, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditPipelineSchedule", reflect.TypeOf((*MockPipelineSchedulesService)(nil).EditPipelineSchedule), varargs...)
}

// EditPipelineScheduleVariable mocks base method.
func (m *MockPipelineSchedulesService) EditPipelineScheduleVariable(pid any, schedule int, key string, opt *gitlab.EditPipelineScheduleVariableOptions, options ...gitlab.RequestOptionFunc) (*gitlab.PipelineVariable, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, schedule, key, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditPipelineScheduleVariable", varargs...)
	ret0, _ := ret[0].(*gitlab.PipelineVariable)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditPipelineScheduleVariable indicates an expected call of EditPipelineScheduleVariable.
func (mr *MockPipelineSchedulesServiceMockRecorder) EditPipelineScheduleVariable(pid, schedule, key, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, schedule, key, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditPipelineScheduleVariable", reflect.TypeOf((*MockPipelineSchedulesService)(nil).EditPipelineScheduleVariable), varargs...)
}

// GetPipelineSchedule mocks base method.
func (m *MockPipelineSchedulesService) GetPipelineSchedule(pid any, schedule int, options ...gitlab.RequestOptionFunc) (*gitlab.PipelineSchedule, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, schedule}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPipelineSchedule", varargs...)
	ret0, _ := ret[0].(*gitlab.PipelineSchedule)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPipelineSchedule indicates an expected call of GetPipelineSchedule.
func (mr *MockPipelineSchedulesServiceMockRecorder) GetPipelineSchedule(pid, schedule any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, schedule}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineSchedule", reflect.TypeOf((*MockPipelineSchedulesService)(nil).GetPipelineSchedule), varargs...)
}

// ListPipelineSchedules mocks base method.
func (m *MockPipelineSchedulesService) ListPipelineSchedules(pid any, opt *gitlab.ListPipelineSchedulesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.PipelineSchedule, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPipelineSchedules", varargs...)
	ret0, _ := ret[0].([]*gitlab.PipelineSchedule)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPipelineSchedules indicates an expected call of ListPipelineSchedules.
func (mr *MockPipelineSchedulesServiceMockRecorder) ListPipelineSchedules(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelineSchedules", reflect.TypeOf((*MockPipelineSchedulesService)(nil).ListPipelineSchedules), varargs...)
}

// ListPipelinesTriggeredBySchedule mocks base method.
func (m *MockPipelineSchedulesService) ListPipelinesTriggeredBySchedule(pid any, schedule int, opt *gitlab.ListPipelinesTriggeredByScheduleOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Pipeline, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, schedule, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPipelinesTriggeredBySchedule", varargs...)
	ret0, _ := ret[0].([]*gitlab.Pipeline)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPipelinesTriggeredBySchedule indicates an expected call of ListPipelinesTriggeredBySchedule.
func (mr *MockPipelineSchedulesServiceMockRecorder) ListPipelinesTriggeredBySchedule(pid, schedule, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, schedule, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelinesTriggeredBySchedule", reflect.TypeOf((*MockPipelineSchedulesService)(nil).ListPipelinesTriggeredBySchedule), varargs...)
}

// RunPipelineSchedule mocks base method.
func (m *MockPipelineSchedulesService) RunPipelineSchedule(pid any, schedule int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, schedule}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunPipelineSchedule", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunPipelineSchedule indicates an expected call of RunPipelineSchedule.
func (mr *MockPipelineSchedulesServiceMockRecorder) RunPipelineSchedule(pid, schedule any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, schedule}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPipelineSchedule", reflect.TypeOf((*MockPipelineSchedulesService)(nil).RunPipelineSchedule), varargs...)
}

// TakeOwnershipOfPipelineSchedule mocks base method.
func (m *MockPipelineSchedulesService) TakeOwnershipOfPipelineSchedule(pid any, schedule int, options ...gitlab.RequestOptionFunc) (*gitlab.PipelineSchedule, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, schedule}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TakeOwnershipOfPipelineSchedule", varargs...)
	ret0, _ := ret[0].(*gitlab.PipelineSchedule)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TakeOwnershipOfPipelineSchedule indicates an expected call of TakeOwnershipOfPipelineSchedule.
func (mr *MockPipelineSchedulesServiceMockRecorder) TakeOwnershipOfPipelineSchedule(pid, schedule any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, schedule}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeOwnershipOfPipelineSchedule", reflect.TypeOf((*MockPipelineSchedulesService)(nil).TakeOwnershipOfPipelineSchedule), varargs...)
}
