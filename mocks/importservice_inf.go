// Code generated by MockGen. DO NOT EDIT.
// Source: importservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=importservice_inf.go -destination=mocks/importservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockImportService is a mock of ImportService interface.
type MockImportService struct {
	ctrl     *gomock.Controller
	recorder *MockImportServiceMockRecorder
	isgomock struct{}
}

// MockImportServiceMockRecorder is the mock recorder for MockImportService.
type MockImportServiceMockRecorder struct {
	mock *MockImportService
}

// NewMockImportService creates a new mock instance.
func NewMockImportService(ctrl *gomock.Controller) *MockImportService {
	mock := &MockImportService{ctrl: ctrl}
	mock.recorder = &MockImportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImportService) EXPECT() *MockImportServiceMockRecorder {
	return m.recorder
}

// CancelGitHubProjectImport mocks base method.
func (m *MockImportService) CancelGitHubProjectImport(opt *gitlab.CancelGitHubProjectImportOptions, options ...gitlab.RequestOptionFunc) (*gitlab.CancelledGitHubImport, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelGitHubProjectImport", varargs...)
	ret0, _ := ret[0].(*gitlab.CancelledGitHubImport)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CancelGitHubProjectImport indicates an expected call of CancelGitHubProjectImport.
func (mr *MockImportServiceMockRecorder) CancelGitHubProjectImport(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelGitHubProjectImport", reflect.TypeOf((*MockImportService)(nil).CancelGitHubProjectImport), varargs...)
}

// ImportGitHubGistsIntoGitLabSnippets mocks base method.
func (m *MockImportService) ImportGitHubGistsIntoGitLabSnippets(opt *gitlab.ImportGitHubGistsIntoGitLabSnippetsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportGitHubGistsIntoGitLabSnippets", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportGitHubGistsIntoGitLabSnippets indicates an expected call of ImportGitHubGistsIntoGitLabSnippets.
func (mr *MockImportServiceMockRecorder) ImportGitHubGistsIntoGitLabSnippets(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportGitHubGistsIntoGitLabSnippets", reflect.TypeOf((*MockImportService)(nil).ImportGitHubGistsIntoGitLabSnippets), varargs...)
}

// ImportRepositoryFromBitbucketCloud mocks base method.
func (m *MockImportService) ImportRepositoryFromBitbucketCloud(opt *gitlab.ImportRepositoryFromBitbucketCloudOptions, options ...gitlab.RequestOptionFunc) (*gitlab.BitbucketCloudImport, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportRepositoryFromBitbucketCloud", varargs...)
	ret0, _ := ret[0].(*gitlab.BitbucketCloudImport)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ImportRepositoryFromBitbucketCloud indicates an expected call of ImportRepositoryFromBitbucketCloud.
func (mr *MockImportServiceMockRecorder) ImportRepositoryFromBitbucketCloud(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportRepositoryFromBitbucketCloud", reflect.TypeOf((*MockImportService)(nil).ImportRepositoryFromBitbucketCloud), varargs...)
}

// ImportRepositoryFromBitbucketServer mocks base method.
func (m *MockImportService) ImportRepositoryFromBitbucketServer(opt *gitlab.ImportRepositoryFromBitbucketServerOptions, options ...gitlab.RequestOptionFunc) (*gitlab.BitbucketServerImport, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportRepositoryFromBitbucketServer", varargs...)
	ret0, _ := ret[0].(*gitlab.BitbucketServerImport)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ImportRepositoryFromBitbucketServer indicates an expected call of ImportRepositoryFromBitbucketServer.
func (mr *MockImportServiceMockRecorder) ImportRepositoryFromBitbucketServer(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportRepositoryFromBitbucketServer", reflect.TypeOf((*MockImportService)(nil).ImportRepositoryFromBitbucketServer), varargs...)
}

// ImportRepositoryFromGitHub mocks base method.
func (m *MockImportService) ImportRepositoryFromGitHub(opt *gitlab.ImportRepositoryFromGitHubOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GitHubImport, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportRepositoryFromGitHub", varargs...)
	ret0, _ := ret[0].(*gitlab.GitHubImport)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ImportRepositoryFromGitHub indicates an expected call of ImportRepositoryFromGitHub.
func (mr *MockImportServiceMockRecorder) ImportRepositoryFromGitHub(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportRepositoryFromGitHub", reflect.TypeOf((*MockImportService)(nil).ImportRepositoryFromGitHub), varargs...)
}
