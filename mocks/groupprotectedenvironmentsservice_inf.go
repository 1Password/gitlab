// Code generated by MockGen. DO NOT EDIT.
// Source: groupprotectedenvironmentsservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=groupprotectedenvironmentsservice_inf.go -destination=mocks/groupprotectedenvironmentsservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupProtectedEnvironmentsService is a mock of GroupProtectedEnvironmentsService interface.
type MockGroupProtectedEnvironmentsService struct {
	ctrl     *gomock.Controller
	recorder *MockGroupProtectedEnvironmentsServiceMockRecorder
	isgomock struct{}
}

// MockGroupProtectedEnvironmentsServiceMockRecorder is the mock recorder for MockGroupProtectedEnvironmentsService.
type MockGroupProtectedEnvironmentsServiceMockRecorder struct {
	mock *MockGroupProtectedEnvironmentsService
}

// NewMockGroupProtectedEnvironmentsService creates a new mock instance.
func NewMockGroupProtectedEnvironmentsService(ctrl *gomock.Controller) *MockGroupProtectedEnvironmentsService {
	mock := &MockGroupProtectedEnvironmentsService{ctrl: ctrl}
	mock.recorder = &MockGroupProtectedEnvironmentsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupProtectedEnvironmentsService) EXPECT() *MockGroupProtectedEnvironmentsServiceMockRecorder {
	return m.recorder
}

// GetGroupProtectedEnvironment mocks base method.
func (m *MockGroupProtectedEnvironmentsService) GetGroupProtectedEnvironment(gid any, environment string, options ...gitlab.RequestOptionFunc) (*gitlab.GroupProtectedEnvironment, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, environment}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupProtectedEnvironment", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupProtectedEnvironment)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroupProtectedEnvironment indicates an expected call of GetGroupProtectedEnvironment.
func (mr *MockGroupProtectedEnvironmentsServiceMockRecorder) GetGroupProtectedEnvironment(gid, environment any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, environment}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupProtectedEnvironment", reflect.TypeOf((*MockGroupProtectedEnvironmentsService)(nil).GetGroupProtectedEnvironment), varargs...)
}

// ListGroupProtectedEnvironments mocks base method.
func (m *MockGroupProtectedEnvironmentsService) ListGroupProtectedEnvironments(gid any, opt *gitlab.ListGroupProtectedEnvironmentsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupProtectedEnvironment, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupProtectedEnvironments", varargs...)
	ret0, _ := ret[0].([]*gitlab.GroupProtectedEnvironment)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupProtectedEnvironments indicates an expected call of ListGroupProtectedEnvironments.
func (mr *MockGroupProtectedEnvironmentsServiceMockRecorder) ListGroupProtectedEnvironments(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupProtectedEnvironments", reflect.TypeOf((*MockGroupProtectedEnvironmentsService)(nil).ListGroupProtectedEnvironments), varargs...)
}

// ProtectGroupEnvironment mocks base method.
func (m *MockGroupProtectedEnvironmentsService) ProtectGroupEnvironment(gid any, opt *gitlab.ProtectGroupEnvironmentOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupProtectedEnvironment, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProtectGroupEnvironment", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupProtectedEnvironment)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProtectGroupEnvironment indicates an expected call of ProtectGroupEnvironment.
func (mr *MockGroupProtectedEnvironmentsServiceMockRecorder) ProtectGroupEnvironment(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtectGroupEnvironment", reflect.TypeOf((*MockGroupProtectedEnvironmentsService)(nil).ProtectGroupEnvironment), varargs...)
}

// UnprotectGroupEnvironment mocks base method.
func (m *MockGroupProtectedEnvironmentsService) UnprotectGroupEnvironment(gid any, environment string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, environment}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnprotectGroupEnvironment", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnprotectGroupEnvironment indicates an expected call of UnprotectGroupEnvironment.
func (mr *MockGroupProtectedEnvironmentsServiceMockRecorder) UnprotectGroupEnvironment(gid, environment any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, environment}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnprotectGroupEnvironment", reflect.TypeOf((*MockGroupProtectedEnvironmentsService)(nil).UnprotectGroupEnvironment), varargs...)
}

// UpdateGroupProtectedEnvironment mocks base method.
func (m *MockGroupProtectedEnvironmentsService) UpdateGroupProtectedEnvironment(gid any, environment string, opt *gitlab.UpdateGroupProtectedEnvironmentOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupProtectedEnvironment, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, environment, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGroupProtectedEnvironment", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupProtectedEnvironment)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateGroupProtectedEnvironment indicates an expected call of UpdateGroupProtectedEnvironment.
func (mr *MockGroupProtectedEnvironmentsServiceMockRecorder) UpdateGroupProtectedEnvironment(gid, environment, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, environment, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupProtectedEnvironment", reflect.TypeOf((*MockGroupProtectedEnvironmentsService)(nil).UpdateGroupProtectedEnvironment), varargs...)
}
