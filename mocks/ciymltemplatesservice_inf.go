// Code generated by MockGen. DO NOT EDIT.
// Source: ciymltemplatesservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=ciymltemplatesservice_inf.go -destination=mocks/ciymltemplatesservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockCIYMLTemplatesService is a mock of CIYMLTemplatesService interface.
type MockCIYMLTemplatesService struct {
	ctrl     *gomock.Controller
	recorder *MockCIYMLTemplatesServiceMockRecorder
}

// MockCIYMLTemplatesServiceMockRecorder is the mock recorder for MockCIYMLTemplatesService.
type MockCIYMLTemplatesServiceMockRecorder struct {
	mock *MockCIYMLTemplatesService
}

// NewMockCIYMLTemplatesService creates a new mock instance.
func NewMockCIYMLTemplatesService(ctrl *gomock.Controller) *MockCIYMLTemplatesService {
	mock := &MockCIYMLTemplatesService{ctrl: ctrl}
	mock.recorder = &MockCIYMLTemplatesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCIYMLTemplatesService) EXPECT() *MockCIYMLTemplatesServiceMockRecorder {
	return m.recorder
}

// GetTemplate mocks base method.
func (m *MockCIYMLTemplatesService) GetTemplate(key string, options ...gitlab.RequestOptionFunc) (*gitlab.CIYMLTemplate, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTemplate", varargs...)
	ret0, _ := ret[0].(*gitlab.CIYMLTemplate)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTemplate indicates an expected call of GetTemplate.
func (mr *MockCIYMLTemplatesServiceMockRecorder) GetTemplate(key any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplate", reflect.TypeOf((*MockCIYMLTemplatesService)(nil).GetTemplate), varargs...)
}

// ListAllTemplates mocks base method.
func (m *MockCIYMLTemplatesService) ListAllTemplates(opt *gitlab.ListCIYMLTemplatesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.CIYMLTemplateListItem, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAllTemplates", varargs...)
	ret0, _ := ret[0].([]*gitlab.CIYMLTemplateListItem)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAllTemplates indicates an expected call of ListAllTemplates.
func (mr *MockCIYMLTemplatesServiceMockRecorder) ListAllTemplates(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllTemplates", reflect.TypeOf((*MockCIYMLTemplatesService)(nil).ListAllTemplates), varargs...)
}
