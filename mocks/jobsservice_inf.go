// Code generated by MockGen. DO NOT EDIT.
// Source: jobsservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=jobsservice_inf.go -destination=mocks/jobsservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	bytes "bytes"
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockJobsService is a mock of JobsService interface.
type MockJobsService struct {
	ctrl     *gomock.Controller
	recorder *MockJobsServiceMockRecorder
	isgomock struct{}
}

// MockJobsServiceMockRecorder is the mock recorder for MockJobsService.
type MockJobsServiceMockRecorder struct {
	mock *MockJobsService
}

// NewMockJobsService creates a new mock instance.
func NewMockJobsService(ctrl *gomock.Controller) *MockJobsService {
	mock := &MockJobsService{ctrl: ctrl}
	mock.recorder = &MockJobsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobsService) EXPECT() *MockJobsServiceMockRecorder {
	return m.recorder
}

// CancelJob mocks base method.
func (m *MockJobsService) CancelJob(pid any, jobID int, options ...gitlab.RequestOptionFunc) (*gitlab.Job, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, jobID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelJob", varargs...)
	ret0, _ := ret[0].(*gitlab.Job)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CancelJob indicates an expected call of CancelJob.
func (mr *MockJobsServiceMockRecorder) CancelJob(pid, jobID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, jobID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJob", reflect.TypeOf((*MockJobsService)(nil).CancelJob), varargs...)
}

// DeleteArtifacts mocks base method.
func (m *MockJobsService) DeleteArtifacts(pid any, jobID int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, jobID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteArtifacts", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteArtifacts indicates an expected call of DeleteArtifacts.
func (mr *MockJobsServiceMockRecorder) DeleteArtifacts(pid, jobID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, jobID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArtifacts", reflect.TypeOf((*MockJobsService)(nil).DeleteArtifacts), varargs...)
}

// DeleteProjectArtifacts mocks base method.
func (m *MockJobsService) DeleteProjectArtifacts(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProjectArtifacts", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectArtifacts indicates an expected call of DeleteProjectArtifacts.
func (mr *MockJobsServiceMockRecorder) DeleteProjectArtifacts(pid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectArtifacts", reflect.TypeOf((*MockJobsService)(nil).DeleteProjectArtifacts), varargs...)
}

// DownloadArtifactsFile mocks base method.
func (m *MockJobsService) DownloadArtifactsFile(pid any, refName string, opt *gitlab.DownloadArtifactsFileOptions, options ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, refName, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadArtifactsFile", varargs...)
	ret0, _ := ret[0].(*bytes.Reader)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadArtifactsFile indicates an expected call of DownloadArtifactsFile.
func (mr *MockJobsServiceMockRecorder) DownloadArtifactsFile(pid, refName, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, refName, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadArtifactsFile", reflect.TypeOf((*MockJobsService)(nil).DownloadArtifactsFile), varargs...)
}

// DownloadSingleArtifactsFile mocks base method.
func (m *MockJobsService) DownloadSingleArtifactsFile(pid any, jobID int, artifactPath string, options ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, jobID, artifactPath}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadSingleArtifactsFile", varargs...)
	ret0, _ := ret[0].(*bytes.Reader)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadSingleArtifactsFile indicates an expected call of DownloadSingleArtifactsFile.
func (mr *MockJobsServiceMockRecorder) DownloadSingleArtifactsFile(pid, jobID, artifactPath any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, jobID, artifactPath}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadSingleArtifactsFile", reflect.TypeOf((*MockJobsService)(nil).DownloadSingleArtifactsFile), varargs...)
}

// DownloadSingleArtifactsFileByTagOrBranch mocks base method.
func (m *MockJobsService) DownloadSingleArtifactsFileByTagOrBranch(pid any, refName, artifactPath string, opt *gitlab.DownloadArtifactsFileOptions, options ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, refName, artifactPath, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadSingleArtifactsFileByTagOrBranch", varargs...)
	ret0, _ := ret[0].(*bytes.Reader)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadSingleArtifactsFileByTagOrBranch indicates an expected call of DownloadSingleArtifactsFileByTagOrBranch.
func (mr *MockJobsServiceMockRecorder) DownloadSingleArtifactsFileByTagOrBranch(pid, refName, artifactPath, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, refName, artifactPath, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadSingleArtifactsFileByTagOrBranch", reflect.TypeOf((*MockJobsService)(nil).DownloadSingleArtifactsFileByTagOrBranch), varargs...)
}

// EraseJob mocks base method.
func (m *MockJobsService) EraseJob(pid any, jobID int, options ...gitlab.RequestOptionFunc) (*gitlab.Job, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, jobID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EraseJob", varargs...)
	ret0, _ := ret[0].(*gitlab.Job)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EraseJob indicates an expected call of EraseJob.
func (mr *MockJobsServiceMockRecorder) EraseJob(pid, jobID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, jobID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EraseJob", reflect.TypeOf((*MockJobsService)(nil).EraseJob), varargs...)
}

// GetJob mocks base method.
func (m *MockJobsService) GetJob(pid any, jobID int, options ...gitlab.RequestOptionFunc) (*gitlab.Job, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, jobID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJob", varargs...)
	ret0, _ := ret[0].(*gitlab.Job)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetJob indicates an expected call of GetJob.
func (mr *MockJobsServiceMockRecorder) GetJob(pid, jobID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, jobID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockJobsService)(nil).GetJob), varargs...)
}

// GetJobArtifacts mocks base method.
func (m *MockJobsService) GetJobArtifacts(pid any, jobID int, options ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, jobID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJobArtifacts", varargs...)
	ret0, _ := ret[0].(*bytes.Reader)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetJobArtifacts indicates an expected call of GetJobArtifacts.
func (mr *MockJobsServiceMockRecorder) GetJobArtifacts(pid, jobID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, jobID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobArtifacts", reflect.TypeOf((*MockJobsService)(nil).GetJobArtifacts), varargs...)
}

// GetJobTokensJob mocks base method.
func (m *MockJobsService) GetJobTokensJob(opts *gitlab.GetJobTokensJobOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Job, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opts}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJobTokensJob", varargs...)
	ret0, _ := ret[0].(*gitlab.Job)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetJobTokensJob indicates an expected call of GetJobTokensJob.
func (mr *MockJobsServiceMockRecorder) GetJobTokensJob(opts any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opts}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobTokensJob", reflect.TypeOf((*MockJobsService)(nil).GetJobTokensJob), varargs...)
}

// GetTraceFile mocks base method.
func (m *MockJobsService) GetTraceFile(pid any, jobID int, options ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, jobID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTraceFile", varargs...)
	ret0, _ := ret[0].(*bytes.Reader)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTraceFile indicates an expected call of GetTraceFile.
func (mr *MockJobsServiceMockRecorder) GetTraceFile(pid, jobID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, jobID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceFile", reflect.TypeOf((*MockJobsService)(nil).GetTraceFile), varargs...)
}

// KeepArtifacts mocks base method.
func (m *MockJobsService) KeepArtifacts(pid any, jobID int, options ...gitlab.RequestOptionFunc) (*gitlab.Job, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, jobID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "KeepArtifacts", varargs...)
	ret0, _ := ret[0].(*gitlab.Job)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// KeepArtifacts indicates an expected call of KeepArtifacts.
func (mr *MockJobsServiceMockRecorder) KeepArtifacts(pid, jobID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, jobID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeepArtifacts", reflect.TypeOf((*MockJobsService)(nil).KeepArtifacts), varargs...)
}

// ListPipelineBridges mocks base method.
func (m *MockJobsService) ListPipelineBridges(pid any, pipelineID int, opts *gitlab.ListJobsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Bridge, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, pipelineID, opts}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPipelineBridges", varargs...)
	ret0, _ := ret[0].([]*gitlab.Bridge)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPipelineBridges indicates an expected call of ListPipelineBridges.
func (mr *MockJobsServiceMockRecorder) ListPipelineBridges(pid, pipelineID, opts any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, pipelineID, opts}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelineBridges", reflect.TypeOf((*MockJobsService)(nil).ListPipelineBridges), varargs...)
}

// ListPipelineJobs mocks base method.
func (m *MockJobsService) ListPipelineJobs(pid any, pipelineID int, opts *gitlab.ListJobsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Job, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, pipelineID, opts}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPipelineJobs", varargs...)
	ret0, _ := ret[0].([]*gitlab.Job)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPipelineJobs indicates an expected call of ListPipelineJobs.
func (mr *MockJobsServiceMockRecorder) ListPipelineJobs(pid, pipelineID, opts any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, pipelineID, opts}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelineJobs", reflect.TypeOf((*MockJobsService)(nil).ListPipelineJobs), varargs...)
}

// ListProjectJobs mocks base method.
func (m *MockJobsService) ListProjectJobs(pid any, opts *gitlab.ListJobsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Job, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opts}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectJobs", varargs...)
	ret0, _ := ret[0].([]*gitlab.Job)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectJobs indicates an expected call of ListProjectJobs.
func (mr *MockJobsServiceMockRecorder) ListProjectJobs(pid, opts any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opts}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectJobs", reflect.TypeOf((*MockJobsService)(nil).ListProjectJobs), varargs...)
}

// PlayJob mocks base method.
func (m *MockJobsService) PlayJob(pid any, jobID int, opt *gitlab.PlayJobOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Job, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, jobID, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PlayJob", varargs...)
	ret0, _ := ret[0].(*gitlab.Job)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PlayJob indicates an expected call of PlayJob.
func (mr *MockJobsServiceMockRecorder) PlayJob(pid, jobID, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, jobID, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlayJob", reflect.TypeOf((*MockJobsService)(nil).PlayJob), varargs...)
}

// RetryJob mocks base method.
func (m *MockJobsService) RetryJob(pid any, jobID int, options ...gitlab.RequestOptionFunc) (*gitlab.Job, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, jobID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetryJob", varargs...)
	ret0, _ := ret[0].(*gitlab.Job)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RetryJob indicates an expected call of RetryJob.
func (mr *MockJobsServiceMockRecorder) RetryJob(pid, jobID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, jobID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryJob", reflect.TypeOf((*MockJobsService)(nil).RetryJob), varargs...)
}
