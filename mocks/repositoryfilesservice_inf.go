// Code generated by MockGen. DO NOT EDIT.
// Source: repositoryfilesservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=repositoryfilesservice_inf.go -destination=mocks/repositoryfilesservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryFilesService is a mock of RepositoryFilesService interface.
type MockRepositoryFilesService struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryFilesServiceMockRecorder
}

// MockRepositoryFilesServiceMockRecorder is the mock recorder for MockRepositoryFilesService.
type MockRepositoryFilesServiceMockRecorder struct {
	mock *MockRepositoryFilesService
}

// NewMockRepositoryFilesService creates a new mock instance.
func NewMockRepositoryFilesService(ctrl *gomock.Controller) *MockRepositoryFilesService {
	mock := &MockRepositoryFilesService{ctrl: ctrl}
	mock.recorder = &MockRepositoryFilesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryFilesService) EXPECT() *MockRepositoryFilesServiceMockRecorder {
	return m.recorder
}

// CreateFile mocks base method.
func (m *MockRepositoryFilesService) CreateFile(pid any, fileName string, opt *gitlab.CreateFileOptions, options ...gitlab.RequestOptionFunc) (*gitlab.FileInfo, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, fileName, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFile", varargs...)
	ret0, _ := ret[0].(*gitlab.FileInfo)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockRepositoryFilesServiceMockRecorder) CreateFile(pid, fileName, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, fileName, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockRepositoryFilesService)(nil).CreateFile), varargs...)
}

// DeleteFile mocks base method.
func (m *MockRepositoryFilesService) DeleteFile(pid any, fileName string, opt *gitlab.DeleteFileOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, fileName, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFile", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockRepositoryFilesServiceMockRecorder) DeleteFile(pid, fileName, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, fileName, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockRepositoryFilesService)(nil).DeleteFile), varargs...)
}

// GetFile mocks base method.
func (m *MockRepositoryFilesService) GetFile(pid any, fileName string, opt *gitlab.GetFileOptions, options ...gitlab.RequestOptionFunc) (*gitlab.File, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, fileName, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFile", varargs...)
	ret0, _ := ret[0].(*gitlab.File)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFile indicates an expected call of GetFile.
func (mr *MockRepositoryFilesServiceMockRecorder) GetFile(pid, fileName, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, fileName, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockRepositoryFilesService)(nil).GetFile), varargs...)
}

// GetFileBlame mocks base method.
func (m *MockRepositoryFilesService) GetFileBlame(pid any, file string, opt *gitlab.GetFileBlameOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.FileBlameRange, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, file, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFileBlame", varargs...)
	ret0, _ := ret[0].([]*gitlab.FileBlameRange)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFileBlame indicates an expected call of GetFileBlame.
func (mr *MockRepositoryFilesServiceMockRecorder) GetFileBlame(pid, file, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, file, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileBlame", reflect.TypeOf((*MockRepositoryFilesService)(nil).GetFileBlame), varargs...)
}

// GetFileMetaData mocks base method.
func (m *MockRepositoryFilesService) GetFileMetaData(pid any, fileName string, opt *gitlab.GetFileMetaDataOptions, options ...gitlab.RequestOptionFunc) (*gitlab.File, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, fileName, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFileMetaData", varargs...)
	ret0, _ := ret[0].(*gitlab.File)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFileMetaData indicates an expected call of GetFileMetaData.
func (mr *MockRepositoryFilesServiceMockRecorder) GetFileMetaData(pid, fileName, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, fileName, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileMetaData", reflect.TypeOf((*MockRepositoryFilesService)(nil).GetFileMetaData), varargs...)
}

// GetRawFile mocks base method.
func (m *MockRepositoryFilesService) GetRawFile(pid any, fileName string, opt *gitlab.GetRawFileOptions, options ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, fileName, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRawFile", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRawFile indicates an expected call of GetRawFile.
func (mr *MockRepositoryFilesServiceMockRecorder) GetRawFile(pid, fileName, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, fileName, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawFile", reflect.TypeOf((*MockRepositoryFilesService)(nil).GetRawFile), varargs...)
}

// UpdateFile mocks base method.
func (m *MockRepositoryFilesService) UpdateFile(pid any, fileName string, opt *gitlab.UpdateFileOptions, options ...gitlab.RequestOptionFunc) (*gitlab.FileInfo, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, fileName, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFile", varargs...)
	ret0, _ := ret[0].(*gitlab.FileInfo)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateFile indicates an expected call of UpdateFile.
func (mr *MockRepositoryFilesServiceMockRecorder) UpdateFile(pid, fileName, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, fileName, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFile", reflect.TypeOf((*MockRepositoryFilesService)(nil).UpdateFile), varargs...)
}
