// Code generated by MockGen. DO NOT EDIT.
// Source: instancevariablesservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=instancevariablesservice_inf.go -destination=mocks/instancevariablesservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockInstanceVariablesService is a mock of InstanceVariablesService interface.
type MockInstanceVariablesService struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceVariablesServiceMockRecorder
	isgomock struct{}
}

// MockInstanceVariablesServiceMockRecorder is the mock recorder for MockInstanceVariablesService.
type MockInstanceVariablesServiceMockRecorder struct {
	mock *MockInstanceVariablesService
}

// NewMockInstanceVariablesService creates a new mock instance.
func NewMockInstanceVariablesService(ctrl *gomock.Controller) *MockInstanceVariablesService {
	mock := &MockInstanceVariablesService{ctrl: ctrl}
	mock.recorder = &MockInstanceVariablesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceVariablesService) EXPECT() *MockInstanceVariablesServiceMockRecorder {
	return m.recorder
}

// CreateVariable mocks base method.
func (m *MockInstanceVariablesService) CreateVariable(opt *gitlab.CreateInstanceVariableOptions, options ...gitlab.RequestOptionFunc) (*gitlab.InstanceVariable, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVariable", varargs...)
	ret0, _ := ret[0].(*gitlab.InstanceVariable)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateVariable indicates an expected call of CreateVariable.
func (mr *MockInstanceVariablesServiceMockRecorder) CreateVariable(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVariable", reflect.TypeOf((*MockInstanceVariablesService)(nil).CreateVariable), varargs...)
}

// GetVariable mocks base method.
func (m *MockInstanceVariablesService) GetVariable(key string, options ...gitlab.RequestOptionFunc) (*gitlab.InstanceVariable, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVariable", varargs...)
	ret0, _ := ret[0].(*gitlab.InstanceVariable)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVariable indicates an expected call of GetVariable.
func (mr *MockInstanceVariablesServiceMockRecorder) GetVariable(key any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVariable", reflect.TypeOf((*MockInstanceVariablesService)(nil).GetVariable), varargs...)
}

// ListVariables mocks base method.
func (m *MockInstanceVariablesService) ListVariables(opt *gitlab.ListInstanceVariablesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.InstanceVariable, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVariables", varargs...)
	ret0, _ := ret[0].([]*gitlab.InstanceVariable)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListVariables indicates an expected call of ListVariables.
func (mr *MockInstanceVariablesServiceMockRecorder) ListVariables(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVariables", reflect.TypeOf((*MockInstanceVariablesService)(nil).ListVariables), varargs...)
}

// RemoveVariable mocks base method.
func (m *MockInstanceVariablesService) RemoveVariable(key string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveVariable", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveVariable indicates an expected call of RemoveVariable.
func (mr *MockInstanceVariablesServiceMockRecorder) RemoveVariable(key any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVariable", reflect.TypeOf((*MockInstanceVariablesService)(nil).RemoveVariable), varargs...)
}

// UpdateVariable mocks base method.
func (m *MockInstanceVariablesService) UpdateVariable(key string, opt *gitlab.UpdateInstanceVariableOptions, options ...gitlab.RequestOptionFunc) (*gitlab.InstanceVariable, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{key, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVariable", varargs...)
	ret0, _ := ret[0].(*gitlab.InstanceVariable)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateVariable indicates an expected call of UpdateVariable.
func (mr *MockInstanceVariablesServiceMockRecorder) UpdateVariable(key, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVariable", reflect.TypeOf((*MockInstanceVariablesService)(nil).UpdateVariable), varargs...)
}
