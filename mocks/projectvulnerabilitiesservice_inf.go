// Code generated by MockGen. DO NOT EDIT.
// Source: projectvulnerabilitiesservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=projectvulnerabilitiesservice_inf.go -destination=mocks/projectvulnerabilitiesservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectVulnerabilitiesService is a mock of ProjectVulnerabilitiesService interface.
type MockProjectVulnerabilitiesService struct {
	ctrl     *gomock.Controller
	recorder *MockProjectVulnerabilitiesServiceMockRecorder
	isgomock struct{}
}

// MockProjectVulnerabilitiesServiceMockRecorder is the mock recorder for MockProjectVulnerabilitiesService.
type MockProjectVulnerabilitiesServiceMockRecorder struct {
	mock *MockProjectVulnerabilitiesService
}

// NewMockProjectVulnerabilitiesService creates a new mock instance.
func NewMockProjectVulnerabilitiesService(ctrl *gomock.Controller) *MockProjectVulnerabilitiesService {
	mock := &MockProjectVulnerabilitiesService{ctrl: ctrl}
	mock.recorder = &MockProjectVulnerabilitiesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectVulnerabilitiesService) EXPECT() *MockProjectVulnerabilitiesServiceMockRecorder {
	return m.recorder
}

// CreateVulnerability mocks base method.
func (m *MockProjectVulnerabilitiesService) CreateVulnerability(pid any, opt *gitlab.CreateVulnerabilityOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectVulnerability, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVulnerability", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectVulnerability)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateVulnerability indicates an expected call of CreateVulnerability.
func (mr *MockProjectVulnerabilitiesServiceMockRecorder) CreateVulnerability(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVulnerability", reflect.TypeOf((*MockProjectVulnerabilitiesService)(nil).CreateVulnerability), varargs...)
}

// ListProjectVulnerabilities mocks base method.
func (m *MockProjectVulnerabilitiesService) ListProjectVulnerabilities(pid any, opt *gitlab.ListProjectVulnerabilitiesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectVulnerability, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectVulnerabilities", varargs...)
	ret0, _ := ret[0].([]*gitlab.ProjectVulnerability)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectVulnerabilities indicates an expected call of ListProjectVulnerabilities.
func (mr *MockProjectVulnerabilitiesServiceMockRecorder) ListProjectVulnerabilities(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectVulnerabilities", reflect.TypeOf((*MockProjectVulnerabilitiesService)(nil).ListProjectVulnerabilities), varargs...)
}
