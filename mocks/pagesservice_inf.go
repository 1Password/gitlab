// Code generated by MockGen. DO NOT EDIT.
// Source: pagesservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=pagesservice_inf.go -destination=mocks/pagesservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockPagesService is a mock of PagesService interface.
type MockPagesService struct {
	ctrl     *gomock.Controller
	recorder *MockPagesServiceMockRecorder
	isgomock struct{}
}

// MockPagesServiceMockRecorder is the mock recorder for MockPagesService.
type MockPagesServiceMockRecorder struct {
	mock *MockPagesService
}

// NewMockPagesService creates a new mock instance.
func NewMockPagesService(ctrl *gomock.Controller) *MockPagesService {
	mock := &MockPagesService{ctrl: ctrl}
	mock.recorder = &MockPagesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPagesService) EXPECT() *MockPagesServiceMockRecorder {
	return m.recorder
}

// GetPages mocks base method.
func (m *MockPagesService) GetPages(gid any, options ...gitlab.RequestOptionFunc) (*gitlab.Pages, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPages", varargs...)
	ret0, _ := ret[0].(*gitlab.Pages)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPages indicates an expected call of GetPages.
func (mr *MockPagesServiceMockRecorder) GetPages(gid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPages", reflect.TypeOf((*MockPagesService)(nil).GetPages), varargs...)
}

// UnpublishPages mocks base method.
func (m *MockPagesService) UnpublishPages(gid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnpublishPages", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnpublishPages indicates an expected call of UnpublishPages.
func (mr *MockPagesServiceMockRecorder) UnpublishPages(gid any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpublishPages", reflect.TypeOf((*MockPagesService)(nil).UnpublishPages), varargs...)
}
