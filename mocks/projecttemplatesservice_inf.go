// Code generated by MockGen. DO NOT EDIT.
// Source: projecttemplatesservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=projecttemplatesservice_inf.go -destination=mocks/projecttemplatesservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectTemplatesService is a mock of ProjectTemplatesService interface.
type MockProjectTemplatesService struct {
	ctrl     *gomock.Controller
	recorder *MockProjectTemplatesServiceMockRecorder
	isgomock struct{}
}

// MockProjectTemplatesServiceMockRecorder is the mock recorder for MockProjectTemplatesService.
type MockProjectTemplatesServiceMockRecorder struct {
	mock *MockProjectTemplatesService
}

// NewMockProjectTemplatesService creates a new mock instance.
func NewMockProjectTemplatesService(ctrl *gomock.Controller) *MockProjectTemplatesService {
	mock := &MockProjectTemplatesService{ctrl: ctrl}
	mock.recorder = &MockProjectTemplatesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectTemplatesService) EXPECT() *MockProjectTemplatesServiceMockRecorder {
	return m.recorder
}

// GetProjectTemplate mocks base method.
func (m *MockProjectTemplatesService) GetProjectTemplate(pid any, templateType, templateName string, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectTemplate, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, templateType, templateName}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectTemplate", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectTemplate)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProjectTemplate indicates an expected call of GetProjectTemplate.
func (mr *MockProjectTemplatesServiceMockRecorder) GetProjectTemplate(pid, templateType, templateName any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, templateType, templateName}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectTemplate", reflect.TypeOf((*MockProjectTemplatesService)(nil).GetProjectTemplate), varargs...)
}

// ListTemplates mocks base method.
func (m *MockProjectTemplatesService) ListTemplates(pid any, templateType string, opt *gitlab.ListProjectTemplatesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectTemplate, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, templateType, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTemplates", varargs...)
	ret0, _ := ret[0].([]*gitlab.ProjectTemplate)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTemplates indicates an expected call of ListTemplates.
func (mr *MockProjectTemplatesServiceMockRecorder) ListTemplates(pid, templateType, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, templateType, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplates", reflect.TypeOf((*MockProjectTemplatesService)(nil).ListTemplates), varargs...)
}
