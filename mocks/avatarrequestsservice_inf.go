// Code generated by MockGen. DO NOT EDIT.
// Source: avatarrequestsservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=avatarrequestsservice_inf.go -destination=mocks/avatarrequestsservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockAvatarRequestsService is a mock of AvatarRequestsService interface.
type MockAvatarRequestsService struct {
	ctrl     *gomock.Controller
	recorder *MockAvatarRequestsServiceMockRecorder
	isgomock struct{}
}

// MockAvatarRequestsServiceMockRecorder is the mock recorder for MockAvatarRequestsService.
type MockAvatarRequestsServiceMockRecorder struct {
	mock *MockAvatarRequestsService
}

// NewMockAvatarRequestsService creates a new mock instance.
func NewMockAvatarRequestsService(ctrl *gomock.Controller) *MockAvatarRequestsService {
	mock := &MockAvatarRequestsService{ctrl: ctrl}
	mock.recorder = &MockAvatarRequestsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvatarRequestsService) EXPECT() *MockAvatarRequestsServiceMockRecorder {
	return m.recorder
}

// GetAvatar mocks base method.
func (m *MockAvatarRequestsService) GetAvatar(opt *gitlab.GetAvatarOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Avatar, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAvatar", varargs...)
	ret0, _ := ret[0].(*gitlab.Avatar)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAvatar indicates an expected call of GetAvatar.
func (mr *MockAvatarRequestsServiceMockRecorder) GetAvatar(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatar", reflect.TypeOf((*MockAvatarRequestsService)(nil).GetAvatar), varargs...)
}
