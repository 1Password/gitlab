// Code generated by MockGen. DO NOT EDIT.
// Source: groupreleasesservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=groupreleasesservice_inf.go -destination=mocks/groupreleasesservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupReleasesService is a mock of GroupReleasesService interface.
type MockGroupReleasesService struct {
	ctrl     *gomock.Controller
	recorder *MockGroupReleasesServiceMockRecorder
	isgomock struct{}
}

// MockGroupReleasesServiceMockRecorder is the mock recorder for MockGroupReleasesService.
type MockGroupReleasesServiceMockRecorder struct {
	mock *MockGroupReleasesService
}

// NewMockGroupReleasesService creates a new mock instance.
func NewMockGroupReleasesService(ctrl *gomock.Controller) *MockGroupReleasesService {
	mock := &MockGroupReleasesService{ctrl: ctrl}
	mock.recorder = &MockGroupReleasesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupReleasesService) EXPECT() *MockGroupReleasesServiceMockRecorder {
	return m.recorder
}

// ListGroupReleases mocks base method.
func (m *MockGroupReleasesService) ListGroupReleases(gid any, opts *gitlab.ListGroupReleasesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Release, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opts}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupReleases", varargs...)
	ret0, _ := ret[0].([]*gitlab.Release)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupReleases indicates an expected call of ListGroupReleases.
func (mr *MockGroupReleasesServiceMockRecorder) ListGroupReleases(gid, opts any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opts}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupReleases", reflect.TypeOf((*MockGroupReleasesService)(nil).ListGroupReleases), varargs...)
}
