// Code generated by MockGen. DO NOT EDIT.
// Source: invitesservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=invitesservice_inf.go -destination=mocks/invitesservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockInvitesService is a mock of InvitesService interface.
type MockInvitesService struct {
	ctrl     *gomock.Controller
	recorder *MockInvitesServiceMockRecorder
	isgomock struct{}
}

// MockInvitesServiceMockRecorder is the mock recorder for MockInvitesService.
type MockInvitesServiceMockRecorder struct {
	mock *MockInvitesService
}

// NewMockInvitesService creates a new mock instance.
func NewMockInvitesService(ctrl *gomock.Controller) *MockInvitesService {
	mock := &MockInvitesService{ctrl: ctrl}
	mock.recorder = &MockInvitesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvitesService) EXPECT() *MockInvitesServiceMockRecorder {
	return m.recorder
}

// GroupInvites mocks base method.
func (m *MockInvitesService) GroupInvites(gid any, opt *gitlab.InvitesOptions, options ...gitlab.RequestOptionFunc) (*gitlab.InvitesResult, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GroupInvites", varargs...)
	ret0, _ := ret[0].(*gitlab.InvitesResult)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GroupInvites indicates an expected call of GroupInvites.
func (mr *MockInvitesServiceMockRecorder) GroupInvites(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupInvites", reflect.TypeOf((*MockInvitesService)(nil).GroupInvites), varargs...)
}

// ListPendingGroupInvitations mocks base method.
func (m *MockInvitesService) ListPendingGroupInvitations(gid any, opt *gitlab.ListPendingInvitationsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.PendingInvite, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPendingGroupInvitations", varargs...)
	ret0, _ := ret[0].([]*gitlab.PendingInvite)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPendingGroupInvitations indicates an expected call of ListPendingGroupInvitations.
func (mr *MockInvitesServiceMockRecorder) ListPendingGroupInvitations(gid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPendingGroupInvitations", reflect.TypeOf((*MockInvitesService)(nil).ListPendingGroupInvitations), varargs...)
}

// ListPendingProjectInvitations mocks base method.
func (m *MockInvitesService) ListPendingProjectInvitations(pid any, opt *gitlab.ListPendingInvitationsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.PendingInvite, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPendingProjectInvitations", varargs...)
	ret0, _ := ret[0].([]*gitlab.PendingInvite)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPendingProjectInvitations indicates an expected call of ListPendingProjectInvitations.
func (mr *MockInvitesServiceMockRecorder) ListPendingProjectInvitations(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPendingProjectInvitations", reflect.TypeOf((*MockInvitesService)(nil).ListPendingProjectInvitations), varargs...)
}

// ProjectInvites mocks base method.
func (m *MockInvitesService) ProjectInvites(pid any, opt *gitlab.InvitesOptions, options ...gitlab.RequestOptionFunc) (*gitlab.InvitesResult, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProjectInvites", varargs...)
	ret0, _ := ret[0].(*gitlab.InvitesResult)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProjectInvites indicates an expected call of ProjectInvites.
func (mr *MockInvitesServiceMockRecorder) ProjectInvites(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectInvites", reflect.TypeOf((*MockInvitesService)(nil).ProjectInvites), varargs...)
}
