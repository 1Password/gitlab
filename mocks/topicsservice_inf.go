// Code generated by MockGen. DO NOT EDIT.
// Source: topicsservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=topicsservice_inf.go -destination=mocks/topicsservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockTopicsService is a mock of TopicsService interface.
type MockTopicsService struct {
	ctrl     *gomock.Controller
	recorder *MockTopicsServiceMockRecorder
}

// MockTopicsServiceMockRecorder is the mock recorder for MockTopicsService.
type MockTopicsServiceMockRecorder struct {
	mock *MockTopicsService
}

// NewMockTopicsService creates a new mock instance.
func NewMockTopicsService(ctrl *gomock.Controller) *MockTopicsService {
	mock := &MockTopicsService{ctrl: ctrl}
	mock.recorder = &MockTopicsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopicsService) EXPECT() *MockTopicsServiceMockRecorder {
	return m.recorder
}

// CreateTopic mocks base method.
func (m *MockTopicsService) CreateTopic(opt *gitlab.CreateTopicOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Topic, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTopic", varargs...)
	ret0, _ := ret[0].(*gitlab.Topic)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTopic indicates an expected call of CreateTopic.
func (mr *MockTopicsServiceMockRecorder) CreateTopic(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopic", reflect.TypeOf((*MockTopicsService)(nil).CreateTopic), varargs...)
}

// DeleteTopic mocks base method.
func (m *MockTopicsService) DeleteTopic(topic int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{topic}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTopic", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTopic indicates an expected call of DeleteTopic.
func (mr *MockTopicsServiceMockRecorder) DeleteTopic(topic any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{topic}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopic", reflect.TypeOf((*MockTopicsService)(nil).DeleteTopic), varargs...)
}

// GetTopic mocks base method.
func (m *MockTopicsService) GetTopic(topic int, options ...gitlab.RequestOptionFunc) (*gitlab.Topic, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{topic}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTopic", varargs...)
	ret0, _ := ret[0].(*gitlab.Topic)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTopic indicates an expected call of GetTopic.
func (mr *MockTopicsServiceMockRecorder) GetTopic(topic any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{topic}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopic", reflect.TypeOf((*MockTopicsService)(nil).GetTopic), varargs...)
}

// ListTopics mocks base method.
func (m *MockTopicsService) ListTopics(opt *gitlab.ListTopicsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Topic, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTopics", varargs...)
	ret0, _ := ret[0].([]*gitlab.Topic)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTopics indicates an expected call of ListTopics.
func (mr *MockTopicsServiceMockRecorder) ListTopics(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopics", reflect.TypeOf((*MockTopicsService)(nil).ListTopics), varargs...)
}

// UpdateTopic mocks base method.
func (m *MockTopicsService) UpdateTopic(topic int, opt *gitlab.UpdateTopicOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Topic, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{topic, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTopic", varargs...)
	ret0, _ := ret[0].(*gitlab.Topic)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateTopic indicates an expected call of UpdateTopic.
func (mr *MockTopicsServiceMockRecorder) UpdateTopic(topic, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{topic, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTopic", reflect.TypeOf((*MockTopicsService)(nil).UpdateTopic), varargs...)
}
