// Code generated by MockGen. DO NOT EDIT.
// Source: awardemojiservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=awardemojiservice_inf.go -destination=mocks/awardemojiservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockAwardEmojiService is a mock of AwardEmojiService interface.
type MockAwardEmojiService struct {
	ctrl     *gomock.Controller
	recorder *MockAwardEmojiServiceMockRecorder
	isgomock struct{}
}

// MockAwardEmojiServiceMockRecorder is the mock recorder for MockAwardEmojiService.
type MockAwardEmojiServiceMockRecorder struct {
	mock *MockAwardEmojiService
}

// NewMockAwardEmojiService creates a new mock instance.
func NewMockAwardEmojiService(ctrl *gomock.Controller) *MockAwardEmojiService {
	mock := &MockAwardEmojiService{ctrl: ctrl}
	mock.recorder = &MockAwardEmojiServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAwardEmojiService) EXPECT() *MockAwardEmojiServiceMockRecorder {
	return m.recorder
}

// CreateIssueAwardEmoji mocks base method.
func (m *MockAwardEmojiService) CreateIssueAwardEmoji(pid any, issueIID int, opt *gitlab.CreateAwardEmojiOptions, options ...gitlab.RequestOptionFunc) (*gitlab.AwardEmoji, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, issueIID, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIssueAwardEmoji", varargs...)
	ret0, _ := ret[0].(*gitlab.AwardEmoji)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateIssueAwardEmoji indicates an expected call of CreateIssueAwardEmoji.
func (mr *MockAwardEmojiServiceMockRecorder) CreateIssueAwardEmoji(pid, issueIID, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, issueIID, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssueAwardEmoji", reflect.TypeOf((*MockAwardEmojiService)(nil).CreateIssueAwardEmoji), varargs...)
}

// CreateIssuesAwardEmojiOnNote mocks base method.
func (m *MockAwardEmojiService) CreateIssuesAwardEmojiOnNote(pid any, issueID, noteID int, opt *gitlab.CreateAwardEmojiOptions, options ...gitlab.RequestOptionFunc) (*gitlab.AwardEmoji, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, issueID, noteID, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIssuesAwardEmojiOnNote", varargs...)
	ret0, _ := ret[0].(*gitlab.AwardEmoji)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateIssuesAwardEmojiOnNote indicates an expected call of CreateIssuesAwardEmojiOnNote.
func (mr *MockAwardEmojiServiceMockRecorder) CreateIssuesAwardEmojiOnNote(pid, issueID, noteID, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, issueID, noteID, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssuesAwardEmojiOnNote", reflect.TypeOf((*MockAwardEmojiService)(nil).CreateIssuesAwardEmojiOnNote), varargs...)
}

// CreateMergeRequestAwardEmoji mocks base method.
func (m *MockAwardEmojiService) CreateMergeRequestAwardEmoji(pid any, mergeRequestIID int, opt *gitlab.CreateAwardEmojiOptions, options ...gitlab.RequestOptionFunc) (*gitlab.AwardEmoji, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequestIID, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMergeRequestAwardEmoji", varargs...)
	ret0, _ := ret[0].(*gitlab.AwardEmoji)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateMergeRequestAwardEmoji indicates an expected call of CreateMergeRequestAwardEmoji.
func (mr *MockAwardEmojiServiceMockRecorder) CreateMergeRequestAwardEmoji(pid, mergeRequestIID, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequestIID, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMergeRequestAwardEmoji", reflect.TypeOf((*MockAwardEmojiService)(nil).CreateMergeRequestAwardEmoji), varargs...)
}

// CreateMergeRequestAwardEmojiOnNote mocks base method.
func (m *MockAwardEmojiService) CreateMergeRequestAwardEmojiOnNote(pid any, mergeRequestIID, noteID int, opt *gitlab.CreateAwardEmojiOptions, options ...gitlab.RequestOptionFunc) (*gitlab.AwardEmoji, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequestIID, noteID, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMergeRequestAwardEmojiOnNote", varargs...)
	ret0, _ := ret[0].(*gitlab.AwardEmoji)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateMergeRequestAwardEmojiOnNote indicates an expected call of CreateMergeRequestAwardEmojiOnNote.
func (mr *MockAwardEmojiServiceMockRecorder) CreateMergeRequestAwardEmojiOnNote(pid, mergeRequestIID, noteID, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequestIID, noteID, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMergeRequestAwardEmojiOnNote", reflect.TypeOf((*MockAwardEmojiService)(nil).CreateMergeRequestAwardEmojiOnNote), varargs...)
}

// CreateSnippetAwardEmoji mocks base method.
func (m *MockAwardEmojiService) CreateSnippetAwardEmoji(pid any, snippetID int, opt *gitlab.CreateAwardEmojiOptions, options ...gitlab.RequestOptionFunc) (*gitlab.AwardEmoji, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, snippetID, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSnippetAwardEmoji", varargs...)
	ret0, _ := ret[0].(*gitlab.AwardEmoji)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSnippetAwardEmoji indicates an expected call of CreateSnippetAwardEmoji.
func (mr *MockAwardEmojiServiceMockRecorder) CreateSnippetAwardEmoji(pid, snippetID, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, snippetID, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnippetAwardEmoji", reflect.TypeOf((*MockAwardEmojiService)(nil).CreateSnippetAwardEmoji), varargs...)
}

// CreateSnippetAwardEmojiOnNote mocks base method.
func (m *MockAwardEmojiService) CreateSnippetAwardEmojiOnNote(pid any, snippetIID, noteID int, opt *gitlab.CreateAwardEmojiOptions, options ...gitlab.RequestOptionFunc) (*gitlab.AwardEmoji, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, snippetIID, noteID, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSnippetAwardEmojiOnNote", varargs...)
	ret0, _ := ret[0].(*gitlab.AwardEmoji)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSnippetAwardEmojiOnNote indicates an expected call of CreateSnippetAwardEmojiOnNote.
func (mr *MockAwardEmojiServiceMockRecorder) CreateSnippetAwardEmojiOnNote(pid, snippetIID, noteID, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, snippetIID, noteID, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnippetAwardEmojiOnNote", reflect.TypeOf((*MockAwardEmojiService)(nil).CreateSnippetAwardEmojiOnNote), varargs...)
}

// DeleteIssueAwardEmoji mocks base method.
func (m *MockAwardEmojiService) DeleteIssueAwardEmoji(pid any, issueIID, awardID int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, issueIID, awardID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIssueAwardEmoji", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIssueAwardEmoji indicates an expected call of DeleteIssueAwardEmoji.
func (mr *MockAwardEmojiServiceMockRecorder) DeleteIssueAwardEmoji(pid, issueIID, awardID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, issueIID, awardID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIssueAwardEmoji", reflect.TypeOf((*MockAwardEmojiService)(nil).DeleteIssueAwardEmoji), varargs...)
}

// DeleteIssuesAwardEmojiOnNote mocks base method.
func (m *MockAwardEmojiService) DeleteIssuesAwardEmojiOnNote(pid any, issueID, noteID, awardID int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, issueID, noteID, awardID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIssuesAwardEmojiOnNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIssuesAwardEmojiOnNote indicates an expected call of DeleteIssuesAwardEmojiOnNote.
func (mr *MockAwardEmojiServiceMockRecorder) DeleteIssuesAwardEmojiOnNote(pid, issueID, noteID, awardID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, issueID, noteID, awardID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIssuesAwardEmojiOnNote", reflect.TypeOf((*MockAwardEmojiService)(nil).DeleteIssuesAwardEmojiOnNote), varargs...)
}

// DeleteMergeRequestAwardEmoji mocks base method.
func (m *MockAwardEmojiService) DeleteMergeRequestAwardEmoji(pid any, mergeRequestIID, awardID int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequestIID, awardID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMergeRequestAwardEmoji", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMergeRequestAwardEmoji indicates an expected call of DeleteMergeRequestAwardEmoji.
func (mr *MockAwardEmojiServiceMockRecorder) DeleteMergeRequestAwardEmoji(pid, mergeRequestIID, awardID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequestIID, awardID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMergeRequestAwardEmoji", reflect.TypeOf((*MockAwardEmojiService)(nil).DeleteMergeRequestAwardEmoji), varargs...)
}

// DeleteMergeRequestAwardEmojiOnNote mocks base method.
func (m *MockAwardEmojiService) DeleteMergeRequestAwardEmojiOnNote(pid any, mergeRequestIID, noteID, awardID int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequestIID, noteID, awardID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMergeRequestAwardEmojiOnNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMergeRequestAwardEmojiOnNote indicates an expected call of DeleteMergeRequestAwardEmojiOnNote.
func (mr *MockAwardEmojiServiceMockRecorder) DeleteMergeRequestAwardEmojiOnNote(pid, mergeRequestIID, noteID, awardID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequestIID, noteID, awardID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMergeRequestAwardEmojiOnNote", reflect.TypeOf((*MockAwardEmojiService)(nil).DeleteMergeRequestAwardEmojiOnNote), varargs...)
}

// DeleteSnippetAwardEmoji mocks base method.
func (m *MockAwardEmojiService) DeleteSnippetAwardEmoji(pid any, snippetID, awardID int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, snippetID, awardID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSnippetAwardEmoji", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSnippetAwardEmoji indicates an expected call of DeleteSnippetAwardEmoji.
func (mr *MockAwardEmojiServiceMockRecorder) DeleteSnippetAwardEmoji(pid, snippetID, awardID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, snippetID, awardID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnippetAwardEmoji", reflect.TypeOf((*MockAwardEmojiService)(nil).DeleteSnippetAwardEmoji), varargs...)
}

// DeleteSnippetAwardEmojiOnNote mocks base method.
func (m *MockAwardEmojiService) DeleteSnippetAwardEmojiOnNote(pid any, snippetIID, noteID, awardID int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, snippetIID, noteID, awardID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSnippetAwardEmojiOnNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSnippetAwardEmojiOnNote indicates an expected call of DeleteSnippetAwardEmojiOnNote.
func (mr *MockAwardEmojiServiceMockRecorder) DeleteSnippetAwardEmojiOnNote(pid, snippetIID, noteID, awardID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, snippetIID, noteID, awardID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnippetAwardEmojiOnNote", reflect.TypeOf((*MockAwardEmojiService)(nil).DeleteSnippetAwardEmojiOnNote), varargs...)
}

// GetIssueAwardEmoji mocks base method.
func (m *MockAwardEmojiService) GetIssueAwardEmoji(pid any, issueIID, awardID int, options ...gitlab.RequestOptionFunc) (*gitlab.AwardEmoji, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, issueIID, awardID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIssueAwardEmoji", varargs...)
	ret0, _ := ret[0].(*gitlab.AwardEmoji)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIssueAwardEmoji indicates an expected call of GetIssueAwardEmoji.
func (mr *MockAwardEmojiServiceMockRecorder) GetIssueAwardEmoji(pid, issueIID, awardID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, issueIID, awardID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueAwardEmoji", reflect.TypeOf((*MockAwardEmojiService)(nil).GetIssueAwardEmoji), varargs...)
}

// GetIssuesAwardEmojiOnNote mocks base method.
func (m *MockAwardEmojiService) GetIssuesAwardEmojiOnNote(pid any, issueID, noteID, awardID int, options ...gitlab.RequestOptionFunc) (*gitlab.AwardEmoji, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, issueID, noteID, awardID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIssuesAwardEmojiOnNote", varargs...)
	ret0, _ := ret[0].(*gitlab.AwardEmoji)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIssuesAwardEmojiOnNote indicates an expected call of GetIssuesAwardEmojiOnNote.
func (mr *MockAwardEmojiServiceMockRecorder) GetIssuesAwardEmojiOnNote(pid, issueID, noteID, awardID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, issueID, noteID, awardID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuesAwardEmojiOnNote", reflect.TypeOf((*MockAwardEmojiService)(nil).GetIssuesAwardEmojiOnNote), varargs...)
}

// GetMergeRequestAwardEmoji mocks base method.
func (m *MockAwardEmojiService) GetMergeRequestAwardEmoji(pid any, mergeRequestIID, awardID int, options ...gitlab.RequestOptionFunc) (*gitlab.AwardEmoji, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequestIID, awardID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMergeRequestAwardEmoji", varargs...)
	ret0, _ := ret[0].(*gitlab.AwardEmoji)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMergeRequestAwardEmoji indicates an expected call of GetMergeRequestAwardEmoji.
func (mr *MockAwardEmojiServiceMockRecorder) GetMergeRequestAwardEmoji(pid, mergeRequestIID, awardID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequestIID, awardID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergeRequestAwardEmoji", reflect.TypeOf((*MockAwardEmojiService)(nil).GetMergeRequestAwardEmoji), varargs...)
}

// GetMergeRequestAwardEmojiOnNote mocks base method.
func (m *MockAwardEmojiService) GetMergeRequestAwardEmojiOnNote(pid any, mergeRequestIID, noteID, awardID int, options ...gitlab.RequestOptionFunc) (*gitlab.AwardEmoji, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequestIID, noteID, awardID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMergeRequestAwardEmojiOnNote", varargs...)
	ret0, _ := ret[0].(*gitlab.AwardEmoji)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMergeRequestAwardEmojiOnNote indicates an expected call of GetMergeRequestAwardEmojiOnNote.
func (mr *MockAwardEmojiServiceMockRecorder) GetMergeRequestAwardEmojiOnNote(pid, mergeRequestIID, noteID, awardID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequestIID, noteID, awardID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergeRequestAwardEmojiOnNote", reflect.TypeOf((*MockAwardEmojiService)(nil).GetMergeRequestAwardEmojiOnNote), varargs...)
}

// GetSnippetAwardEmoji mocks base method.
func (m *MockAwardEmojiService) GetSnippetAwardEmoji(pid any, snippetID, awardID int, options ...gitlab.RequestOptionFunc) (*gitlab.AwardEmoji, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, snippetID, awardID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSnippetAwardEmoji", varargs...)
	ret0, _ := ret[0].(*gitlab.AwardEmoji)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSnippetAwardEmoji indicates an expected call of GetSnippetAwardEmoji.
func (mr *MockAwardEmojiServiceMockRecorder) GetSnippetAwardEmoji(pid, snippetID, awardID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, snippetID, awardID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnippetAwardEmoji", reflect.TypeOf((*MockAwardEmojiService)(nil).GetSnippetAwardEmoji), varargs...)
}

// GetSnippetAwardEmojiOnNote mocks base method.
func (m *MockAwardEmojiService) GetSnippetAwardEmojiOnNote(pid any, snippetIID, noteID, awardID int, options ...gitlab.RequestOptionFunc) (*gitlab.AwardEmoji, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, snippetIID, noteID, awardID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSnippetAwardEmojiOnNote", varargs...)
	ret0, _ := ret[0].(*gitlab.AwardEmoji)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSnippetAwardEmojiOnNote indicates an expected call of GetSnippetAwardEmojiOnNote.
func (mr *MockAwardEmojiServiceMockRecorder) GetSnippetAwardEmojiOnNote(pid, snippetIID, noteID, awardID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, snippetIID, noteID, awardID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnippetAwardEmojiOnNote", reflect.TypeOf((*MockAwardEmojiService)(nil).GetSnippetAwardEmojiOnNote), varargs...)
}

// ListIssueAwardEmoji mocks base method.
func (m *MockAwardEmojiService) ListIssueAwardEmoji(pid any, issueIID int, opt *gitlab.ListAwardEmojiOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.AwardEmoji, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, issueIID, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIssueAwardEmoji", varargs...)
	ret0, _ := ret[0].([]*gitlab.AwardEmoji)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListIssueAwardEmoji indicates an expected call of ListIssueAwardEmoji.
func (mr *MockAwardEmojiServiceMockRecorder) ListIssueAwardEmoji(pid, issueIID, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, issueIID, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssueAwardEmoji", reflect.TypeOf((*MockAwardEmojiService)(nil).ListIssueAwardEmoji), varargs...)
}

// ListIssuesAwardEmojiOnNote mocks base method.
func (m *MockAwardEmojiService) ListIssuesAwardEmojiOnNote(pid any, issueID, noteID int, opt *gitlab.ListAwardEmojiOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.AwardEmoji, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, issueID, noteID, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIssuesAwardEmojiOnNote", varargs...)
	ret0, _ := ret[0].([]*gitlab.AwardEmoji)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListIssuesAwardEmojiOnNote indicates an expected call of ListIssuesAwardEmojiOnNote.
func (mr *MockAwardEmojiServiceMockRecorder) ListIssuesAwardEmojiOnNote(pid, issueID, noteID, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, issueID, noteID, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssuesAwardEmojiOnNote", reflect.TypeOf((*MockAwardEmojiService)(nil).ListIssuesAwardEmojiOnNote), varargs...)
}

// ListMergeRequestAwardEmoji mocks base method.
func (m *MockAwardEmojiService) ListMergeRequestAwardEmoji(pid any, mergeRequestIID int, opt *gitlab.ListAwardEmojiOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.AwardEmoji, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequestIID, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMergeRequestAwardEmoji", varargs...)
	ret0, _ := ret[0].([]*gitlab.AwardEmoji)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMergeRequestAwardEmoji indicates an expected call of ListMergeRequestAwardEmoji.
func (mr *MockAwardEmojiServiceMockRecorder) ListMergeRequestAwardEmoji(pid, mergeRequestIID, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequestIID, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMergeRequestAwardEmoji", reflect.TypeOf((*MockAwardEmojiService)(nil).ListMergeRequestAwardEmoji), varargs...)
}

// ListMergeRequestAwardEmojiOnNote mocks base method.
func (m *MockAwardEmojiService) ListMergeRequestAwardEmojiOnNote(pid any, mergeRequestIID, noteID int, opt *gitlab.ListAwardEmojiOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.AwardEmoji, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequestIID, noteID, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMergeRequestAwardEmojiOnNote", varargs...)
	ret0, _ := ret[0].([]*gitlab.AwardEmoji)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMergeRequestAwardEmojiOnNote indicates an expected call of ListMergeRequestAwardEmojiOnNote.
func (mr *MockAwardEmojiServiceMockRecorder) ListMergeRequestAwardEmojiOnNote(pid, mergeRequestIID, noteID, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequestIID, noteID, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMergeRequestAwardEmojiOnNote", reflect.TypeOf((*MockAwardEmojiService)(nil).ListMergeRequestAwardEmojiOnNote), varargs...)
}

// ListSnippetAwardEmoji mocks base method.
func (m *MockAwardEmojiService) ListSnippetAwardEmoji(pid any, snippetID int, opt *gitlab.ListAwardEmojiOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.AwardEmoji, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, snippetID, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSnippetAwardEmoji", varargs...)
	ret0, _ := ret[0].([]*gitlab.AwardEmoji)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSnippetAwardEmoji indicates an expected call of ListSnippetAwardEmoji.
func (mr *MockAwardEmojiServiceMockRecorder) ListSnippetAwardEmoji(pid, snippetID, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, snippetID, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnippetAwardEmoji", reflect.TypeOf((*MockAwardEmojiService)(nil).ListSnippetAwardEmoji), varargs...)
}

// ListSnippetAwardEmojiOnNote mocks base method.
func (m *MockAwardEmojiService) ListSnippetAwardEmojiOnNote(pid any, snippetIID, noteID int, opt *gitlab.ListAwardEmojiOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.AwardEmoji, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, snippetIID, noteID, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSnippetAwardEmojiOnNote", varargs...)
	ret0, _ := ret[0].([]*gitlab.AwardEmoji)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSnippetAwardEmojiOnNote indicates an expected call of ListSnippetAwardEmojiOnNote.
func (mr *MockAwardEmojiServiceMockRecorder) ListSnippetAwardEmojiOnNote(pid, snippetIID, noteID, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, snippetIID, noteID, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnippetAwardEmojiOnNote", reflect.TypeOf((*MockAwardEmojiService)(nil).ListSnippetAwardEmojiOnNote), varargs...)
}
