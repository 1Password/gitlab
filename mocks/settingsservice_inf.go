// Code generated by MockGen. DO NOT EDIT.
// Source: settingsservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=settingsservice_inf.go -destination=mocks/settingsservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockSettingsService is a mock of SettingsService interface.
type MockSettingsService struct {
	ctrl     *gomock.Controller
	recorder *MockSettingsServiceMockRecorder
}

// MockSettingsServiceMockRecorder is the mock recorder for MockSettingsService.
type MockSettingsServiceMockRecorder struct {
	mock *MockSettingsService
}

// NewMockSettingsService creates a new mock instance.
func NewMockSettingsService(ctrl *gomock.Controller) *MockSettingsService {
	mock := &MockSettingsService{ctrl: ctrl}
	mock.recorder = &MockSettingsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSettingsService) EXPECT() *MockSettingsServiceMockRecorder {
	return m.recorder
}

// GetSettings mocks base method.
func (m *MockSettingsService) GetSettings(options ...gitlab.RequestOptionFunc) (*gitlab.Settings, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSettings", varargs...)
	ret0, _ := ret[0].(*gitlab.Settings)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSettings indicates an expected call of GetSettings.
func (mr *MockSettingsServiceMockRecorder) GetSettings(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettings", reflect.TypeOf((*MockSettingsService)(nil).GetSettings), options...)
}

// UpdateSettings mocks base method.
func (m *MockSettingsService) UpdateSettings(opt *gitlab.UpdateSettingsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Settings, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSettings", varargs...)
	ret0, _ := ret[0].(*gitlab.Settings)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateSettings indicates an expected call of UpdateSettings.
func (mr *MockSettingsServiceMockRecorder) UpdateSettings(opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSettings", reflect.TypeOf((*MockSettingsService)(nil).UpdateSettings), varargs...)
}
