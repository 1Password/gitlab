// Code generated by MockGen. DO NOT EDIT.
// Source: pipelinetriggersservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=pipelinetriggersservice_inf.go -destination=mocks/pipelinetriggersservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockPipelineTriggersService is a mock of PipelineTriggersService interface.
type MockPipelineTriggersService struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineTriggersServiceMockRecorder
}

// MockPipelineTriggersServiceMockRecorder is the mock recorder for MockPipelineTriggersService.
type MockPipelineTriggersServiceMockRecorder struct {
	mock *MockPipelineTriggersService
}

// NewMockPipelineTriggersService creates a new mock instance.
func NewMockPipelineTriggersService(ctrl *gomock.Controller) *MockPipelineTriggersService {
	mock := &MockPipelineTriggersService{ctrl: ctrl}
	mock.recorder = &MockPipelineTriggersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineTriggersService) EXPECT() *MockPipelineTriggersServiceMockRecorder {
	return m.recorder
}

// AddPipelineTrigger mocks base method.
func (m *MockPipelineTriggersService) AddPipelineTrigger(pid any, opt *gitlab.AddPipelineTriggerOptions, options ...gitlab.RequestOptionFunc) (*gitlab.PipelineTrigger, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddPipelineTrigger", varargs...)
	ret0, _ := ret[0].(*gitlab.PipelineTrigger)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddPipelineTrigger indicates an expected call of AddPipelineTrigger.
func (mr *MockPipelineTriggersServiceMockRecorder) AddPipelineTrigger(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPipelineTrigger", reflect.TypeOf((*MockPipelineTriggersService)(nil).AddPipelineTrigger), varargs...)
}

// DeletePipelineTrigger mocks base method.
func (m *MockPipelineTriggersService) DeletePipelineTrigger(pid any, trigger int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, trigger}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePipelineTrigger", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePipelineTrigger indicates an expected call of DeletePipelineTrigger.
func (mr *MockPipelineTriggersServiceMockRecorder) DeletePipelineTrigger(pid, trigger any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, trigger}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipelineTrigger", reflect.TypeOf((*MockPipelineTriggersService)(nil).DeletePipelineTrigger), varargs...)
}

// EditPipelineTrigger mocks base method.
func (m *MockPipelineTriggersService) EditPipelineTrigger(pid any, trigger int, opt *gitlab.EditPipelineTriggerOptions, options ...gitlab.RequestOptionFunc) (*gitlab.PipelineTrigger, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, trigger, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditPipelineTrigger", varargs...)
	ret0, _ := ret[0].(*gitlab.PipelineTrigger)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditPipelineTrigger indicates an expected call of EditPipelineTrigger.
func (mr *MockPipelineTriggersServiceMockRecorder) EditPipelineTrigger(pid, trigger, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, trigger, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditPipelineTrigger", reflect.TypeOf((*MockPipelineTriggersService)(nil).EditPipelineTrigger), varargs...)
}

// GetPipelineTrigger mocks base method.
func (m *MockPipelineTriggersService) GetPipelineTrigger(pid any, trigger int, options ...gitlab.RequestOptionFunc) (*gitlab.PipelineTrigger, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, trigger}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPipelineTrigger", varargs...)
	ret0, _ := ret[0].(*gitlab.PipelineTrigger)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPipelineTrigger indicates an expected call of GetPipelineTrigger.
func (mr *MockPipelineTriggersServiceMockRecorder) GetPipelineTrigger(pid, trigger any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, trigger}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineTrigger", reflect.TypeOf((*MockPipelineTriggersService)(nil).GetPipelineTrigger), varargs...)
}

// ListPipelineTriggers mocks base method.
func (m *MockPipelineTriggersService) ListPipelineTriggers(pid any, opt *gitlab.ListPipelineTriggersOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.PipelineTrigger, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPipelineTriggers", varargs...)
	ret0, _ := ret[0].([]*gitlab.PipelineTrigger)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPipelineTriggers indicates an expected call of ListPipelineTriggers.
func (mr *MockPipelineTriggersServiceMockRecorder) ListPipelineTriggers(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelineTriggers", reflect.TypeOf((*MockPipelineTriggersService)(nil).ListPipelineTriggers), varargs...)
}

// RunPipelineTrigger mocks base method.
func (m *MockPipelineTriggersService) RunPipelineTrigger(pid any, opt *gitlab.RunPipelineTriggerOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Pipeline, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunPipelineTrigger", varargs...)
	ret0, _ := ret[0].(*gitlab.Pipeline)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RunPipelineTrigger indicates an expected call of RunPipelineTrigger.
func (mr *MockPipelineTriggersServiceMockRecorder) RunPipelineTrigger(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPipelineTrigger", reflect.TypeOf((*MockPipelineTriggersService)(nil).RunPipelineTrigger), varargs...)
}

// TakeOwnershipOfPipelineTrigger mocks base method.
func (m *MockPipelineTriggersService) TakeOwnershipOfPipelineTrigger(pid any, trigger int, options ...gitlab.RequestOptionFunc) (*gitlab.PipelineTrigger, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, trigger}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TakeOwnershipOfPipelineTrigger", varargs...)
	ret0, _ := ret[0].(*gitlab.PipelineTrigger)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TakeOwnershipOfPipelineTrigger indicates an expected call of TakeOwnershipOfPipelineTrigger.
func (mr *MockPipelineTriggersServiceMockRecorder) TakeOwnershipOfPipelineTrigger(pid, trigger any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, trigger}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeOwnershipOfPipelineTrigger", reflect.TypeOf((*MockPipelineTriggersService)(nil).TakeOwnershipOfPipelineTrigger), varargs...)
}
