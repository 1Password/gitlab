// Code generated by MockGen. DO NOT EDIT.
// Source: dependencylistexportservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=dependencylistexportservice_inf.go -destination=mocks/dependencylistexportservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockDependencyListExportService is a mock of DependencyListExportService interface.
type MockDependencyListExportService struct {
	ctrl     *gomock.Controller
	recorder *MockDependencyListExportServiceMockRecorder
	isgomock struct{}
}

// MockDependencyListExportServiceMockRecorder is the mock recorder for MockDependencyListExportService.
type MockDependencyListExportServiceMockRecorder struct {
	mock *MockDependencyListExportService
}

// NewMockDependencyListExportService creates a new mock instance.
func NewMockDependencyListExportService(ctrl *gomock.Controller) *MockDependencyListExportService {
	mock := &MockDependencyListExportService{ctrl: ctrl}
	mock.recorder = &MockDependencyListExportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDependencyListExportService) EXPECT() *MockDependencyListExportServiceMockRecorder {
	return m.recorder
}

// CreateDependencyListExport mocks base method.
func (m *MockDependencyListExportService) CreateDependencyListExport(pipelineID int, opt *gitlab.CreateDependencyListExportOptions, options ...gitlab.RequestOptionFunc) (*gitlab.DependencyListExport, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pipelineID, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDependencyListExport", varargs...)
	ret0, _ := ret[0].(*gitlab.DependencyListExport)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDependencyListExport indicates an expected call of CreateDependencyListExport.
func (mr *MockDependencyListExportServiceMockRecorder) CreateDependencyListExport(pipelineID, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pipelineID, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDependencyListExport", reflect.TypeOf((*MockDependencyListExportService)(nil).CreateDependencyListExport), varargs...)
}

// DownloadDependencyListExport mocks base method.
func (m *MockDependencyListExportService) DownloadDependencyListExport(id int, options ...gitlab.RequestOptionFunc) (io.Reader, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{id}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadDependencyListExport", varargs...)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadDependencyListExport indicates an expected call of DownloadDependencyListExport.
func (mr *MockDependencyListExportServiceMockRecorder) DownloadDependencyListExport(id any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{id}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadDependencyListExport", reflect.TypeOf((*MockDependencyListExportService)(nil).DownloadDependencyListExport), varargs...)
}

// GetDependencyListExport mocks base method.
func (m *MockDependencyListExportService) GetDependencyListExport(id int, options ...gitlab.RequestOptionFunc) (*gitlab.DependencyListExport, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{id}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDependencyListExport", varargs...)
	ret0, _ := ret[0].(*gitlab.DependencyListExport)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDependencyListExport indicates an expected call of GetDependencyListExport.
func (mr *MockDependencyListExportServiceMockRecorder) GetDependencyListExport(id any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{id}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDependencyListExport", reflect.TypeOf((*MockDependencyListExportService)(nil).GetDependencyListExport), varargs...)
}
