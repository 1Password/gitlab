// Code generated by MockGen. DO NOT EDIT.
// Source: securefilesservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=securefilesservice_inf.go -destination=mocks/securefilesservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockSecureFilesService is a mock of SecureFilesService interface.
type MockSecureFilesService struct {
	ctrl     *gomock.Controller
	recorder *MockSecureFilesServiceMockRecorder
	isgomock struct{}
}

// MockSecureFilesServiceMockRecorder is the mock recorder for MockSecureFilesService.
type MockSecureFilesServiceMockRecorder struct {
	mock *MockSecureFilesService
}

// NewMockSecureFilesService creates a new mock instance.
func NewMockSecureFilesService(ctrl *gomock.Controller) *MockSecureFilesService {
	mock := &MockSecureFilesService{ctrl: ctrl}
	mock.recorder = &MockSecureFilesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecureFilesService) EXPECT() *MockSecureFilesServiceMockRecorder {
	return m.recorder
}

// CreateSecureFile mocks base method.
func (m *MockSecureFilesService) CreateSecureFile(pid any, content io.Reader, filename string, options ...gitlab.RequestOptionFunc) (*gitlab.SecureFile, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, content, filename}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSecureFile", varargs...)
	ret0, _ := ret[0].(*gitlab.SecureFile)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSecureFile indicates an expected call of CreateSecureFile.
func (mr *MockSecureFilesServiceMockRecorder) CreateSecureFile(pid, content, filename any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, content, filename}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecureFile", reflect.TypeOf((*MockSecureFilesService)(nil).CreateSecureFile), varargs...)
}

// DownloadSecureFile mocks base method.
func (m *MockSecureFilesService) DownloadSecureFile(pid any, id int, options ...gitlab.RequestOptionFunc) (io.Reader, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, id}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadSecureFile", varargs...)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadSecureFile indicates an expected call of DownloadSecureFile.
func (mr *MockSecureFilesServiceMockRecorder) DownloadSecureFile(pid, id any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, id}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadSecureFile", reflect.TypeOf((*MockSecureFilesService)(nil).DownloadSecureFile), varargs...)
}

// ListProjectSecureFiles mocks base method.
func (m *MockSecureFilesService) ListProjectSecureFiles(pid any, opt *gitlab.ListProjectSecureFilesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.SecureFile, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectSecureFiles", varargs...)
	ret0, _ := ret[0].([]*gitlab.SecureFile)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectSecureFiles indicates an expected call of ListProjectSecureFiles.
func (mr *MockSecureFilesServiceMockRecorder) ListProjectSecureFiles(pid, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectSecureFiles", reflect.TypeOf((*MockSecureFilesService)(nil).ListProjectSecureFiles), varargs...)
}

// RemoveSecureFile mocks base method.
func (m *MockSecureFilesService) RemoveSecureFile(pid any, id int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, id}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveSecureFile", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveSecureFile indicates an expected call of RemoveSecureFile.
func (mr *MockSecureFilesServiceMockRecorder) RemoveSecureFile(pid, id any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, id}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSecureFile", reflect.TypeOf((*MockSecureFilesService)(nil).RemoveSecureFile), varargs...)
}

// ShowSecureFileDetails mocks base method.
func (m *MockSecureFilesService) ShowSecureFileDetails(pid any, id int, options ...gitlab.RequestOptionFunc) (*gitlab.SecureFile, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, id}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ShowSecureFileDetails", varargs...)
	ret0, _ := ret[0].(*gitlab.SecureFile)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ShowSecureFileDetails indicates an expected call of ShowSecureFileDetails.
func (mr *MockSecureFilesServiceMockRecorder) ShowSecureFileDetails(pid, id any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, id}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowSecureFileDetails", reflect.TypeOf((*MockSecureFilesService)(nil).ShowSecureFileDetails), varargs...)
}
