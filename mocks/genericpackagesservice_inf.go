// Code generated by MockGen. DO NOT EDIT.
// Source: genericpackagesservice_inf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=genericpackagesservice_inf.go -destination=mocks/genericpackagesservice_inf.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockGenericPackagesService is a mock of GenericPackagesService interface.
type MockGenericPackagesService struct {
	ctrl     *gomock.Controller
	recorder *MockGenericPackagesServiceMockRecorder
}

// MockGenericPackagesServiceMockRecorder is the mock recorder for MockGenericPackagesService.
type MockGenericPackagesServiceMockRecorder struct {
	mock *MockGenericPackagesService
}

// NewMockGenericPackagesService creates a new mock instance.
func NewMockGenericPackagesService(ctrl *gomock.Controller) *MockGenericPackagesService {
	mock := &MockGenericPackagesService{ctrl: ctrl}
	mock.recorder = &MockGenericPackagesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenericPackagesService) EXPECT() *MockGenericPackagesServiceMockRecorder {
	return m.recorder
}

// DownloadPackageFile mocks base method.
func (m *MockGenericPackagesService) DownloadPackageFile(pid any, packageName, packageVersion, fileName string, options ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, packageName, packageVersion, fileName}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadPackageFile", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadPackageFile indicates an expected call of DownloadPackageFile.
func (mr *MockGenericPackagesServiceMockRecorder) DownloadPackageFile(pid, packageName, packageVersion, fileName any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, packageName, packageVersion, fileName}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadPackageFile", reflect.TypeOf((*MockGenericPackagesService)(nil).DownloadPackageFile), varargs...)
}

// FormatPackageURL mocks base method.
func (m *MockGenericPackagesService) FormatPackageURL(pid any, packageName, packageVersion, fileName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatPackageURL", pid, packageName, packageVersion, fileName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatPackageURL indicates an expected call of FormatPackageURL.
func (mr *MockGenericPackagesServiceMockRecorder) FormatPackageURL(pid, packageName, packageVersion, fileName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatPackageURL", reflect.TypeOf((*MockGenericPackagesService)(nil).FormatPackageURL), pid, packageName, packageVersion, fileName)
}

// PublishPackageFile mocks base method.
func (m *MockGenericPackagesService) PublishPackageFile(pid any, packageName, packageVersion, fileName string, content io.Reader, opt *gitlab.PublishPackageFileOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GenericPackagesFile, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, packageName, packageVersion, fileName, content, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishPackageFile", varargs...)
	ret0, _ := ret[0].(*gitlab.GenericPackagesFile)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PublishPackageFile indicates an expected call of PublishPackageFile.
func (mr *MockGenericPackagesServiceMockRecorder) PublishPackageFile(pid, packageName, packageVersion, fileName, content, opt any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, packageName, packageVersion, fileName, content, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishPackageFile", reflect.TypeOf((*MockGenericPackagesService)(nil).PublishPackageFile), varargs...)
}
