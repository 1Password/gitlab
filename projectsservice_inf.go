// Code generated by ifacemaker; DO NOT EDIT.

package gitlab

import (
	"bytes"
	"io"
)

// ProjectsService is an interface for [gitlab.Client.Projects]
type ProjectsService interface {
	// ListProjects gets a list of projects accessible by the authenticated user.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/projects.html#list-all-projects
	ListProjects(opt *ListProjectsOptions, options ...RequestOptionFunc) ([]*Project, *Response, error)
	// ListUserProjects gets a list of projects for the given user.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#list-user-projects
	ListUserProjects(uid interface{}, opt *ListProjectsOptions, options ...RequestOptionFunc) ([]*Project, *Response, error)
	// ListUserContributedProjects gets a list of visible projects a given user has contributed to.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#list-projects-a-user-has-contributed-to
	ListUserContributedProjects(uid interface{}, opt *ListProjectsOptions, options ...RequestOptionFunc) ([]*Project, *Response, error)
	// ListUserStarredProjects gets a list of projects starred by the given user.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#list-projects-starred-by-a-user
	ListUserStarredProjects(uid interface{}, opt *ListProjectsOptions, options ...RequestOptionFunc) ([]*Project, *Response, error)
	// ListProjectsUsers gets a list of users for the given project.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#get-project-users
	ListProjectsUsers(pid interface{}, opt *ListProjectUserOptions, options ...RequestOptionFunc) ([]*ProjectUser, *Response, error)
	// ListProjectsGroups gets a list of groups for the given project.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#list-a-projects-groups
	ListProjectsGroups(pid interface{}, opt *ListProjectGroupOptions, options ...RequestOptionFunc) ([]*ProjectGroup, *Response, error)
	// GetProjectLanguages gets a list of languages used by the project
	//
	// GitLab API docs:  https://docs.gitlab.com/ee/api/projects.html#languages
	GetProjectLanguages(pid interface{}, options ...RequestOptionFunc) (*ProjectLanguages, *Response, error)
	// GetProject gets a specific project, identified by project ID or
	// NAMESPACE/PROJECT_NAME, which is owned by the authenticated user.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#get-single-project
	GetProject(pid interface{}, opt *GetProjectOptions, options ...RequestOptionFunc) (*Project, *Response, error)
	// CreateProject creates a new project owned by the authenticated user.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/projects.html#create-project
	CreateProject(opt *CreateProjectOptions, options ...RequestOptionFunc) (*Project, *Response, error)
	// CreateProjectForUser creates a new project owned by the specified user.
	// Available only for admins.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#create-project-for-user
	CreateProjectForUser(user int, opt *CreateProjectForUserOptions, options ...RequestOptionFunc) (*Project, *Response, error)
	// EditProject updates an existing project.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/projects.html#edit-project
	EditProject(pid interface{}, opt *EditProjectOptions, options ...RequestOptionFunc) (*Project, *Response, error)
	// ForkProject forks a project into the user namespace of the authenticated
	// user.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/projects.html#fork-project
	ForkProject(pid interface{}, opt *ForkProjectOptions, options ...RequestOptionFunc) (*Project, *Response, error)
	// StarProject stars a given the project.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#star-a-project
	StarProject(pid interface{}, options ...RequestOptionFunc) (*Project, *Response, error)
	// ListProjectsInvitedGroups lists invited groups of a project
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#list-a-projects-invited-groups
	ListProjectsInvitedGroups(pid interface{}, opt *ListProjectInvidedGroupOptions, options ...RequestOptionFunc) ([]*ProjectGroup, *Response, error)
	// UnstarProject unstars a given project.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#unstar-a-project
	UnstarProject(pid interface{}, options ...RequestOptionFunc) (*Project, *Response, error)
	// ArchiveProject archives the project if the user is either admin or the
	// project owner of this project.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#archive-a-project
	ArchiveProject(pid interface{}, options ...RequestOptionFunc) (*Project, *Response, error)
	// UnarchiveProject unarchives the project if the user is either admin or
	// the project owner of this project.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#unarchive-a-project
	UnarchiveProject(pid interface{}, options ...RequestOptionFunc) (*Project, *Response, error)
	// DeleteProject removes a project including all associated resources
	// (issues, merge requests etc.)
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#delete-project
	DeleteProject(pid interface{}, opt *DeleteProjectOptions, options ...RequestOptionFunc) (*Response, error)
	// ShareProjectWithGroup allows to share a project with a group.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/projects.html#share-project-with-group
	ShareProjectWithGroup(pid interface{}, opt *ShareWithGroupOptions, options ...RequestOptionFunc) (*Response, error)
	// DeleteSharedProjectFromGroup allows to unshare a project from a group.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/projects.html#delete-a-shared-project-link-within-a-group
	DeleteSharedProjectFromGroup(pid interface{}, groupID int, options ...RequestOptionFunc) (*Response, error)
	// ListProjectHooks gets a list of project hooks.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#list-project-hooks
	ListProjectHooks(pid interface{}, opt *ListProjectHooksOptions, options ...RequestOptionFunc) ([]*ProjectHook, *Response, error)
	// GetProjectHook gets a specific hook for a project.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#get-project-hook
	GetProjectHook(pid interface{}, hook int, options ...RequestOptionFunc) (*ProjectHook, *Response, error)
	// AddProjectHook adds a hook to a specified project.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#add-project-hook
	AddProjectHook(pid interface{}, opt *AddProjectHookOptions, options ...RequestOptionFunc) (*ProjectHook, *Response, error)
	// EditProjectHook edits a hook for a specified project.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#edit-project-hook
	EditProjectHook(pid interface{}, hook int, opt *EditProjectHookOptions, options ...RequestOptionFunc) (*ProjectHook, *Response, error)
	// DeleteProjectHook removes a hook from a project. This is an idempotent
	// method and can be called multiple times. Either the hook is available or not.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#delete-project-hook
	DeleteProjectHook(pid interface{}, hook int, options ...RequestOptionFunc) (*Response, error)
	// TriggerTestProjectHook Trigger a test hook for a specified project.
	//
	// In GitLab 17.0 and later, this endpoint has a special rate limit.
	// In GitLab 17.0 the rate was three requests per minute for each project hook.
	// In GitLab 17.1 this was changed to five requests per minute for each project
	// and authenticated user.
	//
	// To disable this limit on self-managed GitLab and GitLab Dedicated,
	// an administrator can disable the feature flag named web_hook_test_api_endpoint_rate_limit.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#trigger-a-test-project-hook
	TriggerTestProjectHook(pid interface{}, hook int, event ProjectHookEvent, options ...RequestOptionFunc) (*Response, error)
	// SetProjectCustomHeader creates or updates a project custom webhook header.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#set-a-custom-header
	SetProjectCustomHeader(pid interface{}, hook int, key string, opt *SetHookCustomHeaderOptions, options ...RequestOptionFunc) (*Response, error)
	// DeleteProjectCustomHeader deletes a project custom webhook header.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#delete-a-custom-header
	DeleteProjectCustomHeader(pid interface{}, hook int, key string, options ...RequestOptionFunc) (*Response, error)
	// CreateProjectForkRelation creates a forked from/to relation between
	// existing projects.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#create-a-forked-fromto-relation-between-existing-projects.
	CreateProjectForkRelation(pid interface{}, fork int, options ...RequestOptionFunc) (*ProjectForkRelation, *Response, error)
	// DeleteProjectForkRelation deletes an existing forked from relationship.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#delete-an-existing-forked-from-relationship
	DeleteProjectForkRelation(pid interface{}, options ...RequestOptionFunc) (*Response, error)
	// UploadFile uploads a file.
	//
	// Deprecated: UploadFile is deprecated and will be removed in a future release.
	// Use [ProjectMarkdownUploadsService.UploadProjectMarkdown] instead for uploading
	// markdown files to a project.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/project_markdown_uploads.html#upload-a-file
	UploadFile(pid interface{}, content io.Reader, filename string, options ...RequestOptionFunc) (*ProjectFile, *Response, error)
	// UploadAvatar uploads an avatar.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#upload-a-project-avatar
	UploadAvatar(pid interface{}, avatar io.Reader, filename string, options ...RequestOptionFunc) (*Project, *Response, error)
	// DownloadAvatar downloads an avatar.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#download-a-project-avatar
	DownloadAvatar(pid interface{}, options ...RequestOptionFunc) (*bytes.Reader, *Response, error)
	// ListProjectForks gets a list of project forks.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#list-forks-of-a-project
	ListProjectForks(pid interface{}, opt *ListProjectsOptions, options ...RequestOptionFunc) ([]*Project, *Response, error)
	// GetProjectPushRules gets the push rules of a project.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#get-project-push-rules
	GetProjectPushRules(pid interface{}, options ...RequestOptionFunc) (*ProjectPushRules, *Response, error)
	// AddProjectPushRule adds a push rule to a specified project.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#add-project-push-rule
	AddProjectPushRule(pid interface{}, opt *AddProjectPushRuleOptions, options ...RequestOptionFunc) (*ProjectPushRules, *Response, error)
	// EditProjectPushRule edits a push rule for a specified project.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#edit-project-push-rule
	EditProjectPushRule(pid interface{}, opt *EditProjectPushRuleOptions, options ...RequestOptionFunc) (*ProjectPushRules, *Response, error)
	// DeleteProjectPushRule removes a push rule from a project. This is an
	// idempotent method and can be called multiple times. Either the push rule is
	// available or not.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#delete-project-push-rule
	DeleteProjectPushRule(pid interface{}, options ...RequestOptionFunc) (*Response, error)
	// GetApprovalConfiguration get the approval configuration for a project.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/merge_request_approvals.html#get-configuration
	GetApprovalConfiguration(pid interface{}, options ...RequestOptionFunc) (*ProjectApprovals, *Response, error)
	// ChangeApprovalConfiguration updates the approval configuration for a project.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/merge_request_approvals.html#change-configuration
	ChangeApprovalConfiguration(pid interface{}, opt *ChangeApprovalConfigurationOptions, options ...RequestOptionFunc) (*ProjectApprovals, *Response, error)
	// GetProjectApprovalRules looks up the list of project level approver rules.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/merge_request_approvals.html#get-project-level-rules
	GetProjectApprovalRules(pid interface{}, opt *GetProjectApprovalRulesListsOptions, options ...RequestOptionFunc) ([]*ProjectApprovalRule, *Response, error)
	// GetProjectApprovalRule gets the project level approvers.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/merge_request_approvals.html#get-a-single-project-level-rule
	GetProjectApprovalRule(pid interface{}, ruleID int, options ...RequestOptionFunc) (*ProjectApprovalRule, *Response, error)
	// CreateProjectApprovalRule creates a new project-level approval rule.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/merge_request_approvals.html#create-project-level-rule
	CreateProjectApprovalRule(pid interface{}, opt *CreateProjectLevelRuleOptions, options ...RequestOptionFunc) (*ProjectApprovalRule, *Response, error)
	// UpdateProjectApprovalRule updates an existing approval rule with new options.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/merge_request_approvals.html#update-project-level-rule
	UpdateProjectApprovalRule(pid interface{}, approvalRule int, opt *UpdateProjectLevelRuleOptions, options ...RequestOptionFunc) (*ProjectApprovalRule, *Response, error)
	// DeleteProjectApprovalRule deletes a project-level approval rule.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/merge_request_approvals.html#delete-project-level-rule
	DeleteProjectApprovalRule(pid interface{}, approvalRule int, options ...RequestOptionFunc) (*Response, error)
	// ChangeAllowedApprovers updates the list of approvers and approver groups.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/merge_request_approvals.html#change-allowed-approvers
	ChangeAllowedApprovers(pid interface{}, opt *ChangeAllowedApproversOptions, options ...RequestOptionFunc) (*ProjectApprovals, *Response, error)
	// GetProjectPullMirrorDetails returns the pull mirror details.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#get-a-projects-pull-mirror-details
	GetProjectPullMirrorDetails(pid interface{}, options ...RequestOptionFunc) (*ProjectPullMirrorDetails, *Response, error)
	// StartMirroringProject start the pull mirroring process for a project.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#start-the-pull-mirroring-process-for-a-project
	StartMirroringProject(pid interface{}, options ...RequestOptionFunc) (*Response, error)
	// TransferProject transfer a project into the specified namespace
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/projects.html#transfer-a-project-to-a-new-namespace
	TransferProject(pid interface{}, opt *TransferProjectOptions, options ...RequestOptionFunc) (*Project, *Response, error)
	// StartHousekeepingProject start the Housekeeping task for a project.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/projects.html#start-the-housekeeping-task-for-a-project
	StartHousekeepingProject(pid interface{}, options ...RequestOptionFunc) (*Response, error)
	GetRepositoryStorage(pid interface{}, options ...RequestOptionFunc) (*ProjectReposityStorage, *Response, error)
}
