// Code generated by ifacemaker; DO NOT EDIT.

package gitlab

// CommitsService is an interface for [gitlab.Client.Commits]
type CommitsService interface {
	// ListCommits gets a list of repository commits in a project.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/commits.html#list-repository-commits
	ListCommits(pid interface{}, opt *ListCommitsOptions, options ...RequestOptionFunc) ([]*Commit, *Response, error)
	// GetCommitRefs gets all references (from branches or tags) a commit is pushed to
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/commits.html#get-references-a-commit-is-pushed-to
	GetCommitRefs(pid interface{}, sha string, opt *GetCommitRefsOptions, options ...RequestOptionFunc) ([]*CommitRef, *Response, error)
	// GetCommit gets a specific commit identified by the commit hash or name of a
	// branch or tag.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/commits.html#get-a-single-commit
	GetCommit(pid interface{}, sha string, opt *GetCommitOptions, options ...RequestOptionFunc) (*Commit, *Response, error)
	// CreateCommit creates a commit with multiple files and actions.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/commits.html#create-a-commit-with-multiple-files-and-actions
	CreateCommit(pid interface{}, opt *CreateCommitOptions, options ...RequestOptionFunc) (*Commit, *Response, error)
	// GetCommitDiff gets the diff of a commit in a project..
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/commits.html#get-the-diff-of-a-commit
	GetCommitDiff(pid interface{}, sha string, opt *GetCommitDiffOptions, options ...RequestOptionFunc) ([]*Diff, *Response, error)
	// GetCommitComments gets the comments of a commit in a project.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/commits.html#get-the-comments-of-a-commit
	GetCommitComments(pid interface{}, sha string, opt *GetCommitCommentsOptions, options ...RequestOptionFunc) ([]*CommitComment, *Response, error)
	// PostCommitComment adds a comment to a commit. Optionally you can post
	// comments on a specific line of a commit. Therefor both path, line_new and
	// line_old are required.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/commits.html#post-comment-to-commit
	PostCommitComment(pid interface{}, sha string, opt *PostCommitCommentOptions, options ...RequestOptionFunc) (*CommitComment, *Response, error)
	// GetCommitStatuses gets the statuses of a commit in a project.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/commits.html#list-the-statuses-of-a-commit
	GetCommitStatuses(pid interface{}, sha string, opt *GetCommitStatusesOptions, options ...RequestOptionFunc) ([]*CommitStatus, *Response, error)
	// SetCommitStatus sets the status of a commit in a project.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/commits.html#set-the-pipeline-status-of-a-commit
	SetCommitStatus(pid interface{}, sha string, opt *SetCommitStatusOptions, options ...RequestOptionFunc) (*CommitStatus, *Response, error)
	// ListMergeRequestsByCommit gets merge request associated with a commit.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/commits.html#list-merge-requests-associated-with-a-commit
	ListMergeRequestsByCommit(pid interface{}, sha string, options ...RequestOptionFunc) ([]*BasicMergeRequest, *Response, error)
	// CherryPickCommit cherry picks a commit to a given branch.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/commits.html#cherry-pick-a-commit
	CherryPickCommit(pid interface{}, sha string, opt *CherryPickCommitOptions, options ...RequestOptionFunc) (*Commit, *Response, error)
	// RevertCommit reverts a commit in a given branch.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/commits.html#revert-a-commit
	RevertCommit(pid interface{}, sha string, opt *RevertCommitOptions, options ...RequestOptionFunc) (*Commit, *Response, error)
	// GetGPGSignature gets a GPG signature of a commit.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/commits.html#get-gpg-signature-of-a-commit
	GetGPGSignature(pid interface{}, sha string, options ...RequestOptionFunc) (*GPGSignature, *Response, error)
}
