// Code generated by ifacemaker; DO NOT EDIT.

package gitlab

// IssuesService is an interface for [gitlab.Client.Issues]
type IssuesService interface {
	// ListIssues gets all issues created by authenticated user. This function
	// takes pagination parameters page and per_page to restrict the list of issues.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/issues.html#list-issues
	ListIssues(opt *ListIssuesOptions, options ...RequestOptionFunc) ([]*Issue, *Response, error)
	// ListGroupIssues gets a list of group issues. This function accepts
	// pagination parameters page and per_page to return the list of group issues.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/issues.html#list-group-issues
	ListGroupIssues(pid interface{}, opt *ListGroupIssuesOptions, options ...RequestOptionFunc) ([]*Issue, *Response, error)
	// ListProjectIssues gets a list of project issues. This function accepts
	// pagination parameters page and per_page to return the list of project issues.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/issues.html#list-project-issues
	ListProjectIssues(pid interface{}, opt *ListProjectIssuesOptions, options ...RequestOptionFunc) ([]*Issue, *Response, error)
	// GetIssueByID gets a single issue.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/issues.html#single-issue
	GetIssueByID(issue int, options ...RequestOptionFunc) (*Issue, *Response, error)
	// GetIssue gets a single project issue.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/issues.html#single-project-issue
	GetIssue(pid interface{}, issue int, options ...RequestOptionFunc) (*Issue, *Response, error)
	// CreateIssue creates a new project issue.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/issues.html#new-issue
	CreateIssue(pid interface{}, opt *CreateIssueOptions, options ...RequestOptionFunc) (*Issue, *Response, error)
	// UpdateIssue updates an existing project issue. This function is also used
	// to mark an issue as closed.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/issues.html#edit-issues
	UpdateIssue(pid interface{}, issue int, opt *UpdateIssueOptions, options ...RequestOptionFunc) (*Issue, *Response, error)
	// DeleteIssue deletes a single project issue.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/issues.html#delete-an-issue
	DeleteIssue(pid interface{}, issue int, options ...RequestOptionFunc) (*Response, error)
	// ReorderIssue reorders an issue.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/issues.html#reorder-an-issue
	ReorderIssue(pid interface{}, issue int, opt *ReorderIssueOptions, options ...RequestOptionFunc) (*Issue, *Response, error)
	// MoveIssue updates an existing project issue. This function is also used
	// to mark an issue as closed.
	//
	// GitLab API docs: https://docs.gitlab.com/ee/api/issues.html#move-an-issue
	MoveIssue(pid interface{}, issue int, opt *MoveIssueOptions, options ...RequestOptionFunc) (*Issue, *Response, error)
	// SubscribeToIssue subscribes the authenticated user to the given issue to
	// receive notifications. If the user is already subscribed to the issue, the
	// status code 304 is returned.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/issues.html#subscribe-to-an-issue
	SubscribeToIssue(pid interface{}, issue int, options ...RequestOptionFunc) (*Issue, *Response, error)
	// UnsubscribeFromIssue unsubscribes the authenticated user from the given
	// issue to not receive notifications from that merge request. If the user
	// is not subscribed to the issue, status code 304 is returned.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/issues.html#unsubscribe-from-an-issue
	UnsubscribeFromIssue(pid interface{}, issue int, options ...RequestOptionFunc) (*Issue, *Response, error)
	// CreateTodo creates a todo for the current user for an issue.
	// If there already exists a todo for the user on that issue, status code
	// 304 is returned.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/issues.html#create-a-to-do-item
	CreateTodo(pid interface{}, issue int, options ...RequestOptionFunc) (*Todo, *Response, error)
	// ListMergeRequestsClosingIssue gets all the merge requests that will close
	// issue when merged.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/issues.html#list-merge-requests-that-close-a-particular-issue-on-merge
	ListMergeRequestsClosingIssue(pid interface{}, issue int, opt *ListMergeRequestsClosingIssueOptions, options ...RequestOptionFunc) ([]*MergeRequest, *Response, error)
	// ListMergeRequestsRelatedToIssue gets all the merge requests that are
	// related to the issue
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/issues.html#list-merge-requests-related-to-issue
	ListMergeRequestsRelatedToIssue(pid interface{}, issue int, opt *ListMergeRequestsRelatedToIssueOptions, options ...RequestOptionFunc) ([]*MergeRequest, *Response, error)
	// SetTimeEstimate sets the time estimate for a single project issue.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/issues.html#set-a-time-estimate-for-an-issue
	SetTimeEstimate(pid interface{}, issue int, opt *SetTimeEstimateOptions, options ...RequestOptionFunc) (*TimeStats, *Response, error)
	// ResetTimeEstimate resets the time estimate for a single project issue.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/issues.html#reset-the-time-estimate-for-an-issue
	ResetTimeEstimate(pid interface{}, issue int, options ...RequestOptionFunc) (*TimeStats, *Response, error)
	// AddSpentTime adds spent time for a single project issue.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/issues.html#add-spent-time-for-an-issue
	AddSpentTime(pid interface{}, issue int, opt *AddSpentTimeOptions, options ...RequestOptionFunc) (*TimeStats, *Response, error)
	// ResetSpentTime resets the spent time for a single project issue.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/issues.html#reset-spent-time-for-an-issue
	ResetSpentTime(pid interface{}, issue int, options ...RequestOptionFunc) (*TimeStats, *Response, error)
	// GetTimeSpent gets the spent time for a single project issue.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/issues.html#get-time-tracking-stats
	GetTimeSpent(pid interface{}, issue int, options ...RequestOptionFunc) (*TimeStats, *Response, error)
	// GetParticipants gets a list of issue participants.
	//
	// GitLab API docs:
	// https://docs.gitlab.com/ee/api/issues.html#participants-on-issues
	GetParticipants(pid interface{}, issue int, options ...RequestOptionFunc) ([]*BasicUser, *Response, error)
}
